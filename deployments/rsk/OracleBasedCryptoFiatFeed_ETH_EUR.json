{
  "address": "0x06635cb5D05b9306c6C1F9660332a44A5882E3F1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fiatToUsdFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cryptoUsdFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice_1e12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe33661a12a7dfeed8690248dcce324ff98f2cb970bd35bbfd7eb6f7f3c8b4368",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0x06635cb5D05b9306c6C1F9660332a44A5882E3F1",
    "transactionIndex": 1,
    "gasUsed": "364458",
    "logsBloom": "0x
    "blockHash": "0x9bdbaf48bfa3f724c04aea98a1465e081c8e2fd0875788c37a89533354f8630a",
    "transactionHash": "0xe33661a12a7dfeed8690248dcce324ff98f2cb970bd35bbfd7eb6f7f3c8b4368",
    "logs": [],
    "blockNumber": 3937684,
    "cumulativeGasUsed": "603656",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8e983D1A3AAB2Cae26eF390133f0C3D7832DEd8b",
    "0x72703013eC0A2A18b1F14Ff59F3A8cBfd4BDB2d5"
  ],
  "solcInputHash": "c63884226f90e83cf34ed49cd3798a10",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fiatToUsdFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cryptoUsdFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice_1e12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/OracleBasedCryptoFiatFeed.sol\":\"OracleBasedCryptoFiatFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/Oracle/IOracleBasedCryptoFiatFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IOracleBasedCryptoFiatFeed {   \\r\\n    function getPrice_1e12() external view returns (uint256);\\r\\n    function getDecimals() external view returns (uint8);\\r\\n}\",\"keccak256\":\"0x51e7c5389064c34ee0c5637133024c67a49f310cb16d8acb73ac7d2b4edb6864\",\"license\":\"MIT\"},\"contracts/Oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n    function decimals() external view returns (uint8);\\r\\n    function price() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x6b03ba41035b427968a18230eb6f4f3b17cd4d5accc74c3b102d230368fe9746\",\"license\":\"MIT\"},\"contracts/Oracle/OracleBasedCryptoFiatFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IPriceFeed.sol\\\";\\r\\nimport \\\"./IOracleBasedCryptoFiatFeed.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract OracleBasedCryptoFiatFeed is IOracleBasedCryptoFiatFeed {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IPriceFeed internal fiatToUsdFeed;\\r\\n    IPriceFeed internal cryptoToUsdFeed;\\r\\n    \\r\\n    constructor(address _fiatToUsdFeedAddress, address _cryptoUsdFeedAddress) public {\\r\\n        require(_fiatToUsdFeedAddress != address(0), \\\"FiatToUsdFeed address cannot be 0\\\");\\r\\n        require(_cryptoUsdFeedAddress != address(0), \\\"CryptoUsdFeed address cannot be 0\\\");\\r\\n\\r\\n        fiatToUsdFeed = IPriceFeed(_fiatToUsdFeedAddress);\\r\\n        cryptoToUsdFeed = IPriceFeed(_cryptoUsdFeedAddress);\\r\\n    }\\r\\n\\r\\n    function getPrice_1e12() override public view returns (uint256) {\\r\\n        uint256 fiatUsdPrice = fiatToUsdFeed.price();\\r\\n        uint256 cryptoUsdPrice = cryptoToUsdFeed.price();\\r\\n\\r\\n        return uint256(1e12)\\r\\n            .mul(cryptoUsdPrice)\\r\\n            .mul(uint256(10)**fiatToUsdFeed.decimals())\\r\\n            .div(fiatUsdPrice)\\r\\n            .div(uint256(10)**cryptoToUsdFeed.decimals());\\r\\n    }\\r\\n    \\r\\n    function getDecimals() override public view returns (uint8) {\\r\\n        return 12;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x28b11c1044f2c65090884a959f9f99a5398ef826e2de88c06b368eedda0e8ddc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104e53803806104e58339818101604052604081101561003357600080fd5b5080516020909101516001600160a01b0382166100815760405162461bcd60e51b81526004018080602001828103825260218152602001806104a36021913960400191505060405180910390fd5b6001600160a01b0381166100c65760405162461bcd60e51b81526004018080602001828103825260218152602001806104c46021913960400191505060405180910390fd5b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556103a2806101016000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063f0141d841461003b578063f245a92f14610059575b600080fd5b610043610073565b6040805160ff9092168252519081900360200190f35b610061610078565b60408051918252519081900360200190f35b600c90565b600080546040805163501ad8ff60e11b8152905183926001600160a01b03169163a035b1fe916004808301926020929190829003018186803b1580156100bd57600080fd5b505afa1580156100d1573d6000803e3d6000fd5b505050506040513d60208110156100e757600080fd5b50516001546040805163501ad8ff60e11b815290519293506000926001600160a01b039092169163a035b1fe91600480820192602092909190829003018186803b15801561013457600080fd5b505afa158015610148573d6000803e3d6000fd5b505050506040513d602081101561015e57600080fd5b50516001546040805163313ce56760e01b8152905192935061027b926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156101ac57600080fd5b505afa1580156101c0573d6000803e3d6000fd5b505050506040513d60208110156101d657600080fd5b50516000546040805163313ce56760e01b8152905160ff909316600a0a9261027592879284926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561022e57600080fd5b505afa158015610242573d6000803e3d6000fd5b505050506040513d602081101561025857600080fd5b505160ff16600a0a61026f64e8d4a5100088610282565b90610282565b906102e4565b9250505090565b600082610291575060006102de565b8282028284828161029e57fe5b04146102db5760405162461bcd60e51b815260040180806020018281038252602181526020018061034c6021913960400191505060405180910390fd5b90505b92915050565b600080821161033a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161034357fe5b04939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220bc31cca78208b7d7a1f501ce76333625aae00ab9f2badc4b2bf8e8974cfa468164736f6c634300060c003346696174546f5573644665656420616464726573732063616e6e6f74206265203043727970746f5573644665656420616464726573732063616e6e6f742062652030",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063f0141d841461003b578063f245a92f14610059575b600080fd5b610043610073565b6040805160ff9092168252519081900360200190f35b610061610078565b60408051918252519081900360200190f35b600c90565b600080546040805163501ad8ff60e11b8152905183926001600160a01b03169163a035b1fe916004808301926020929190829003018186803b1580156100bd57600080fd5b505afa1580156100d1573d6000803e3d6000fd5b505050506040513d60208110156100e757600080fd5b50516001546040805163501ad8ff60e11b815290519293506000926001600160a01b039092169163a035b1fe91600480820192602092909190829003018186803b15801561013457600080fd5b505afa158015610148573d6000803e3d6000fd5b505050506040513d602081101561015e57600080fd5b50516001546040805163313ce56760e01b8152905192935061027b926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156101ac57600080fd5b505afa1580156101c0573d6000803e3d6000fd5b505050506040513d60208110156101d657600080fd5b50516000546040805163313ce56760e01b8152905160ff909316600a0a9261027592879284926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561022e57600080fd5b505afa158015610242573d6000803e3d6000fd5b505050506040513d602081101561025857600080fd5b505160ff16600a0a61026f64e8d4a5100088610282565b90610282565b906102e4565b9250505090565b600082610291575060006102de565b8282028284828161029e57fe5b04146102db5760405162461bcd60e51b815260040180806020018281038252602181526020018061034c6021913960400191505060405180910390fd5b90505b92915050565b600080821161033a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161034357fe5b04939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220bc31cca78208b7d7a1f501ce76333625aae00ab9f2badc4b2bf8e8974cfa468164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9390,
        "contract": "contracts/Oracle/OracleBasedCryptoFiatFeed.sol:OracleBasedCryptoFiatFeed",
        "label": "fiatToUsdFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPriceFeed)9378"
      },
      {
        "astId": 9392,
        "contract": "contracts/Oracle/OracleBasedCryptoFiatFeed.sol:OracleBasedCryptoFiatFeed",
        "label": "cryptoToUsdFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPriceFeed)9378"
      }
    ],
    "types": {
      "t_contract(IPriceFeed)9378": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      }
    }
  }
}