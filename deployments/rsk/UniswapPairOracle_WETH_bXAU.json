{
  "address": "0x3170df34d23Bc5e1be4A7b01F9d54DF2065FbB2B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allow_stale_consults",
          "type": "bool"
        }
      ],
      "name": "AllowStaleConsultsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "consult_latency",
          "type": "uint256"
        }
      ],
      "name": "ConsultLeniencySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "PeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allow_stale_consults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockTimestampLast",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consult_leniency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allow_stale_consults",
          "type": "bool"
        }
      ],
      "name": "setAllowStaleConsults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_consult_leniency",
          "type": "uint256"
        }
      ],
      "name": "setConsultLeniency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldUpdateOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e8753323c89a9163d317b1f8e29d7f688a08385fb272e6606b730bb64e8dbfc",
  "receipt": {
    "to": null,
    "from": "0x524348A6fD0836Ee4c78F08C62D1BE7594061a8c",
    "contractAddress": "0x3170df34d23Bc5e1be4A7b01F9d54DF2065FbB2B",
    "transactionIndex": 0,
    "gasUsed": "1377522",
    "logsBloom": "0x
    "blockHash": "0x8dd591f99c621734dff27aac2b8e71db65b94347757d0e723573fa1752511e3f",
    "transactionHash": "0x1e8753323c89a9163d317b1f8e29d7f688a08385fb272e6606b730bb64e8dbfc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4244415,
        "transactionHash": "0x1e8753323c89a9163d317b1f8e29d7f688a08385fb272e6606b730bb64e8dbfc",
        "address": "0x3170df34d23Bc5e1be4A7b01F9d54DF2065FbB2B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000524348a6fd0836ee4c78f08c62d1be7594061a8c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8dd591f99c621734dff27aac2b8e71db65b94347757d0e723573fa1752511e3f"
      }
    ],
    "blockNumber": 4244415,
    "cumulativeGasUsed": "1377522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Af7cba7CDfE30664ab6E06D8D2210915Ef73c2E",
    "0x542fDA317318eBF1d3DEAf76E0b632741A7e677d",
    "0xA4A8Fb98A26E5314397170e5D12Da8B73Dc2CEB5"
  ],
  "solcInputHash": "5a0c977d732c918ce49ef0ea74613e22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow_stale_consults\",\"type\":\"bool\"}],\"name\":\"AllowStaleConsultsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consult_latency\",\"type\":\"uint256\"}],\"name\":\"ConsultLeniencySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"PeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allow_stale_consults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consult_leniency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow_stale_consults\",\"type\":\"bool\"}],\"name\":\"setAllowStaleConsults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consult_leniency\",\"type\":\"uint256\"}],\"name\":\"setConsultLeniency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/UniswapOracle/UniswapPairOracle.sol\":\"UniswapPairOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Oracle/ICryptoPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICryptoPairOracle {\\n    function consult(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\n\\n    function updateOracle() external;\\n\\n    function shouldUpdateOracle() external view returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1366164f1068e1aa3d8ca8e7fbf168cfd76b11c7994fa5f1c1b6a11f0626be08\",\"license\":\"MIT\"},\"contracts/Oracle/UniswapOracle/UniswapPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../ICryptoPairOracle.sol\\\";\\nimport \\\"./libs/FixedPoint.sol\\\";\\nimport \\\"./libs/UQ112x112.sol\\\";\\n\\n// Fixed window oracle that recomputes the average price for the entire period once every period\\n// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract UniswapPairOracle is Ownable, ICryptoPairOracle {\\n    using FixedPoint for *;\\n\\n    uint8 private constant DECIMALS = 18;\\n\\n    uint256 public period = 3600; // 1 hour TWAP (time-weighted average price)\\n    uint256 private constant MAXIMUM_PERIOD = 3600 * 48; // 48 hours\\n    uint256 private constant MINIMUM_PERIOD = 60 * 5; // 5 minutes\\n\\n    uint256 public consult_leniency = 60 * 15; // Used for being able to consult past the period end\\n    bool public allow_stale_consults = false; // If false, consult() will fail if the TWAP is stale\\n\\n    IUniswapV2Pair public immutable pair;\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint32 public blockTimestampLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    constructor(\\n        address factoryAddress,\\n        address tokenA,\\n        address tokenB\\n    ) {\\n        require(factoryAddress != address(0), \\\"Factory address cannot be 0\\\");\\n        require(tokenA != address(0), \\\"TokenA address cannot be 0\\\");\\n        require(tokenB != address(0), \\\"TokenB address cannot be 0\\\");\\n\\n        IUniswapV2Factory factory = IUniswapV2Factory(factoryAddress);\\n\\n        IUniswapV2Pair _pair = IUniswapV2Pair(factory.getPair(tokenA, tokenB));\\n        pair = _pair;\\n        token0 = _pair.token0();\\n        token1 = _pair.token1();\\n    }\\n\\n    function setPeriod(uint256 _period) external onlyOwner {\\n        require(_period <= MAXIMUM_PERIOD, \\\"PairOracle::setPeriod: > MAXIMUM_PERIOD\\\");\\n        require(_period >= MINIMUM_PERIOD, \\\"PairOracle::setPeriod: < MINIMUM_PERIOD\\\");\\n        period = _period;\\n\\n        emit PeriodSet(_period);\\n    }\\n\\n    function setConsultLeniency(uint256 _consult_leniency) external onlyOwner {\\n        consult_leniency = _consult_leniency;\\n\\n        emit ConsultLeniencySet(_consult_leniency);\\n    }\\n\\n    function setAllowStaleConsults(bool _allow_stale_consults) external onlyOwner {\\n        allow_stale_consults = _allow_stale_consults;\\n\\n        emit AllowStaleConsultsSet(_allow_stale_consults);\\n    }\\n\\n    function reset() external onlyOwner {\\n        price0CumulativeLast = pair.price0CumulativeLast(); // Fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = pair.price1CumulativeLast(); // Fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"UniswapPairOracle: NO_RESERVES\\\"); // Ensure that there's liquidity in the pair\\n    }\\n\\n    // Check if updateOracle() can be called instead of wasting gas calling it\\n    function shouldUpdateOracle() public view override returns (bool) {\\n        uint32 blockTimestamp = currentBlockTimestamp();\\n\\n        unchecked {\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n            return (timeElapsed >= period);\\n        }\\n    }\\n\\n    function updateOracle() external override {\\n        require(blockTimestampLast > 0, \\\"Oracle not ready\\\");\\n\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = currentCumulativePrices(address(pair));\\n\\n        unchecked {\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\n            // Ensure that at least one full period has passed since the last update\\n            require(timeElapsed >= period || owner() == _msgSender(), \\\"UniswapPairOracle: PERIOD_NOT_ELAPSED\\\");\\n\\n            // Overflow is desired, casting never truncates\\n            // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n            price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n            price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\n            price0CumulativeLast = price0Cumulative;\\n            price1CumulativeLast = price1Cumulative;\\n            blockTimestampLast = blockTimestamp;\\n        }\\n    }\\n\\n    // Note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\\n        uint32 blockTimestamp = currentBlockTimestamp();\\n\\n        unchecked {\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\n            // Ensure that the price is not stale\\n            require((timeElapsed < (period + consult_leniency)) || allow_stale_consults, \\\"UniswapPairOracle: PRICE_IS_STALE_NEED_TO_CALL_UPDATE\\\");\\n\\n            if (token == token0) {\\n                amountOut = price0Average.mul(amountIn).decode144();\\n            } else {\\n                require(token == token1, \\\"UniswapPairOracle: INVALID_TOKEN\\\");\\n                amountOut = price1Average.mul(amountIn).decode144();\\n            }\\n        }\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address _pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        IUniswapV2Pair uniswapPair = IUniswapV2Pair(_pair);\\n        price0Cumulative = uniswapPair.price0CumulativeLast();\\n        price1Cumulative = uniswapPair.price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 _blockTimestampLast) = uniswapPair.getReserves();\\n        unchecked {\\n            if (_blockTimestampLast != blockTimestamp) {\\n                // subtraction overflow is desired\\n                uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\\n                // addition overflow is desired\\n                // counterfactual\\n                price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n                // counterfactual\\n                price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n            }\\n        }\\n    }\\n\\n    event PeriodSet(uint256 period);\\n    event ConsultLeniencySet(uint256 consult_latency);\\n    event AllowStaleConsultsSet(bool allow_stale_consults);\\n}\\n\",\"keccak256\":\"0x3fde94837d4145e4c2ff20eb33986d18a1c093a6824d40762511f502925b1b0b\",\"license\":\"MIT\"},\"contracts/Oracle/UniswapOracle/libs/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\n// Originally taken from Uniswap V2 library like it's mentioned here: https://ethereum.stackexchange.com/a/87713\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7204fa98f384744d55ca9710c75ffad2fe482c900d4f0c5a3ac95866acfbe9c6\",\"license\":\"MIT\"},\"contracts/Oracle/UniswapOracle/libs/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\\n    uint256 private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z;\\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\\n\",\"keccak256\":\"0x1dde4203d7d0a4326b143cdcb42ccd8f4b0e4414cc08e41880d1d58d598cca12\",\"license\":\"MIT\"},\"contracts/Oracle/UniswapOracle/libs/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 private constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x334ae56b312bede9eee2978f24b3b16e3f5200c258a5291a36d5c2c2cde4f14b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052610e106001556103846002556003805460ff191690553480156200002757600080fd5b50604051620015b3380380620015b38339810160408190526200004a916200035f565b6200005533620002f2565b6001600160a01b038316620000b15760405162461bcd60e51b815260206004820152601b60248201527f466163746f727920616464726573732063616e6e6f742062652030000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001095760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e4120616464726573732063616e6e6f7420626520300000000000006044820152606401620000a8565b6001600160a01b038116620001615760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e4220616464726573732063616e6e6f7420626520300000000000006044820152606401620000a8565b60405163e6a4390560e01b81526001600160a01b0383811660048301528281166024830152849160009183169063e6a4390590604401602060405180830381865afa158015620001b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001db9190620003a9565b9050806001600160a01b03166080816001600160a01b031681525050806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000236573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025c9190620003a9565b6001600160a01b031660a0816001600160a01b031681525050806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002da9190620003a9565b6001600160a01b031660c05250620003ce9350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200035a57600080fd5b919050565b6000806000606084860312156200037557600080fd5b620003808462000342565b9250620003906020850162000342565b9150620003a06040850162000342565b90509250925092565b600060208284031215620003bc57600080fd5b620003c78262000342565b9392505050565b60805160a05160c05161118b62000428600039600081816102cb015261059c01526000818161016901526105250152600081816102720152818161073d015281816108d60152818161095e01526109e9015261118b6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063d21220a71161007c578063d21220a7146102c6578063d6f124f0146102ed578063d826f88f146102f5578063ef78d4fd146102fd578063f1551aea14610306578063f2fde38b1461031957600080fd5b80638da5cb5b14610249578063a6bb45391461025a578063a8aa1b311461026d578063aeec23ed14610294578063c5700a02146102a157600080fd5b80633ddac9531161010a5780633ddac953146101de5780635909c0d5146101f15780635a3d5493146101fa5780635cb9a714146102035780635e6aaf2c14610216578063715018a61461024157600080fd5b806309bf39ed146101475780630dfe1681146101645780630f3a9f65146101a35780631feb2193146101b8578063313ce567146101cf575b600080fd5b61014f61032c565b60405190151581526020015b60405180910390f35b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015b565b6101b66101b1366004610f6c565b610351565b005b6101c160025481565b60405190815260200161015b565b6040516012815260200161015b565b6101c16101ec366004610fa1565b610485565b6101c160045481565b6101c160055481565b6101b6610211366004610f6c565b610656565b600854610229906001600160e01b031681565b6040516001600160e01b03909116815260200161015b565b6101b66106b5565b6000546001600160a01b031661018b565b600754610229906001600160e01b031681565b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b60035461014f9060ff1681565b6006546102b19063ffffffff1681565b60405163ffffffff909116815260200161015b565b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b66106eb565b6101b66108aa565b6101c160015481565b6101b6610314366004610fcb565b610af8565b6101b6610327366004610ff4565b610b63565b600080610337610bfe565b60065460015463ffffffff91821690920316101592915050565b6000546001600160a01b031633146103845760405162461bcd60e51b815260040161037b9061100f565b60405180910390fd5b6202a3008111156103e75760405162461bcd60e51b815260206004820152602760248201527f506169724f7261636c653a3a736574506572696f643a203e204d4158494d554d60448201526617d411549253d160ca1b606482015260840161037b565b61012c8110156104495760405162461bcd60e51b815260206004820152602760248201527f506169724f7261636c653a3a736574506572696f643a203c204d494e494d554d60448201526617d411549253d160ca1b606482015260840161037b565b60018190556040518181527f6649c90b5089688430ab3e855e2eedb017ca17f6eb1aed93805dcf4996a4da7d906020015b60405180910390a150565b600080610490610bfe565b60065460025460015492935063ffffffff9182168403920190821610806104b9575060035460ff165b6105235760405162461bcd60e51b815260206004820152603560248201527f556e6973776170506169724f7261636c653a2050524943455f49535f5354414c604482015274455f4e4545445f544f5f43414c4c5f55504441544560581b606482015260840161037b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03160361059a5760408051602081019091526007546001600160e01b0316815261058a906105839086610c14565b5160701c90565b6001600160901b0316925061064e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161461061b5760405162461bcd60e51b815260206004820181905260248201527f556e6973776170506169724f7261636c653a20494e56414c49445f544f4b454e604482015260640161037b565b60408051602081019091526008546001600160e01b03168152610642906105839086610c14565b6001600160901b031692505b505092915050565b6000546001600160a01b031633146106805760405162461bcd60e51b815260040161037b9061100f565b60028190556040518181527fc4f07c802c33977425784acbb7fc1f28f19319a7e133b2afda5eaa260377dce19060200161047a565b6000546001600160a01b031633146106df5760405162461bcd60e51b815260040161037b9061100f565b6106e96000610cbe565b565b60065463ffffffff166107335760405162461bcd60e51b815260206004820152601060248201526f4f7261636c65206e6f7420726561647960801b604482015260640161037b565b60008060006107617f0000000000000000000000000000000000000000000000000000000000000000610d0e565b600654600154939650919450925063ffffffff90811683039190821610158061079457506000546001600160a01b031633145b6107ee5760405162461bcd60e51b815260206004820152602560248201527f556e6973776170506169724f7261636c653a20504552494f445f4e4f545f454c604482015264105414d15160da1b606482015260840161037b565b60405180602001604052808263ffffffff1660045487038161081257610812611044565b046001600160e01b039081169091529051600780546001600160e01b031916919092161790556040805160208101909152600554819063ffffffff84169086038161085f5761085f611044565b046001600160e01b039081169091529051600880546001600160e01b03191691909216179055506004929092556005556006805463ffffffff191663ffffffff909216919091179055565b6000546001600160a01b031633146108d45760405162461bcd60e51b815260040161037b9061100f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610956919061105a565b6004819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de919061105a565b6005819055506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a69919061108a565b6006805463ffffffff191663ffffffff9290921691909117905590925090506001600160701b03821615801590610aa857506001600160701b03811615155b610af45760405162461bcd60e51b815260206004820152601e60248201527f556e6973776170506169724f7261636c653a204e4f5f52455345525645530000604482015260640161037b565b5050565b6000546001600160a01b03163314610b225760405162461bcd60e51b815260040161037b9061100f565b6003805460ff19168215159081179091556040519081527fe1c5a5be777de8339dedd7c2e84c98765e03575db544edef4a1d3feb8ad1fae99060200161047a565b6000546001600160a01b03163314610b8d5760405162461bcd60e51b815260040161037b9061100f565b6001600160a01b038116610bf25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161037b565b610bfb81610cbe565b50565b6000610c0f640100000000426110da565b905090565b6040805160208101909152600081526000821580610c51575083516001600160e01b031683610c4381836110ee565b9250610c4f908361111b565b145b610ca95760405162461bcd60e51b815260206004820152602360248201527f4669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552466044820152624c4f5760e81b606482015260840161037b565b60408051602081019091529081529392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000610d1b610bfe565b90506000849050806001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d84919061105a565b9350806001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de8919061105a565b92506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e51919061108a565b9250925092508463ffffffff168163ffffffff1614610eb15780850363ffffffff8116610e7e8486610ebc565b516001600160e01b031602979097019663ffffffff8116610e9f8585610ebc565b516001600160e01b0316029690960195505b505050509193909250565b6040805160208101909152600081526000826001600160701b031611610f245760405162461bcd60e51b815260206004820152601760248201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604482015260640161037b565b604080516020810190915280610f5a6001600160701b0385166dffffffffffffffffffffffffffff60701b607088901b1661112f565b6001600160e01b031690529392505050565b600060208284031215610f7e57600080fd5b5035919050565b80356001600160a01b0381168114610f9c57600080fd5b919050565b60008060408385031215610fb457600080fd5b610fbd83610f85565b946020939093013593505050565b600060208284031215610fdd57600080fd5b81358015158114610fed57600080fd5b9392505050565b60006020828403121561100657600080fd5b610fed82610f85565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60006020828403121561106c57600080fd5b5051919050565b80516001600160701b0381168114610f9c57600080fd5b60008060006060848603121561109f57600080fd5b6110a884611073565b92506110b660208501611073565b9150604084015163ffffffff811681146110cf57600080fd5b809150509250925092565b6000826110e9576110e9611044565b500690565b600081600019048311821515161561111657634e487b7160e01b600052601160045260246000fd5b500290565b60008261112a5761112a611044565b500490565b60006001600160e01b038381168061114957611149611044565b9216919091049291505056fea26469706673582212202d8acfcd9c9d57fe862148521025fa0af04fd5114167dcd8b33792af7cfe561d64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1541,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7786,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "period",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7801,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "consult_leniency",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7804,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "allow_stale_consults",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 7813,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7815,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7817,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "blockTimestampLast",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 7820,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "price0Average",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(uq112x112)8368_storage"
      },
      {
        "astId": 7823,
        "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
        "label": "price1Average",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(uq112x112)8368_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(uq112x112)8368_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 8367,
            "contract": "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol:UniswapPairOracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}