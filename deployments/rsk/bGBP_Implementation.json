{
  "address": "0xcF914f759e5a1C7fa950E9E099ea3Bb22bf06698",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bdstable_oracle_addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "weth_address",
          "type": "address"
        }
      ],
      "name": "BDStableWETHOracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bdx_oracle_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "weth_address",
          "type": "address"
        }
      ],
      "name": "BDXWETHOracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BdStableBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BdStableMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bdStable_step_d12",
          "type": "uint256"
        }
      ],
      "name": "BdStableStepSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCR_d12",
          "type": "uint256"
        }
      ],
      "name": "CollateralRatioLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "collateral_ratio_paused",
          "type": "bool"
        }
      ],
      "name": "CollateralRatioPausedToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "global_collateral_ratio",
          "type": "uint256"
        }
      ],
      "name": "CollateralRatioRefreshed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "eth_fiat_consumer_address",
          "type": "address"
        }
      ],
      "name": "EthFiatOracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumMintRedeemDelayInBlocks",
          "type": "uint256"
        }
      ],
      "name": "MinimumMintRedeemDelayInBlocksSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "PoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price_band_d12",
          "type": "uint256"
        }
      ],
      "name": "PriceBandSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price_target_d12",
          "type": "uint256"
        }
      ],
      "name": "PriceTargetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BDX_price_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableExcessCollatDV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bdStable_step_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bdstable_pools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bdstable_pools_array",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bdstable_price_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "canLegallyRedeem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral_ratio_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effective_global_collateral_ratio_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBdStablesPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_effective_bdx_coverage_ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "global_collateral_ratio_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bdx_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initalBdStableToTreasury_d18",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastMintByUserBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wantedCR_d12",
          "type": "uint256"
        }
      ],
      "name": "lockCollateralRatioAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "b_amount",
          "type": "uint256"
        }
      ],
      "name": "pool_burn_from",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pool_claim_bdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "m_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "m_amount",
          "type": "uint256"
        }
      ],
      "name": "pool_mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pool_transfer_claimed_bdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price_band_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price_target_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCollateralRatio_last_call_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refresh_cooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bdstable_oracle_addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth_address",
          "type": "address"
        }
      ],
      "name": "setBDStable_WETH_Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bdx_oracle_addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth_address",
          "type": "address"
        }
      ],
      "name": "setBDX_WETH_Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bdStable_step_d12",
          "type": "uint256"
        }
      ],
      "name": "setBdStable_step_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eth_fiat_consumer_address",
          "type": "address"
        }
      ],
      "name": "setETH_fiat_Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumMintRedeemDelayInBlocks",
          "type": "uint256"
        }
      ],
      "name": "setMinimumSwapsDelayInBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price_band_d12",
          "type": "uint256"
        }
      ],
      "name": "set_price_band_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price_target_d12",
          "type": "uint256"
        }
      ],
      "name": "set_price_target_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldUpdateOracles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleCollateralRatioPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "BDX_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer_bdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "BDX_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer_bdx_force",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedPoolsBDX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOraclesIfNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth_fiat_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "when_should_refresh_collateral_ratio_in_seconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa32f0d10572c0102f2c288882ecd92e87d9948fa93ce517eb6641a3879a1dc49",
  "receipt": {
    "to": null,
    "from": "0x524348A6fD0836Ee4c78F08C62D1BE7594061a8c",
    "contractAddress": "0xcF914f759e5a1C7fa950E9E099ea3Bb22bf06698",
    "transactionIndex": 0,
    "gasUsed": "3507676",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x41fa2235e7412ea7d14a2aabcdc2a77579790ff2eda5cf3596358b2717db819d",
    "transactionHash": "0xa32f0d10572c0102f2c288882ecd92e87d9948fa93ce517eb6641a3879a1dc49",
    "logs": [],
    "blockNumber": 4244392,
    "cumulativeGasUsed": "3507676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5a0c977d732c918ce49ef0ea74613e22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bdstable_oracle_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"weth_address\",\"type\":\"address\"}],\"name\":\"BDStableWETHOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bdx_oracle_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"weth_address\",\"type\":\"address\"}],\"name\":\"BDXWETHOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BdStableBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BdStableMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bdStable_step_d12\",\"type\":\"uint256\"}],\"name\":\"BdStableStepSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCR_d12\",\"type\":\"uint256\"}],\"name\":\"CollateralRatioLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"collateral_ratio_paused\",\"type\":\"bool\"}],\"name\":\"CollateralRatioPausedToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"global_collateral_ratio\",\"type\":\"uint256\"}],\"name\":\"CollateralRatioRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eth_fiat_consumer_address\",\"type\":\"address\"}],\"name\":\"EthFiatOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumMintRedeemDelayInBlocks\",\"type\":\"uint256\"}],\"name\":\"MinimumMintRedeemDelayInBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price_band_d12\",\"type\":\"uint256\"}],\"name\":\"PriceBandSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price_target_d12\",\"type\":\"uint256\"}],\"name\":\"PriceTargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BDX_price_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableExcessCollatDV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bdStable_step_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bdstable_pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bdstable_pools_array\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bdstable_price_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"canLegallyRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_ratio_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effective_global_collateral_ratio_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBdStablesPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_effective_bdx_coverage_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global_collateral_ratio_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bdx_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initalBdStableToTreasury_d18\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintByUserBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wantedCR_d12\",\"type\":\"uint256\"}],\"name\":\"lockCollateralRatioAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b_amount\",\"type\":\"uint256\"}],\"name\":\"pool_burn_from\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pool_claim_bdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m_amount\",\"type\":\"uint256\"}],\"name\":\"pool_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pool_transfer_claimed_bdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_band_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_target_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCollateralRatio_last_call_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh_cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bdstable_oracle_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth_address\",\"type\":\"address\"}],\"name\":\"setBDStable_WETH_Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bdx_oracle_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth_address\",\"type\":\"address\"}],\"name\":\"setBDX_WETH_Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bdStable_step_d12\",\"type\":\"uint256\"}],\"name\":\"setBdStable_step_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eth_fiat_consumer_address\",\"type\":\"address\"}],\"name\":\"setETH_fiat_Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumMintRedeemDelayInBlocks\",\"type\":\"uint256\"}],\"name\":\"setMinimumSwapsDelayInBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_band_d12\",\"type\":\"uint256\"}],\"name\":\"set_price_band_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_target_d12\",\"type\":\"uint256\"}],\"name\":\"set_price_target_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateOracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCollateralRatioPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BDX_amount\",\"type\":\"uint256\"}],\"name\":\"transfer_bdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BDX_amount\",\"type\":\"uint256\"}],\"name\":\"transfer_bdx_force\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolsBDX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOraclesIfNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_fiat_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"when_should_refresh_collateral_ratio_in_seconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BdStable/BDStable.sol\":\"BDStable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/BdStable/BDStable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../Bdx/BDXShares.sol\\\";\\nimport \\\"../Oracle/IOracleBasedCryptoFiatFeed.sol\\\";\\nimport \\\"../Oracle/ICryptoPairOracle.sol\\\";\\nimport \\\"./Pools/BdStablePool.sol\\\";\\nimport \\\"./Pools/BdPoolLibrary.sol\\\";\\n\\ncontract BDStable is ERC20Upgradeable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    enum PriceChoice {\\n        BDSTABLE,\\n        BDX\\n    }\\n\\n    uint8 private constant MAX_NUMBER_OF_POOLS = 32;\\n    uint256 public unclaimedPoolsBDX;\\n\\n    IERC20 private BDX;\\n    address public treasury;\\n\\n    ICryptoPairOracle private bdstableWethOracle;\\n    ICryptoPairOracle private bdxWethOracle;\\n\\n    IOracleBasedCryptoFiatFeed private weth_fiat_pricer;\\n\\n    uint256 public global_collateral_ratio_d12; // 12 decimals of precision\\n\\n    address public weth_address;\\n\\n    // The addresses in this array are added by the oracle and these contracts are able to mint bdStable\\n    address payable[] public bdstable_pools_array;\\n\\n    // Mapping is also used for faster verification\\n    mapping(address => bool) public bdstable_pools;\\n\\n    uint256 public bdStable_step_d12; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\\n    uint256 public price_target_d12; // The price of BDSTABLE at which the collateral ratio will respond to; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at 1 <fiat>\\n    uint256 public price_band_d12; // The bound above and below the price target at which the refreshCollateralRatio() will not change the collateral ratio\\n\\n    uint256 private minimumMintRedeemDelayInBlocks = 1;\\n\\n    bool public collateral_ratio_paused;\\n\\n    mapping(address => uint256) public lastMintByUserBlock;\\n\\n    // There needs to be a time interval that this can be called. Otherwise it can be called multiple times per expansion.\\n    uint256 public refreshCollateralRatio_last_call_time; // Last time the collateral ration was refreshed function was executed\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyPools() {\\n        require(bdstable_pools[msg.sender] == true, \\\"Only bd pools can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrPool() {\\n        require(msg.sender == owner() || bdstable_pools[msg.sender] == true, \\\"You are not the owner or a pool\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _treasury,\\n        address _bdx_address,\\n        uint256 _initalBdStableToTreasury_d18\\n    ) external initializer {\\n        require(bytes(_name).length > 0, \\\"Name cannot be empty\\\");\\n        require(bytes(_symbol).length > 0, \\\"Symbol cannot be empty\\\");\\n        require(_bdx_address != address(0), \\\"BDX address cannot be 0\\\");\\n\\n        __ERC20_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        treasury = _treasury;\\n\\n        BDX = IERC20(_bdx_address);\\n\\n        bdStable_step_d12 = (uint256(BdPoolLibrary.PRICE_PRECISION) * 25) / 10000; // 12 decimals of precision, equal to 0.25%\\n        global_collateral_ratio_d12 = uint256(BdPoolLibrary.COLLATERAL_RATIO_MAX); // Bdstable system starts off fully collateralized (12 decimals of precision)\\n        price_target_d12 = uint256(BdPoolLibrary.PRICE_PRECISION); // Collateral ratio will adjust according to the 1 <fiat> price target at genesis\\n        price_band_d12 = (uint256(BdPoolLibrary.PRICE_PRECISION) * 50) / 10000; // Collateral ratio will not adjust if between 0.995<fiat> and 1.005<fiat> at genesis\\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\\n\\n        if (_initalBdStableToTreasury_d18 > 0) {\\n            _mint(_treasury, _initalBdStableToTreasury_d18); // so treasury can provide liqidity to swaps and we could get prices from the swaps\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getBdStablesPoolsLength() external view returns (uint256) {\\n        return bdstable_pools_array.length;\\n    }\\n\\n    // collateral value in fiat corresponding to the stable\\n    // Iterate through all bd pools and calculate all value of collateral in all pools globally\\n    function globalCollateralValue() public view returns (uint256) {\\n        uint256 total_collateral_value_d18 = 0;\\n\\n        // bdstable_pools_array.length is limited by addPool function\\n        for (uint256 i = 0; i < bdstable_pools_array.length; i++) {\\n            total_collateral_value_d18 = total_collateral_value_d18 + (BdStablePool(bdstable_pools_array[i]).collatFiatBalance());\\n        }\\n        return total_collateral_value_d18;\\n    }\\n\\n    // Choice = 'BDSTABLE' or 'BDX' for now\\n    function oracle_price(PriceChoice choice) internal view returns (uint256) {\\n        uint256 weth_fiat_price_d12 = weth_fiat_price();\\n        uint256 price_vs_weth;\\n\\n        if (choice == PriceChoice.BDSTABLE) {\\n            price_vs_weth = uint256(bdstableWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDSTABLE if you put in BdPoolLibrary.PRICE_PRECISION WETH\\n        } else if (choice == PriceChoice.BDX) {\\n            price_vs_weth = uint256(bdxWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDX if you put in BdPoolLibrary.PRICE_PRECISION WETH\\n        } else revert(\\\"INVALID PRICE CHOICE. Needs to be either 0 (BDSTABLE) or 1 (BDX)\\\");\\n\\n        return (weth_fiat_price_d12 * BdPoolLibrary.PRICE_PRECISION) / price_vs_weth;\\n    }\\n\\n    function updateOraclesIfNeeded() external {\\n        if (bdxWethOracle.shouldUpdateOracle()) {\\n            bdxWethOracle.updateOracle();\\n        }\\n\\n        if (bdstableWethOracle.shouldUpdateOracle()) {\\n            bdstableWethOracle.updateOracle();\\n        }\\n    }\\n\\n    function shouldUpdateOracles() external view returns (bool) {\\n        return bdxWethOracle.shouldUpdateOracle() || bdstableWethOracle.shouldUpdateOracle();\\n    }\\n\\n    // Returns BDSTABLE / <fiat>\\n    function bdstable_price_d12() public view returns (uint256) {\\n        return oracle_price(PriceChoice.BDSTABLE);\\n    }\\n\\n    // Returns BDX / <fiat>\\n    function BDX_price_d12() external view returns (uint256) {\\n        return oracle_price(PriceChoice.BDX);\\n    }\\n\\n    function effective_global_collateral_ratio_d12() public view returns (uint256) {\\n        uint256 bdStable_total_supply = totalSupply();\\n        uint256 global_collat_value = globalCollateralValue();\\n        uint256 efCR = (global_collat_value * BdPoolLibrary.PRICE_PRECISION) / bdStable_total_supply;\\n        return efCR;\\n    }\\n\\n    function weth_fiat_price() public view returns (uint256) {\\n        return uint256(weth_fiat_pricer.getPrice_1e12());\\n    }\\n\\n    function canLegallyRedeem(address who) external view returns (bool) {\\n        return (block.number - lastMintByUserBlock[who]) >= minimumMintRedeemDelayInBlocks;\\n    }\\n\\n    // Returns the value of excess collateral held in all BdStablePool related to this BdStable, compared to what is needed to maintain the global collateral ratio\\n    function availableExcessCollatDV() external view returns (uint256) {\\n        uint256 total_supply = totalSupply();\\n        uint256 global_collat_value = globalCollateralValue();\\n\\n        // Calculates collateral needed to back each 1 BdStable with $1 of collateral at current collat ratio\\n        uint256 required_collat_fiat_value_d18 = (total_supply * global_collateral_ratio_d12) / BdPoolLibrary.COLLATERAL_RATIO_MAX;\\n\\n        if (global_collat_value > required_collat_fiat_value_d18) {\\n            return (global_collat_value - required_collat_fiat_value_d18);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function when_should_refresh_collateral_ratio_in_seconds() public view returns (uint256) {\\n        uint256 secondsSinceLastRefresh = block.timestamp - refreshCollateralRatio_last_call_time;\\n\\n        return secondsSinceLastRefresh > refresh_cooldown ? 0 : (refresh_cooldown - secondsSinceLastRefresh);\\n    }\\n\\n    function refreshCollateralRatio() external {\\n        if (collateral_ratio_paused == true) {\\n            return;\\n        }\\n\\n        if (when_should_refresh_collateral_ratio_in_seconds() > 0) {\\n            return;\\n        }\\n\\n        if (bdstableWethOracle.shouldUpdateOracle()) {\\n            bdstableWethOracle.updateOracle();\\n        }\\n\\n        uint256 bdstable_price_cur = bdstable_price_d12();\\n\\n        // Step increments are 0.25% (upon genesis, changable)\\n\\n        if (bdstable_price_cur > (price_target_d12 + price_band_d12)) {\\n            //decrease collateral ratio\\n            if (global_collateral_ratio_d12 <= bdStable_step_d12) {\\n                //if within a step of 0, go to 0\\n                global_collateral_ratio_d12 = 0;\\n            } else {\\n                global_collateral_ratio_d12 = global_collateral_ratio_d12 - bdStable_step_d12;\\n            }\\n        } else if (bdstable_price_cur < (price_target_d12 - price_band_d12)) {\\n            //increase collateral ratio\\n            if ((global_collateral_ratio_d12 + bdStable_step_d12) >= BdPoolLibrary.COLLATERAL_RATIO_MAX) {\\n                global_collateral_ratio_d12 = BdPoolLibrary.COLLATERAL_RATIO_MAX; // cap collateral ratio at 1.000000\\n            } else {\\n                global_collateral_ratio_d12 = global_collateral_ratio_d12 + bdStable_step_d12;\\n            }\\n        }\\n\\n        refreshCollateralRatio_last_call_time = block.timestamp; // Set the time of the last expansion\\n\\n        emit CollateralRatioRefreshed(global_collateral_ratio_d12);\\n    }\\n\\n    function get_effective_bdx_coverage_ratio() external view returns (uint256) {\\n        uint256 effective_collateral_ratio_d12 = effective_global_collateral_ratio_d12();\\n\\n        uint256 cr = global_collateral_ratio_d12 > effective_collateral_ratio_d12 ? effective_collateral_ratio_d12 : global_collateral_ratio_d12;\\n\\n        uint256 expectedBdxValue_d18 = ((BdPoolLibrary.COLLATERAL_RATIO_MAX - cr) * totalSupply()) / BdPoolLibrary.COLLATERAL_RATIO_PRECISION;\\n\\n        if (expectedBdxValue_d18 == 0) {\\n            return BdPoolLibrary.COLLATERAL_RATIO_MAX; // in we need no BDX, the coverage is 100%\\n        }\\n\\n        uint256 bdxPrice_d12 = oracle_price(PriceChoice.BDX);\\n\\n        if (bdxPrice_d12 == 0) {\\n            return 0; // in we need BDX but BDX price is 0, the coverage is 0%\\n        }\\n\\n        uint256 expectedBdx_d18 = (expectedBdxValue_d18 * BdPoolLibrary.PRICE_PRECISION) / bdxPrice_d12;\\n\\n        uint256 bdxSupply_d18 = BDX.balanceOf(address(this)) - unclaimedPoolsBDX;\\n        uint256 effectiveBdxCR_d12 = (BdPoolLibrary.PRICE_PRECISION * bdxSupply_d18) / expectedBdx_d18;\\n\\n        return effectiveBdxCR_d12 > BdPoolLibrary.COLLATERAL_RATIO_MAX ? BdPoolLibrary.COLLATERAL_RATIO_MAX : effectiveBdxCR_d12;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Used by pools when user redeems\\n    function pool_burn_from(address b_address, uint256 b_amount) external onlyPools {\\n        burnFrom(b_address, b_amount);\\n\\n        emit BdStableBurned(b_address, msg.sender, b_amount);\\n    }\\n\\n    // This function is what other bd pools will call to mint new bd stable\\n    function pool_mint(address m_address, uint256 m_amount) external onlyPools {\\n        super._mint(m_address, m_amount);\\n\\n        lastMintByUserBlock[m_address] = block.number;\\n\\n        emit BdStableMinted(msg.sender, m_address, m_amount);\\n    }\\n\\n    // Adds collateral addresses supported, such as tether and busd, must be ERC20\\n    function addPool(address pool_address) external onlyOwner {\\n        require(bdstable_pools[pool_address] == false, \\\"pool already exists\\\");\\n        require(bdstable_pools_array.length < MAX_NUMBER_OF_POOLS, \\\"pools limit reached\\\");\\n\\n        bdstable_pools[pool_address] = true;\\n        bdstable_pools_array.push(payable(pool_address));\\n\\n        emit PoolAdded(pool_address);\\n    }\\n\\n    // Remove a pool\\n    function removePool(address pool_address) external onlyOwner {\\n        require(bdstable_pools[pool_address] == true, \\\"address doesn't exist already\\\");\\n\\n        delete bdstable_pools[pool_address];\\n\\n        // bdstable_pools_array.length is limited by addPool function\\n        for (uint256 i = 0; i < bdstable_pools_array.length; i++) {\\n            if (bdstable_pools_array[i] == pool_address) {\\n                bdstable_pools_array[i] = bdstable_pools_array[bdstable_pools_array.length - 1];\\n                bdstable_pools_array.pop();\\n                break;\\n            }\\n        }\\n\\n        emit PoolRemoved(pool_address);\\n    }\\n\\n    function setBDStable_WETH_Oracle(address _bdstable_oracle_addr, address _weth_address) external onlyOwner {\\n        require(_bdstable_oracle_addr != address(0), \\\"Oracle cannot be set to the zero address\\\");\\n        require(_weth_address != address(0), \\\"WETH cannot be set to the zero address\\\");\\n\\n        bdstableWethOracle = ICryptoPairOracle(_bdstable_oracle_addr);\\n        weth_address = _weth_address;\\n\\n        emit BDStableWETHOracleSet(_bdstable_oracle_addr, _weth_address);\\n    }\\n\\n    function setBDX_WETH_Oracle(address _bdx_oracle_addr, address _weth_address) external onlyOwner {\\n        require(_bdx_oracle_addr != address(0), \\\"Oracle cannot be set to the zero address\\\");\\n        require(_weth_address != address(0), \\\"WETH cannot be set to the zero address\\\");\\n\\n        bdxWethOracle = ICryptoPairOracle(_bdx_oracle_addr);\\n        weth_address = _weth_address;\\n\\n        emit BDXWETHOracleSet(_bdx_oracle_addr, _weth_address);\\n    }\\n\\n    function setETH_fiat_Oracle(address _eth_fiat_consumer_address) external onlyOwner {\\n        require(_eth_fiat_consumer_address != address(0), \\\"Oracle cannot be set to the zero address\\\");\\n\\n        weth_fiat_pricer = IOracleBasedCryptoFiatFeed(_eth_fiat_consumer_address);\\n\\n        emit EthFiatOracleSet(_eth_fiat_consumer_address);\\n    }\\n\\n    function setBdStable_step_d12(uint256 _bdStable_step_d12) external onlyOwner {\\n        bdStable_step_d12 = _bdStable_step_d12;\\n\\n        emit BdStableStepSet(_bdStable_step_d12);\\n    }\\n\\n    function set_price_target_d12(uint256 _price_target_d12) external onlyOwner {\\n        price_target_d12 = _price_target_d12;\\n\\n        emit PriceTargetSet(_price_target_d12);\\n    }\\n\\n    function set_price_band_d12(uint256 _price_band_d12) external onlyOwner {\\n        price_band_d12 = _price_band_d12;\\n\\n        emit PriceBandSet(_price_band_d12);\\n    }\\n\\n    function toggleCollateralRatioPaused() external onlyOwner {\\n        collateral_ratio_paused = !collateral_ratio_paused;\\n\\n        emit CollateralRatioPausedToggled(collateral_ratio_paused);\\n    }\\n\\n    function lockCollateralRatioAt(uint256 wantedCR_d12) external onlyOwner {\\n        require(wantedCR_d12 <= BdPoolLibrary.COLLATERAL_RATIO_MAX, \\\"CR must be <0;1>\\\");\\n\\n        global_collateral_ratio_d12 = wantedCR_d12;\\n        collateral_ratio_paused = true;\\n\\n        emit CollateralRatioLocked(wantedCR_d12);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n        emit TreasuryChanged(_treasury);\\n    }\\n\\n    function setMinimumSwapsDelayInBlocks(uint256 _minimumMintRedeemDelayInBlocks) external onlyOwner {\\n        minimumMintRedeemDelayInBlocks = _minimumMintRedeemDelayInBlocks;\\n        emit MinimumMintRedeemDelayInBlocksSet(_minimumMintRedeemDelayInBlocks);\\n    }\\n\\n    function pool_claim_bdx(uint256 amount) external onlyPools {\\n        unclaimedPoolsBDX = unclaimedPoolsBDX + amount;\\n    }\\n\\n    function pool_transfer_claimed_bdx(address to, uint256 amount) external onlyPools {\\n        unclaimedPoolsBDX = unclaimedPoolsBDX - amount;\\n        BDX.safeTransfer(to, amount);\\n    }\\n\\n    function transfer_bdx(address to, uint256 BDX_amount) external onlyOwnerOrPool {\\n        require((BDX.balanceOf(address(this)) - unclaimedPoolsBDX) >= BDX_amount, \\\"Not enough BDX\\\");\\n\\n        BDX.safeTransfer(to, BDX_amount);\\n    }\\n\\n    function transfer_bdx_force(address to, uint256 BDX_amount) external onlyOwner {\\n        BDX.safeTransfer(to, BDX_amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 permittedAllowance = allowance(account, _msgSender());\\n        require(amount <= permittedAllowance, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        uint256 decreasedAllowance = permittedAllowance - amount;\\n        super._approve(account, _msgSender(), decreasedAllowance);\\n        super._burn(account, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event CollateralRatioRefreshed(uint256 global_collateral_ratio);\\n    event BdStableBurned(address indexed from, address indexed to, uint256 amount);\\n    event BdStableMinted(address indexed from, address indexed to, uint256 amount);\\n    event PoolAdded(address pool_address);\\n    event PoolRemoved(address pool_address);\\n    event BDStableWETHOracleSet(address indexed bdstable_oracle_addr, address indexed weth_address);\\n    event BDXWETHOracleSet(address indexed bdx_oracle_address, address indexed weth_address);\\n    event EthFiatOracleSet(address eth_fiat_consumer_address);\\n    event BdStableStepSet(uint256 bdStable_step_d12);\\n    event PriceBandSet(uint256 _price_band_d12);\\n    event PriceTargetSet(uint256 _price_target_d12);\\n    event CollateralRatioPausedToggled(bool collateral_ratio_paused);\\n    event CollateralRatioLocked(uint256 lockedCR_d12);\\n    event MinimumMintRedeemDelayInBlocksSet(uint256 minimumMintRedeemDelayInBlocks);\\n    event TreasuryChanged(address newTreasury);\\n}\\n\",\"keccak256\":\"0x00467183e22136c87c9433a1f5d03b9df590ac7541a70a0ea932c8091da2f53e\",\"license\":\"MIT\"},\"contracts/BdStable/Pools/BdPoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nlibrary BdPoolLibrary {\\n    // Constants for various precisions\\n    uint256 public constant PRICE_PRECISION = 1e12;\\n    uint256 public constant COLLATERAL_RATIO_PRECISION = 1e12;\\n    uint256 public constant COLLATERAL_RATIO_MAX = 1e12;\\n\\n    // ================ Functions ================\\n\\n    function calcMint1t1BD(uint256 col_price, uint256 collateral_amount_d18) external pure returns (uint256) {\\n        return (collateral_amount_d18 * col_price) / PRICE_PRECISION;\\n    }\\n\\n    function calcMintAlgorithmicBD(uint256 bdx_price_fiat_d12, uint256 bdx_amount_d18) external pure returns (uint256) {\\n        return (bdx_amount_d18 * bdx_price_fiat_d12) / PRICE_PRECISION;\\n    }\\n\\n    // Must be internal because of the struct\\n    function calcMintFractionalBD(\\n        uint256 bdx_price_fiat_d12,\\n        uint256 col_price_fiat_d12,\\n        uint256 collateral_amount_d18,\\n        uint256 col_ratio_d12\\n    ) internal pure returns (uint256, uint256) {\\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\\n        // The contract must check the proper ratio was sent to mint BdStable. We do this by seeing the minimum mintable BdStable based on each amount\\n\\n        uint256 c_fiat_value_d18 = (collateral_amount_d18 * col_price_fiat_d12) / PRICE_PRECISION;\\n\\n        uint256 calculated_bdx_fiat_value_d18 = ((c_fiat_value_d18 * COLLATERAL_RATIO_PRECISION) / col_ratio_d12) - c_fiat_value_d18;\\n\\n        uint256 calculated_bdx_needed = (calculated_bdx_fiat_value_d18 * PRICE_PRECISION) / bdx_price_fiat_d12;\\n\\n        return (c_fiat_value_d18 + calculated_bdx_fiat_value_d18, calculated_bdx_needed);\\n    }\\n\\n    function calcRecollateralizeBdStableInner(\\n        uint256 collateral_amount_d18,\\n        uint256 col_price,\\n        uint256 global_collat_value,\\n        uint256 bdStable_total_supply,\\n        uint256 global_collateral_ratio\\n    ) external pure returns (uint256, uint256) {\\n        uint256 collat_value_attempted = (collateral_amount_d18 * col_price) / PRICE_PRECISION;\\n        uint256 effective_collateral_ratio = (global_collat_value * PRICE_PRECISION) / bdStable_total_supply; //returns it in 1e12\\n        uint256 recollat_possible = ((global_collateral_ratio - effective_collateral_ratio) * bdStable_total_supply) / COLLATERAL_RATIO_PRECISION;\\n\\n        uint256 amount_to_recollat;\\n        if (collat_value_attempted <= recollat_possible) {\\n            amount_to_recollat = collat_value_attempted;\\n        } else {\\n            amount_to_recollat = recollat_possible;\\n        }\\n\\n        return ((amount_to_recollat * PRICE_PRECISION) / col_price, amount_to_recollat);\\n    }\\n\\n    // Must be internal because of the struct\\n    function calcBuyBackBDX(\\n        uint256 excess_collateral_fiat_value_d18,\\n        uint256 bdx_price_fiat_d12,\\n        uint256 col_price_fiat_d12,\\n        uint256 bdx_amount_d18\\n    ) internal pure returns (uint256) {\\n        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible BDX with the desired collateral\\n        require(excess_collateral_fiat_value_d18 > 0, \\\"No excess collateral to buy back!\\\");\\n\\n        // Make sure not to take more than is available\\n        uint256 bdx_fiat_value_d18 = (bdx_amount_d18 * bdx_price_fiat_d12) / PRICE_PRECISION;\\n        require(bdx_fiat_value_d18 <= excess_collateral_fiat_value_d18, \\\"You are trying to buy back more than the excess!\\\");\\n\\n        // Get the equivalent amount of collateral based on the market value of BDX provided\\n        uint256 collateral_equivalent_d18 = (bdx_fiat_value_d18 * PRICE_PRECISION) / col_price_fiat_d12;\\n\\n        return (collateral_equivalent_d18);\\n    }\\n}\\n\",\"keccak256\":\"0x67b3ad8de372b7f4061af76235a6808d3f403c3cba34f95c7df21982acb71f1b\",\"license\":\"MIT\"},\"contracts/BdStable/Pools/BdStablePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../BdStable/BDStable.sol\\\";\\nimport \\\"../../Oracle/ICryptoPairOracle.sol\\\";\\nimport \\\"./BdPoolLibrary.sol\\\";\\nimport \\\"../../Utils/IWETH.sol\\\";\\n\\ncontract BdStablePool is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 private BDX;\\n    IWETH private NativeTokenWrapper;\\n\\n    IERC20 public collateral_token;\\n    BDStable public BDSTABLE;\\n    ICryptoPairOracle public collatWEthOracle;\\n\\n    bool public is_collateral_wrapping_native_token;\\n\\n    uint256 private missing_decimals; // Number of decimals needed to get to 18\\n    address private weth_address;\\n\\n    mapping(address => uint256) public redeemBDXBalances;\\n    mapping(address => uint256) public redeemCollateralBalances;\\n    uint256 public unclaimedPoolCollateral;\\n    mapping(address => uint256) public lastRedeemed;\\n\\n    // AccessControl state variables\\n    bool public mintPaused;\\n    bool public redeemPaused;\\n    bool public recollateralizePaused;\\n    bool public buyBackPaused;\\n    bool public collateralPricePaused;\\n    bool public recollateralizeOnlyForOwner;\\n    bool public buybackOnlyForOwner;\\n\\n    uint256 public minting_fee; //d12\\n    uint256 public redemption_fee; //d12\\n    uint256 public buyback_fee; //d12\\n    uint256 public recollat_fee; //d12\\n\\n    // Pool_ceiling is the total units of collateral that a pool contract can hold\\n    uint256 public pool_ceiling; // d18\\n\\n    // Stores price of the collateral, if price is paused\\n    uint256 public pausedPrice;\\n\\n    // Bonus rate on BDX minted during recollateralizeBdStable(); 12 decimals of precision, set to 0.75% on genesis\\n    uint256 public bonus_rate; // d12\\n\\n    // Number of blocks to wait before being able to collectRedemption()\\n    uint256 public redemption_delay;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier notRedeemPaused() {\\n        require(redeemPaused == false, \\\"Redeeming is paused\\\");\\n        _;\\n    }\\n\\n    modifier notMintPaused() {\\n        require(mintPaused == false, \\\"Minting is paused\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        address _bdstable_contract_address,\\n        address _bdx_contract_address,\\n        address _collateral_address,\\n        uint256 _collateral_decimals,\\n        bool _is_collateral_wrapping_native_token\\n    ) external initializer {\\n        require(_bdstable_contract_address != address(0), \\\"BdStable address cannot be 0\\\");\\n        require(_bdx_contract_address != address(0), \\\"BDX address cannot be 0\\\");\\n        require(_collateral_address != address(0), \\\"Collateral address cannot be 0\\\");\\n\\n        __Ownable_init();\\n\\n        BDSTABLE = BDStable(_bdstable_contract_address);\\n        BDX = IERC20(_bdx_contract_address);\\n        if (_is_collateral_wrapping_native_token) {\\n            NativeTokenWrapper = IWETH(_collateral_address);\\n        }\\n        collateral_token = IERC20(_collateral_address);\\n        missing_decimals = uint256(18) - _collateral_decimals;\\n\\n        is_collateral_wrapping_native_token = _is_collateral_wrapping_native_token;\\n\\n        pool_ceiling = 1e36; // d18\\n        bonus_rate = 7500000000; // d12 0.75%\\n        redemption_delay = 1;\\n        minting_fee = 3000000000; // d12 0.3%\\n        redemption_fee = 3000000000; // d12 0.3%\\n\\n        recollateralizeOnlyForOwner = true;\\n        buybackOnlyForOwner = true;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Returns the price of the pool collateral in fiat\\n    function getCollateralPrice_d12() public view returns (uint256) {\\n        if (collateralPricePaused == true) {\\n            return pausedPrice;\\n        } else {\\n            uint256 eth_fiat_price_d12 = BDSTABLE.weth_fiat_price();\\n            uint256 collat_eth_price = collatWEthOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION);\\n\\n            return (eth_fiat_price_d12 * BdPoolLibrary.PRICE_PRECISION) / collat_eth_price;\\n        }\\n    }\\n\\n    // Returns fiat value of collateral held in this BdStable pool\\n    function collatFiatBalance() external view returns (uint256) {\\n        //Expressed in collateral token decimals\\n        if (collateralPricePaused == true) {\\n            return\\n                ((collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral) * (10**missing_decimals) * pausedPrice) /\\n                BdPoolLibrary.PRICE_PRECISION;\\n        } else {\\n            return\\n                ((collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral) * (10**missing_decimals) * getCollateralPrice_d12()) /\\n                BdPoolLibrary.PRICE_PRECISION;\\n        }\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function updateOraclesIfNeeded() public {\\n        BDSTABLE.updateOraclesIfNeeded();\\n        if (collatWEthOracle.shouldUpdateOracle()) {\\n            collatWEthOracle.updateOracle();\\n        }\\n    }\\n\\n    // Will fail if fully collateralized or fully algorithmic\\n    // > 0% and < 100% collateral-backed\\n    function mintFractionalBdStable(\\n        uint256 collateral_amount_in_max,\\n        uint256 bdx_in_max,\\n        uint256 bdStable_out_min,\\n        bool useNativeToken\\n    ) external payable notMintPaused {\\n        if (useNativeToken) {\\n            require(is_collateral_wrapping_native_token, \\\"Pool doesn't support native token\\\");\\n            require(msg.value == collateral_amount_in_max, \\\"msg.value and collateral_amount_in_max do not match\\\");\\n        }\\n\\n        updateOraclesIfNeeded();\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n\\n        if (global_collateral_ratio_d12 == 0) {\\n            collateral_amount_in_max = 0;\\n        } else if (global_collateral_ratio_d12 == BdPoolLibrary.COLLATERAL_RATIO_MAX) {\\n            bdx_in_max = 0;\\n        }\\n\\n        require(\\n            (collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral + collateral_amount_in_max) <= pool_ceiling,\\n            \\\"Pool ceiling reached, no more BdStable can be minted with this collateral\\\"\\n        );\\n\\n        uint256 collateral_amount_in_max_d18 = collateral_amount_in_max * (10**missing_decimals);\\n\\n        uint256 mint_amount;\\n        uint256 bdx_needed;\\n        if (global_collateral_ratio_d12 == 0) {\\n            mint_amount = BdPoolLibrary.calcMintAlgorithmicBD(bdx_price, bdx_in_max);\\n            bdx_needed = bdx_in_max;\\n        } else if (global_collateral_ratio_d12 == 1) {\\n            mint_amount = BdPoolLibrary.calcMint1t1BD(getCollateralPrice_d12(), collateral_amount_in_max_d18);\\n            bdx_needed = 0;\\n        } else {\\n            (mint_amount, bdx_needed) = BdPoolLibrary.calcMintFractionalBD(\\n                bdx_price,\\n                getCollateralPrice_d12(),\\n                collateral_amount_in_max_d18,\\n                global_collateral_ratio_d12\\n            );\\n        }\\n\\n        mint_amount = (mint_amount * (uint256(BdPoolLibrary.PRICE_PRECISION) - minting_fee)) / BdPoolLibrary.PRICE_PRECISION;\\n\\n        require(bdStable_out_min <= mint_amount, \\\"Slippage limit reached\\\");\\n        require(bdx_needed <= bdx_in_max, \\\"Not enough BDX inputted\\\");\\n\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        if (bdx_needed > 0) {\\n            BDX.safeTransferFrom(msg.sender, address(BDSTABLE), bdx_needed);\\n        }\\n\\n        if (collateral_amount_in_max > 0) {\\n            if (useNativeToken) {\\n                NativeTokenWrapper.deposit{value: collateral_amount_in_max}();\\n            } else {\\n                collateral_token.safeTransferFrom(msg.sender, address(this), collateral_amount_in_max);\\n            }\\n        }\\n\\n        BDSTABLE.pool_mint(msg.sender, mint_amount);\\n    }\\n\\n    // Will fail if fully collateralized or algorithmic\\n    // Redeem BDSTABLE for collateral and BDX. > 0% and < 100% collateral-backed\\n    function redeemFractionalBdStable(\\n        uint256 BdStable_amount,\\n        uint256 BDX_out_min,\\n        uint256 COLLATERAL_out_min\\n    ) external notRedeemPaused {\\n        updateOraclesIfNeeded();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n        uint256 effective_global_collateral_ratio_d12 = BDSTABLE.effective_global_collateral_ratio_d12();\\n\\n        uint256 cr_d12 = effective_global_collateral_ratio_d12 < global_collateral_ratio_d12\\n            ? effective_global_collateral_ratio_d12\\n            : global_collateral_ratio_d12;\\n\\n        uint256 BdStable_amount_post_fee = (BdStable_amount * (uint256(BdPoolLibrary.PRICE_PRECISION) - redemption_fee)) /\\n            BdPoolLibrary.PRICE_PRECISION;\\n\\n        uint256 bdx_fiat_value_d18 = BdStable_amount_post_fee - ((BdStable_amount_post_fee * cr_d12) / BdPoolLibrary.PRICE_PRECISION);\\n\\n        uint256 bdx_amount = (bdx_fiat_value_d18 * BdPoolLibrary.PRICE_PRECISION) / BDSTABLE.BDX_price_d12();\\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\\n        bdx_amount = (bdx_amount * bdx_coverage_ratio) / BdPoolLibrary.COLLATERAL_RATIO_PRECISION;\\n\\n        // Need to adjust for decimals of collateral\\n        uint256 BdStable_amount_precision = BdStable_amount_post_fee / (10**missing_decimals);\\n        uint256 collateral_fiat_value = (BdStable_amount_precision * cr_d12) / BdPoolLibrary.PRICE_PRECISION;\\n        uint256 collateral_needed = (collateral_fiat_value * BdPoolLibrary.PRICE_PRECISION) / getCollateralPrice_d12();\\n\\n        require(collateral_needed <= collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral, \\\"Not enough collateral in pool\\\");\\n        require(COLLATERAL_out_min <= collateral_needed, \\\"Slippage limit reached [collateral]\\\");\\n        require(BDX_out_min <= bdx_amount, \\\"Slippage limit reached [BDX]\\\");\\n        require(BDSTABLE.canLegallyRedeem(msg.sender), \\\"Cannot legally redeem\\\");\\n\\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender] + collateral_needed;\\n\\n        unclaimedPoolCollateral = unclaimedPoolCollateral + collateral_needed;\\n\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        if (bdx_amount > 0) {\\n            require(BDSTABLE.canLegallyRedeem(msg.sender), \\\"Cannot legally redeem\\\");\\n\\n            redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender] + bdx_amount;\\n\\n            BDSTABLE.pool_claim_bdx(bdx_amount);\\n        }\\n\\n        lastRedeemed[msg.sender] = block.number;\\n\\n        // Move all external functions to the end\\n        BDSTABLE.pool_burn_from(msg.sender, BdStable_amount);\\n    }\\n\\n    // After a redemption happens, transfer the newly minted BDX and owed collateral from this pool\\n    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\\n    // to take out BdStable/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\\n    function collectRedemption(bool useNativeToken) external {\\n        require((lastRedeemed[msg.sender] + redemption_delay) <= block.number, \\\"Must wait for redemption_delay blocks before collecting redemption\\\");\\n        bool sendBDX = false;\\n        bool sendCollateral = false;\\n        uint256 BDXAmount;\\n        uint256 CollateralAmount;\\n\\n        // Use Checks-Effects-Interactions pattern\\n        if (redeemBDXBalances[msg.sender] > 0) {\\n            BDXAmount = redeemBDXBalances[msg.sender];\\n            redeemBDXBalances[msg.sender] = 0;\\n\\n            sendBDX = true;\\n        }\\n\\n        if (redeemCollateralBalances[msg.sender] > 0) {\\n            CollateralAmount = redeemCollateralBalances[msg.sender];\\n            redeemCollateralBalances[msg.sender] = 0;\\n            unclaimedPoolCollateral = unclaimedPoolCollateral - CollateralAmount;\\n\\n            sendCollateral = true;\\n        }\\n\\n        if (sendBDX == true) {\\n            BDSTABLE.pool_transfer_claimed_bdx(msg.sender, BDXAmount);\\n        }\\n        if (sendCollateral == true) {\\n            if (useNativeToken) {\\n                NativeTokenWrapper.withdraw(CollateralAmount);\\n                safeTransferETH(msg.sender, CollateralAmount);\\n            } else {\\n                collateral_token.safeTransfer(msg.sender, CollateralAmount);\\n            }\\n        }\\n    }\\n\\n    // When the protocol is recollateralizing, we need to give a discount of BDX to hit the new CR target\\n    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get BDX for adding collateral\\n    // This function simply rewards anyone that sends collateral to a pool with the same amount of BDX + the bonus rate\\n    // Anyone can call this function to recollateralize the protocol and take the extra BDX value from the bonus rate as an arb opportunity\\n    function recollateralizeBdStable(\\n        uint256 collateral_amount,\\n        uint256 BDX_out_min,\\n        bool useNativeToken\\n    ) external payable {\\n        require(recollateralizePaused == false, \\\"Recollateralize is paused\\\");\\n\\n        if (recollateralizeOnlyForOwner) {\\n            require(msg.sender == owner(), \\\"Currently only owner can recollateralize\\\");\\n        }\\n\\n        if (useNativeToken) {\\n            require(is_collateral_wrapping_native_token, \\\"Pool doesn't support native token\\\");\\n            require(msg.value == collateral_amount, \\\"msg.value and collateral_amount do not match\\\");\\n        }\\n\\n        updateOraclesIfNeeded();\\n        uint256 collateral_amount_d18 = collateral_amount * (10**missing_decimals);\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n        uint256 bdStable_total_supply = BDSTABLE.totalSupply();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n        uint256 global_collat_value = BDSTABLE.globalCollateralValue();\\n\\n        (uint256 collateral_units, uint256 amount_to_recollat) = BdPoolLibrary.calcRecollateralizeBdStableInner(\\n            collateral_amount_d18,\\n            getCollateralPrice_d12(),\\n            global_collat_value,\\n            bdStable_total_supply,\\n            global_collateral_ratio_d12\\n        );\\n\\n        uint256 collateral_units_precision = collateral_units / (10**missing_decimals);\\n\\n        uint256 bdx_paid_back = (amount_to_recollat * (uint256(BdPoolLibrary.PRICE_PRECISION) + bonus_rate - recollat_fee)) / bdx_price;\\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\\n        bdx_paid_back = (bdx_paid_back * bdx_coverage_ratio) / BdPoolLibrary.COLLATERAL_RATIO_PRECISION;\\n\\n        require(BDX_out_min <= bdx_paid_back, \\\"Slippage limit reached\\\");\\n\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        if (useNativeToken) {\\n            // no need to check collateral_units_precision, it's <= then collateral_amount\\n\\n            NativeTokenWrapper.deposit{value: collateral_units_precision}();\\n\\n            // refund remaining native token, if any left\\n            if (msg.value > collateral_units_precision) {\\n                safeTransferETH(msg.sender, msg.value - collateral_units_precision);\\n            }\\n        } else {\\n            collateral_token.safeTransferFrom(msg.sender, address(this), collateral_units_precision);\\n        }\\n\\n        if (bdx_paid_back > 0) {\\n            BDSTABLE.transfer_bdx(msg.sender, bdx_paid_back);\\n        }\\n\\n        emit Recollateralized(collateral_units_precision, bdx_paid_back);\\n    }\\n\\n    // Function can be called by an BDX holder to have the protocol buy back BDX with excess collateral value from a desired collateral pool\\n    // This can also happen if the collateral ratio > 1\\n    function buyBackBDX(\\n        uint256 BDX_amount,\\n        uint256 COLLATERAL_out_min,\\n        bool useNativeToken\\n    ) external {\\n        require(buyBackPaused == false, \\\"Buyback is paused\\\");\\n\\n        if (buybackOnlyForOwner) {\\n            require(msg.sender == owner(), \\\"Currently only owner can buyback\\\");\\n        }\\n\\n        updateOraclesIfNeeded();\\n\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n\\n        uint256 collateral_equivalent_d18 = (BdPoolLibrary.calcBuyBackBDX(\\n            BDSTABLE.availableExcessCollatDV(),\\n            bdx_price,\\n            getCollateralPrice_d12(),\\n            BDX_amount\\n        ) * (uint256(BdPoolLibrary.PRICE_PRECISION) - buyback_fee)) / BdPoolLibrary.PRICE_PRECISION;\\n\\n        uint256 collateral_precision = collateral_equivalent_d18 / (10**missing_decimals);\\n\\n        require(COLLATERAL_out_min <= collateral_precision, \\\"Slippage limit reached\\\");\\n\\n        // Take bdx from sender\\n        BDX.safeTransferFrom(msg.sender, address(BDSTABLE), BDX_amount);\\n\\n        if (useNativeToken) {\\n            // Give the sender their desired collateral\\n            NativeTokenWrapper.withdraw(collateral_precision);\\n            safeTransferETH(msg.sender, collateral_precision);\\n        } else {\\n            // Give the sender their desired collateral\\n            collateral_token.safeTransfer(msg.sender, collateral_precision);\\n        }\\n\\n        emit BoughtBack(BDX_amount, collateral_precision);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(NativeTokenWrapper), \\\"Only native token wrapper allowed to send native token\\\");\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setCollatWETHOracle(address _collateral_weth_oracle_address, address _weth_address) external onlyOwner {\\n        require(_collateral_weth_oracle_address != address(0), \\\"Oracle cannot be set to the zero address\\\");\\n        require(_weth_address != address(0), \\\"WETH cannot be set to the zero address\\\");\\n\\n        collatWEthOracle = ICryptoPairOracle(_collateral_weth_oracle_address);\\n        weth_address = _weth_address;\\n\\n        emit CollateralWethOracleSet(_collateral_weth_oracle_address, _weth_address);\\n    }\\n\\n    function toggleMintingPaused() external onlyOwner {\\n        mintPaused = !mintPaused;\\n\\n        emit MintingPausedToggled(mintPaused);\\n    }\\n\\n    function toggleRedeemingPaused() external onlyOwner {\\n        redeemPaused = !redeemPaused;\\n\\n        emit RedeemingPausedToggled(redeemPaused);\\n    }\\n\\n    function toggleRecollateralizePaused() external onlyOwner {\\n        recollateralizePaused = !recollateralizePaused;\\n\\n        emit RecollateralizePausedToggled(recollateralizePaused);\\n    }\\n\\n    function toggleBuybackPaused() external onlyOwner {\\n        buyBackPaused = !buyBackPaused;\\n\\n        emit BuybackPausedToggled(buyBackPaused);\\n    }\\n\\n    function toggleBuybackOnlyForOwner() external onlyOwner {\\n        buybackOnlyForOwner = !buybackOnlyForOwner;\\n\\n        emit BuybackOnlyForOwnerToggled(buybackOnlyForOwner);\\n    }\\n\\n    function toggleRecollateralizeOnlyForOwner() external onlyOwner {\\n        recollateralizeOnlyForOwner = !recollateralizeOnlyForOwner;\\n\\n        emit RecollateralizeOnlyForOwnerToggled(recollateralizeOnlyForOwner);\\n    }\\n\\n    function toggleCollateralPricePaused(uint256 _new_price) external onlyOwner {\\n        // If pausing, set paused price; else if unpausing, clear pausedPrice\\n        if (collateralPricePaused == false) {\\n            pausedPrice = _new_price;\\n        } else {\\n            pausedPrice = 0;\\n        }\\n        collateralPricePaused = !collateralPricePaused;\\n\\n        emit CollateralPriceToggled(collateralPricePaused);\\n    }\\n\\n    // Combined into one function due to 24KiB contract memory limit\\n    function setPoolParameters(\\n        uint256 new_ceiling,\\n        uint256 new_bonus_rate,\\n        uint256 new_redemption_delay,\\n        uint256 new_mint_fee,\\n        uint256 new_redeem_fee,\\n        uint256 new_buyback_fee,\\n        uint256 new_recollat_fee\\n    ) external onlyOwner {\\n        pool_ceiling = new_ceiling;\\n        bonus_rate = new_bonus_rate;\\n        redemption_delay = new_redemption_delay;\\n        minting_fee = new_mint_fee;\\n        redemption_fee = new_redeem_fee;\\n        buyback_fee = new_buyback_fee;\\n        recollat_fee = new_recollat_fee;\\n\\n        emit PoolParametersSet(new_ceiling, new_bonus_rate, new_redemption_delay, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH transfer failed\\\");\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event PoolParametersSet(\\n        uint256 new_ceiling,\\n        uint256 new_bonus_rate,\\n        uint256 new_redemption_delay,\\n        uint256 new_mint_fee,\\n        uint256 new_redeem_fee,\\n        uint256 new_buyback_fee,\\n        uint256 new_recollat_fee\\n    );\\n    event MintingPausedToggled(bool toggled);\\n    event RedeemingPausedToggled(bool toggled);\\n    event RecollateralizePausedToggled(bool toggled);\\n    event BuybackPausedToggled(bool toggled);\\n    event CollateralPriceToggled(bool toggled);\\n    event CollateralWethOracleSet(address indexed collateral_weth_oracle_address, address indexed weth_address);\\n    event RecollateralizeOnlyForOwnerToggled(bool recollateralizeOnlyForOwner);\\n    event BuybackOnlyForOwnerToggled(bool buybackOnlyForOwner);\\n    event Recollateralized(uint256 indexed collateral_amount_paid, uint256 indexed bdx_paid_back);\\n    event BoughtBack(uint256 indexed bdx_amount_paid, uint256 indexed collateral_paid_back);\\n}\\n\",\"keccak256\":\"0x506318cc718bd7dcc141cc7de0a6d286475b12576d78d735ff57c46eb09bfc99\",\"license\":\"MIT\"},\"contracts/Bdx/BDXShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../BdStable/BDStable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract BDXShares is ERC20Upgradeable, OwnableUpgradeable {\\n    /* ========== STATE VARIABLES ========== */\\n    uint256 public constant MAX_TOTAL_SUPPLY = 21 * 1e6 * 1e18;\\n\\n    mapping(address => bool) public mappingBdstables;\\n    address[] public bdstables;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(string memory _name, string memory _symbol) external initializer {\\n        require(bytes(_name).length > 0, \\\"Name cannot be empty\\\");\\n        require(bytes(_symbol).length > 0, \\\"Symbol cannot be empty\\\");\\n\\n        __ERC20_init(_name, _symbol);\\n        __Ownable_init();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function getBdStablesLength() external view returns (uint256) {\\n        return bdstables.length;\\n    }\\n\\n    function addBdStableAddress(address bdstable_contract_address) external onlyOwner {\\n        if (!mappingBdstables[bdstable_contract_address]) {\\n            mappingBdstables[bdstable_contract_address] = true;\\n            bdstables.push(bdstable_contract_address);\\n            emit BdStableAddressAdded(bdstable_contract_address);\\n        }\\n    }\\n\\n    function mint(\\n        address bd_stable,\\n        address to,\\n        uint256 amount\\n    ) public onlyOwner {\\n        require((totalSupply() + amount) <= MAX_TOTAL_SUPPLY, \\\"BDX limit reached\\\");\\n\\n        _mint(to, amount);\\n\\n        emit BdxMinted(address(this), to, bd_stable, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event BdxBurned(address indexed from, address indexed to, address bd_stable, uint256 indexed amount);\\n    event BdxMinted(address indexed from, address indexed to, address bd_stable, uint256 indexed amount);\\n    event BdStableAddressAdded(address indexed addr);\\n}\\n\",\"keccak256\":\"0x72e5747e01e3ee15fda17521c260ee3602f4550c04a0bac22f8a268544a7479b\",\"license\":\"MIT\"},\"contracts/Oracle/ICryptoPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICryptoPairOracle {\\n    function consult(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\n\\n    function updateOracle() external;\\n\\n    function shouldUpdateOracle() external view returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1366164f1068e1aa3d8ca8e7fbf168cfd76b11c7994fa5f1c1b6a11f0626be08\",\"license\":\"MIT\"},\"contracts/Oracle/IOracleBasedCryptoFiatFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IOracleBasedCryptoFiatFeed {\\n    function getPrice_1e12() external view returns (uint256);\\n\\n    function getDecimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x13a3c0a2e62b738a7731bd5d8c7772ee45aa8aa003d35aad36412fbf04aa8336\",\"license\":\"MIT\"},\"contracts/Utils/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c2765912b92a886c764226e28c2e2e50c88a773ba88197da80b4044096578ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160a55534801561001557600080fd5b50613240806100256000396000f3fe608060405234801561001057600080fd5b50600436106103a45760003560e01c806387a140c3116101e9578063c03f7be31161010f578063ed7e119f116100ad578063f2fde38b1161007c578063f2fde38b14610787578063f61adab21461079a578063fa629219146107a2578063fadb1b02146107aa57600080fd5b8063ed7e119f14610739578063ed99250c14610759578063eef772f214610761578063f0f442601461077457600080fd5b8063d2d97b06116100e9578063d2d97b06146106dd578063d914cd4b146106e5578063da6ed553146106f8578063dd62ed3e1461070057600080fd5b8063c03f7be3146106b8578063c9aba0aa146106c1578063ce202603146106d457600080fd5b8063a9059cbb11610187578063b2d2362211610156578063b2d2362214610677578063b4f56b261461068a578063b7949f871461069d578063bcdede5b146106b057600080fd5b8063a9059cbb14610635578063abfd857514610648578063b02f6aec1461065b578063b20b02aa1461066e57600080fd5b80639e92f14f116101c35780639e92f14f146105e95780639f5f79e0146105fc578063a457c2d71461060f578063a8a778ae1461062257600080fd5b806387a140c3146105c35780638da5cb5b146105d057806395d89b41146105e157600080fd5b80634013124a116102ce578063688c0f471161026c57806370a082311161023b57806370a0823114610576578063715018a61461059f57806379cc6790146105a7578063870cfeab146105ba57600080fd5b8063688c0f471461054057806369d16799146105485780636c7ff97b1461055b57806370981eb21461056357600080fd5b80635b078c76116102a85780635b078c761461050a5780635e757f6a1461051257806361d027b31461051a578063686d14e61461052d57600080fd5b80634013124a146104e6578063497b5961146104ee5780634aa0eb9a1461050157600080fd5b8063246126bd11610346578063313ce56711610315578063313ce5671461049e57806331be54d3146104ad57806339509351146104c05780633b7d0946146104d357600080fd5b8063246126bd1461043f57806325f10c9b1461046a57806326191e4b146104725780632fe16b961461047b57600080fd5b80631096f103116103825780631096f103146103fc57806318160ddd1461040f5780631c0984581461041757806323b872dd1461042c57600080fd5b806302c855f8146103a957806306fdde03146103c4578063095ea7b3146103d9575b600080fd5b6103b16107b3565b6040519081526020015b60405180910390f35b6103cc610924565b6040516103bb9190612d00565b6103ec6103e7366004612d4f565b6109b6565b60405190151581526020016103bb565b6103ec61040a366004612d79565b6109ce565b6035546103b1565b61042a610425366004612d94565b6109ff565b005b6103ec61043a366004612dad565b610a6e565b609e54610452906001600160a01b031681565b6040516001600160a01b0390911681526020016103bb565b6103b1610a94565b6103b160a15481565b6103ec610489366004612d79565b60a06020526000908152604090205460ff1681565b604051601281526020016103bb565b61042a6104bb366004612d4f565b610aa5565b6103ec6104ce366004612d4f565b610b05565b61042a6104e1366004612d79565b610b44565b61042a610d3b565b6104526104fc366004612d94565b610f1e565b6103b160975481565b6103b1610f48565b6103b1610fb6565b609954610452906001600160a01b031681565b61042a61053b366004612d79565b610fee565b609f546103b1565b61042a610556366004612d94565b61108c565b61042a6110d4565b61042a610571366004612d4f565b6112a0565b6103b1610584366004612d79565b6001600160a01b031660009081526033602052604090205490565b61042a6113e9565b61042a6105b5366004612d4f565b61141d565b6103b160a85481565b60a6546103ec9060ff1681565b6065546001600160a01b0316610452565b6103cc6114aa565b61042a6105f7366004612de9565b6114b9565b61042a61060a366004612d94565b61158d565b6103ec61061d366004612d4f565b6115ec565b61042a610630366004612d4f565b611689565b6103ec610643366004612d4f565b61170c565b61042a610656366004612d94565b61171a565b61042a610669366004612d94565b611779565b6103b160a45481565b61042a610685366004612de9565b61182f565b61042a610698366004612d4f565b611903565b61042a6106ab366004612d4f565b611990565b6103ec6119ba565b6103b160a25481565b61042a6106cf366004612ebf565b611aa5565b6103b160a35481565b6103b1611cef565b61042a6106f3366004612d79565b611da7565b61042a611f0e565b6103b161070e366004612de9565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6103b1610747366004612d79565b60a76020526000908152604090205481565b6103b1611f85565b61042a61076f366004612d94565b611f91565b61042a610782366004612d79565b611ff0565b61042a610795366004612d79565b612068565b6103b1612103565b6103b1612163565b6103b1609d5481565b6000806107be612163565b9050600081609d54116107d357609d546107d5565b815b9050600064e8d4a510006107e860355490565b6107f78464e8d4a51000612f62565b6108019190612f79565b61080b9190612f98565b9050806000036108235764e8d4a51000935050505090565b600061082f60016121a1565b90508060000361084457600094505050505090565b60008161085664e8d4a5100085612f79565b6108609190612f98565b6097546098546040516370a0823160e01b81523060048201529293506000926001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190612fba565b6108df9190612f62565b90506000826108f38364e8d4a51000612f79565b6108fd9190612f98565b905064e8d4a5100081116109115780610918565b64e8d4a510005b97505050505050505090565b60606036805461093390612fd3565b80601f016020809104026020016040519081016040528092919081815260200182805461095f90612fd3565b80156109ac5780601f10610981576101008083540402835291602001916109ac565b820191906000526020600020905b81548152906001019060200180831161098f57829003601f168201915b5050505050905090565b6000336109c4818585612323565b5060019392505050565b60a5546001600160a01b038216600090815260a760205260408120549091906109f79043612f62565b101592915050565b6065546001600160a01b03163314610a325760405162461bcd60e51b8152600401610a2990613007565b60405180910390fd5b60a18190556040518181527fa603e975ae74b9c52c4ab59b67b328222c699f765f89b808e8a2ae7c9ae2428e906020015b60405180910390a150565b600033610a7c858285612447565b610a878585856124d3565b60019150505b9392505050565b6000610aa060006121a1565b905090565b33600090815260a0602052604090205460ff161515600114610ad95760405162461bcd60e51b8152600401610a299061303c565b80609754610ae79190612f62565b609755609854610b01906001600160a01b031683836126a1565b5050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906109c49082908690610b3f908790613080565b612323565b6065546001600160a01b03163314610b6e5760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b038116600090815260a0602052604090205460ff161515600114610bdb5760405162461bcd60e51b815260206004820152601d60248201527f6164647265737320646f65736e277420657869737420616c72656164790000006044820152606401610a29565b6001600160a01b038116600090815260a060205260408120805460ff191690555b609f54811015610d0157816001600160a01b0316609f8281548110610c2357610c23613098565b6000918252602090912001546001600160a01b031603610cef57609f8054610c4d90600190612f62565b81548110610c5d57610c5d613098565b600091825260209091200154609f80546001600160a01b039092169183908110610c8957610c89613098565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550609f805480610cc857610cc86130ae565b600082815260209020810160001990810180546001600160a01b0319169055019055610d01565b80610cf9816130c4565b915050610bfc565b506040516001600160a01b03821681527f4106dfdaa577573db51c0ca93f766dbedfa0758faa2e7f5bcdb7c142be803c3f90602001610a63565b60a65460ff161515600103610d4c57565b6000610d56610fb6565b1115610d5e57565b609a60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906130dd565b15610e4357609a60009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050505b6000610e4d610a94565b905060a45460a354610e5f9190613080565b811115610e935760a154609d5411610e7b576000609d55610ee7565b60a154609d54610e8b9190612f62565b609d55610ee7565b60a45460a354610ea39190612f62565b811015610ee75764e8d4a5100060a154609d54610ec09190613080565b10610ed35764e8d4a51000609d55610ee7565b60a154609d54610ee39190613080565b609d555b4260a855609d546040519081527fb1200af9b3ac4dec88c9d01e1fb7cc7fa1f0fe55bf4afac1f30cc4fc2b2d1dd290602001610a63565b609f8181548110610f2e57600080fd5b6000918252602090912001546001600160a01b0316905081565b609c546040805163f245a92f60e01b815290516000926001600160a01b03169163f245a92f9160048083019260209291908290030181865afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190612fba565b60008060a85442610fc79190612f62565b905060a2548111610fe5578060a254610fe09190612f62565b610fe8565b60005b91505090565b6065546001600160a01b031633146110185760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b03811661103e5760405162461bcd60e51b8152600401610a29906130ff565b609c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f6643a1fbc87d792d8e737bc2f2d5c0f1c7477ab534d0254404a448decceb3d9790602001610a63565b33600090815260a0602052604090205460ff1615156001146110c05760405162461bcd60e51b8152600401610a299061303c565b806097546110ce9190613080565b60975550565b609b60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906130dd565b156111b957609b60009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b505050505b609a60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123091906130dd565b1561129e57609a60009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561128557600080fd5b505af1158015611299573d6000803e3d6000fd5b505050505b565b6065546001600160a01b03163314806112cd575033600090815260a0602052604090205460ff1615156001145b6113195760405162461bcd60e51b815260206004820152601f60248201527f596f7520617265206e6f7420746865206f776e6572206f72206120706f6f6c006044820152606401610a29565b6097546098546040516370a0823160e01b81523060048201528392916001600160a01b0316906370a0823190602401602060405180830381865afa158015611365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113899190612fba565b6113939190612f62565b10156113d25760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced0408488b60931b6044820152606401610a29565b609854610b01906001600160a01b031683836126a1565b6065546001600160a01b031633146114135760405162461bcd60e51b8152600401610a2990613007565b61129e60006126f8565b6000611429833361070e565b9050808211156114875760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610a29565b60006114938383612f62565b90506114a0843383612323565b611299848461274a565b60606037805461093390612fd3565b6065546001600160a01b031633146114e35760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b0382166115095760405162461bcd60e51b8152600401610a29906130ff565b6001600160a01b03811661152f5760405162461bcd60e51b8152600401610a2990613147565b609b80546001600160a01b03199081166001600160a01b03858116918217909355609e80549092169284169283179091556040517f6b1a39edee703597b0d35ebd1e84785c1afac7793c4f61658d9851c875bd55e990600090a35050565b6065546001600160a01b031633146115b75760405162461bcd60e51b8152600401610a2990613007565b60a48190556040518181527fe9febe6aec89ff2870eeab6d13333c59cbed275b1d9a95f527c853d99ddb7cf490602001610a63565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156116715760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a29565b61167e8286868403612323565b506001949350505050565b33600090815260a0602052604090205460ff1615156001146116bd5760405162461bcd60e51b8152600401610a299061303c565b6116c7828261141d565b60405181815233906001600160a01b038416907f12d4d764706ce89037b449ff0dea7e084ef851d40ff63edaa38db6f33a581c7f906020015b60405180910390a35050565b6000336109c48185856124d3565b6065546001600160a01b031633146117445760405162461bcd60e51b8152600401610a2990613007565b60a38190556040518181527f898a2c9df7982133daaa8cfd78b8c49c520cba03205eec6480552c19059f6e3a90602001610a63565b6065546001600160a01b031633146117a35760405162461bcd60e51b8152600401610a2990613007565b64e8d4a510008111156117eb5760405162461bcd60e51b815260206004820152601060248201526f21a91036bab9ba103132901e181d989f60811b6044820152606401610a29565b609d81905560a6805460ff191660011790556040517ff3cd0dd9cc1a87f0d8733b9942a8864d40cb15c961b612792723a0a7858dd53d90610a639083815260200190565b6065546001600160a01b031633146118595760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b03821661187f5760405162461bcd60e51b8152600401610a29906130ff565b6001600160a01b0381166118a55760405162461bcd60e51b8152600401610a2990613147565b609a80546001600160a01b03199081166001600160a01b03858116918217909355609e80549092169284169283179091556040517f4b3d6a3884d9b2a42f47c477f7a3af756a41c0049f277577cf90541ab74909b190600090a35050565b33600090815260a0602052604090205460ff1615156001146119375760405162461bcd60e51b8152600401610a299061303c565b6119418282612898565b6001600160a01b038216600081815260a76020526040908190204390555133907f69f651718349cff8d0d00acbb3ebb2bf127edbdfc02746168d5e35fb7998b399906117009085815260200190565b6065546001600160a01b031633146113d25760405162461bcd60e51b8152600401610a2990613007565b609b54604080516309bf39ed60e01b815290516000926001600160a01b0316916309bf39ed9160048083019260209291908290030181865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2891906130dd565b80610aa05750609a60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa091906130dd565b600054610100900460ff16611ac05760005460ff1615611ac4565b303b155b611b275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a29565b600054610100900460ff16158015611b49576000805461ffff19166101011790555b6000865111611b915760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606401610a29565b6000855111611bdb5760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b6044820152606401610a29565b6001600160a01b038316611c315760405162461bcd60e51b815260206004820152601760248201527f42445820616464726573732063616e6e6f7420626520300000000000000000006044820152606401610a29565b611c3b8686612977565b611c436129a8565b609980546001600160a01b038087166001600160a01b0319928316179092556098805492861692909116919091179055612710611c8664e8d4a510006019612f79565b611c909190612f98565b60a15564e8d4a51000609d81905560a381905561271090611cb2906032612f79565b611cbc9190612f98565b60a455610e1060a2558115611cd557611cd58483612898565b8015611ce7576000805461ff00191690555b505050505050565b600080805b609f54811015611da157609f8181548110611d1157611d11613098565b6000918252602091829020015460408051639ccabfb560e01b815290516001600160a01b0390921692639ccabfb5926004808401938290030181865afa158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d839190612fba565b611d8d9083613080565b915080611d99816130c4565b915050611cf4565b50919050565b6065546001600160a01b03163314611dd15760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b038116600090815260a0602052604090205460ff1615611e305760405162461bcd60e51b8152602060048201526013602482015272706f6f6c20616c72656164792065786973747360681b6044820152606401610a29565b609f54602011611e785760405162461bcd60e51b81526020600482015260136024820152721c1bdbdb1cc81b1a5b5a5d081c995858da1959606a1b6044820152606401610a29565b6001600160a01b038116600081815260a060209081526040808320805460ff19166001908117909155609f805491820181559093527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2890920180546001600160a01b0319168417905590519182527f73cca62ab1b520c9715bf4e6c71e3e518c754e7148f65102f43289a7df0efea69101610a63565b6065546001600160a01b03163314611f385760405162461bcd60e51b8152600401610a2990613007565b60a6805460ff8082161560ff1990921682179092556040519116151581527f558e3ca434dbb046a1200c25235032a55789c63515e8c78f60495063b75e141f9060200160405180910390a1565b6000610aa060016121a1565b6065546001600160a01b03163314611fbb5760405162461bcd60e51b8152600401610a2990613007565b60a58190556040518181527fc65034639393df19db82d446a340e906a7fb768ad7c3c3b945879ed70f1ae42790602001610a63565b6065546001600160a01b0316331461201a5760405162461bcd60e51b8152600401610a2990613007565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890602001610a63565b6065546001600160a01b031633146120925760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b0381166120f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a29565b612100816126f8565b50565b60008061210f60355490565b9050600061211b611cef565b9050600064e8d4a51000609d54846121339190612f79565b61213d9190612f98565b905080821115612159576121518183612f62565b935050505090565b6000935050505090565b60008061216f60355490565b9050600061217b611cef565b905060008261218f64e8d4a5100084612f79565b6121999190612f98565b949350505050565b6000806121ac610f48565b90506000808460018111156121c3576121c361318d565b0361224b57609a54609e54604051633ddac95360e01b81526001600160a01b03918216600482015264e8d4a510006024820152911690633ddac953906044015b602060405180830381865afa158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190612fba565b9050612313565b600184600181111561225f5761225f61318d565b036122a357609b54609e54604051633ddac95360e01b81526001600160a01b03918216600482015264e8d4a510006024820152911690633ddac95390604401612203565b6040805162461bcd60e51b81526020600482015260248101919091527f494e56414c49442050524943452043484f4943452e204e6565647320746f206260448201527f6520656974686572203020284244535441424c4529206f7220312028424458296064820152608401610a29565b8061218f64e8d4a5100084612f79565b6001600160a01b0383166123855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a29565b6001600160a01b0382166123e65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a29565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461129957818110156124c65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a29565b6112998484848403612323565b6001600160a01b0383166125375760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a29565b6001600160a01b0382166125995760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a29565b6001600160a01b038316600090815260336020526040902054818110156126115760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a29565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290612648908490613080565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161269491815260200190565b60405180910390a3611299565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526126f39084906129d7565b505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166127aa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a29565b6001600160a01b0382166000908152603360205260409020548181101561281e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a29565b6001600160a01b038316600090815260336020526040812083830390556035805484929061284d908490612f62565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0382166128ee5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a29565b80603560008282546129009190613080565b90915550506001600160a01b0382166000908152603360205260408120805483929061292d908490613080565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff1661299e5760405162461bcd60e51b8152600401610a29906131a3565b610b018282612aa9565b600054610100900460ff166129cf5760405162461bcd60e51b8152600401610a29906131a3565b61129e612af7565b6000612a2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b279092919063ffffffff16565b8051909150156126f35780806020019051810190612a4a91906130dd565b6126f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a29565b600054610100900460ff16612ad05760405162461bcd60e51b8152600401610a29906131a3565b8151612ae3906036906020850190612c3b565b5080516126f3906037906020840190612c3b565b600054610100900460ff16612b1e5760405162461bcd60e51b8152600401610a29906131a3565b61129e336126f8565b60606121998484600085856001600160a01b0385163b612b895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a29565b600080866001600160a01b03168587604051612ba591906131ee565b60006040518083038185875af1925050503d8060008114612be2576040519150601f19603f3d011682016040523d82523d6000602084013e612be7565b606091505b5091509150612bf7828286612c02565b979650505050505050565b60608315612c11575081610a8d565b825115612c215782518084602001fd5b8160405162461bcd60e51b8152600401610a299190612d00565b828054612c4790612fd3565b90600052602060002090601f016020900481019282612c695760008555612caf565b82601f10612c8257805160ff1916838001178555612caf565b82800160010185558215612caf579182015b82811115612caf578251825591602001919060010190612c94565b50612cbb929150612cbf565b5090565b5b80821115612cbb5760008155600101612cc0565b60005b83811015612cef578181015183820152602001612cd7565b838111156112995750506000910152565b6020815260008251806020840152612d1f816040850160208701612cd4565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114612d4a57600080fd5b919050565b60008060408385031215612d6257600080fd5b612d6b83612d33565b946020939093013593505050565b600060208284031215612d8b57600080fd5b610a8d82612d33565b600060208284031215612da657600080fd5b5035919050565b600080600060608486031215612dc257600080fd5b612dcb84612d33565b9250612dd960208501612d33565b9150604084013590509250925092565b60008060408385031215612dfc57600080fd5b612e0583612d33565b9150612e1360208401612d33565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612e4357600080fd5b813567ffffffffffffffff80821115612e5e57612e5e612e1c565b604051601f8301601f19908116603f01168101908282118183101715612e8657612e86612e1c565b81604052838152866020858801011115612e9f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215612ed757600080fd5b853567ffffffffffffffff80821115612eef57600080fd5b612efb89838a01612e32565b96506020880135915080821115612f1157600080fd5b50612f1e88828901612e32565b945050612f2d60408701612d33565b9250612f3b60608701612d33565b949793965091946080013592915050565b634e487b7160e01b600052601160045260246000fd5b600082821015612f7457612f74612f4c565b500390565b6000816000190483118215151615612f9357612f93612f4c565b500290565b600082612fb557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612fcc57600080fd5b5051919050565b600181811c90821680612fe757607f821691505b602082108103611da157634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4f6e6c7920626420706f6f6c732063616e2063616c6c20746869732066756e636040820152633a34b7b760e11b606082015260800190565b6000821982111561309357613093612f4c565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000600182016130d6576130d6612f4c565b5060010190565b6000602082840312156130ef57600080fd5b81518015158114610a8d57600080fd5b60208082526028908201527f4f7261636c652063616e6e6f742062652073657420746f20746865207a65726f604082015267206164647265737360c01b606082015260800190565b60208082526026908201527f574554482063616e6e6f742062652073657420746f20746865207a65726f206160408201526564647265737360d01b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613200818460208701612cd4565b919091019291505056fea264697066735822122000413bff7521b9d2a43da6a4acd5a67743fb48b80a43af1e3ec6980bad91fd4764736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103a45760003560e01c806387a140c3116101e9578063c03f7be31161010f578063ed7e119f116100ad578063f2fde38b1161007c578063f2fde38b14610787578063f61adab21461079a578063fa629219146107a2578063fadb1b02146107aa57600080fd5b8063ed7e119f14610739578063ed99250c14610759578063eef772f214610761578063f0f442601461077457600080fd5b8063d2d97b06116100e9578063d2d97b06146106dd578063d914cd4b146106e5578063da6ed553146106f8578063dd62ed3e1461070057600080fd5b8063c03f7be3146106b8578063c9aba0aa146106c1578063ce202603146106d457600080fd5b8063a9059cbb11610187578063b2d2362211610156578063b2d2362214610677578063b4f56b261461068a578063b7949f871461069d578063bcdede5b146106b057600080fd5b8063a9059cbb14610635578063abfd857514610648578063b02f6aec1461065b578063b20b02aa1461066e57600080fd5b80639e92f14f116101c35780639e92f14f146105e95780639f5f79e0146105fc578063a457c2d71461060f578063a8a778ae1461062257600080fd5b806387a140c3146105c35780638da5cb5b146105d057806395d89b41146105e157600080fd5b80634013124a116102ce578063688c0f471161026c57806370a082311161023b57806370a0823114610576578063715018a61461059f57806379cc6790146105a7578063870cfeab146105ba57600080fd5b8063688c0f471461054057806369d16799146105485780636c7ff97b1461055b57806370981eb21461056357600080fd5b80635b078c76116102a85780635b078c761461050a5780635e757f6a1461051257806361d027b31461051a578063686d14e61461052d57600080fd5b80634013124a146104e6578063497b5961146104ee5780634aa0eb9a1461050157600080fd5b8063246126bd11610346578063313ce56711610315578063313ce5671461049e57806331be54d3146104ad57806339509351146104c05780633b7d0946146104d357600080fd5b8063246126bd1461043f57806325f10c9b1461046a57806326191e4b146104725780632fe16b961461047b57600080fd5b80631096f103116103825780631096f103146103fc57806318160ddd1461040f5780631c0984581461041757806323b872dd1461042c57600080fd5b806302c855f8146103a957806306fdde03146103c4578063095ea7b3146103d9575b600080fd5b6103b16107b3565b6040519081526020015b60405180910390f35b6103cc610924565b6040516103bb9190612d00565b6103ec6103e7366004612d4f565b6109b6565b60405190151581526020016103bb565b6103ec61040a366004612d79565b6109ce565b6035546103b1565b61042a610425366004612d94565b6109ff565b005b6103ec61043a366004612dad565b610a6e565b609e54610452906001600160a01b031681565b6040516001600160a01b0390911681526020016103bb565b6103b1610a94565b6103b160a15481565b6103ec610489366004612d79565b60a06020526000908152604090205460ff1681565b604051601281526020016103bb565b61042a6104bb366004612d4f565b610aa5565b6103ec6104ce366004612d4f565b610b05565b61042a6104e1366004612d79565b610b44565b61042a610d3b565b6104526104fc366004612d94565b610f1e565b6103b160975481565b6103b1610f48565b6103b1610fb6565b609954610452906001600160a01b031681565b61042a61053b366004612d79565b610fee565b609f546103b1565b61042a610556366004612d94565b61108c565b61042a6110d4565b61042a610571366004612d4f565b6112a0565b6103b1610584366004612d79565b6001600160a01b031660009081526033602052604090205490565b61042a6113e9565b61042a6105b5366004612d4f565b61141d565b6103b160a85481565b60a6546103ec9060ff1681565b6065546001600160a01b0316610452565b6103cc6114aa565b61042a6105f7366004612de9565b6114b9565b61042a61060a366004612d94565b61158d565b6103ec61061d366004612d4f565b6115ec565b61042a610630366004612d4f565b611689565b6103ec610643366004612d4f565b61170c565b61042a610656366004612d94565b61171a565b61042a610669366004612d94565b611779565b6103b160a45481565b61042a610685366004612de9565b61182f565b61042a610698366004612d4f565b611903565b61042a6106ab366004612d4f565b611990565b6103ec6119ba565b6103b160a25481565b61042a6106cf366004612ebf565b611aa5565b6103b160a35481565b6103b1611cef565b61042a6106f3366004612d79565b611da7565b61042a611f0e565b6103b161070e366004612de9565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6103b1610747366004612d79565b60a76020526000908152604090205481565b6103b1611f85565b61042a61076f366004612d94565b611f91565b61042a610782366004612d79565b611ff0565b61042a610795366004612d79565b612068565b6103b1612103565b6103b1612163565b6103b1609d5481565b6000806107be612163565b9050600081609d54116107d357609d546107d5565b815b9050600064e8d4a510006107e860355490565b6107f78464e8d4a51000612f62565b6108019190612f79565b61080b9190612f98565b9050806000036108235764e8d4a51000935050505090565b600061082f60016121a1565b90508060000361084457600094505050505090565b60008161085664e8d4a5100085612f79565b6108609190612f98565b6097546098546040516370a0823160e01b81523060048201529293506000926001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190612fba565b6108df9190612f62565b90506000826108f38364e8d4a51000612f79565b6108fd9190612f98565b905064e8d4a5100081116109115780610918565b64e8d4a510005b97505050505050505090565b60606036805461093390612fd3565b80601f016020809104026020016040519081016040528092919081815260200182805461095f90612fd3565b80156109ac5780601f10610981576101008083540402835291602001916109ac565b820191906000526020600020905b81548152906001019060200180831161098f57829003601f168201915b5050505050905090565b6000336109c4818585612323565b5060019392505050565b60a5546001600160a01b038216600090815260a760205260408120549091906109f79043612f62565b101592915050565b6065546001600160a01b03163314610a325760405162461bcd60e51b8152600401610a2990613007565b60405180910390fd5b60a18190556040518181527fa603e975ae74b9c52c4ab59b67b328222c699f765f89b808e8a2ae7c9ae2428e906020015b60405180910390a150565b600033610a7c858285612447565b610a878585856124d3565b60019150505b9392505050565b6000610aa060006121a1565b905090565b33600090815260a0602052604090205460ff161515600114610ad95760405162461bcd60e51b8152600401610a299061303c565b80609754610ae79190612f62565b609755609854610b01906001600160a01b031683836126a1565b5050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906109c49082908690610b3f908790613080565b612323565b6065546001600160a01b03163314610b6e5760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b038116600090815260a0602052604090205460ff161515600114610bdb5760405162461bcd60e51b815260206004820152601d60248201527f6164647265737320646f65736e277420657869737420616c72656164790000006044820152606401610a29565b6001600160a01b038116600090815260a060205260408120805460ff191690555b609f54811015610d0157816001600160a01b0316609f8281548110610c2357610c23613098565b6000918252602090912001546001600160a01b031603610cef57609f8054610c4d90600190612f62565b81548110610c5d57610c5d613098565b600091825260209091200154609f80546001600160a01b039092169183908110610c8957610c89613098565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550609f805480610cc857610cc86130ae565b600082815260209020810160001990810180546001600160a01b0319169055019055610d01565b80610cf9816130c4565b915050610bfc565b506040516001600160a01b03821681527f4106dfdaa577573db51c0ca93f766dbedfa0758faa2e7f5bcdb7c142be803c3f90602001610a63565b60a65460ff161515600103610d4c57565b6000610d56610fb6565b1115610d5e57565b609a60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906130dd565b15610e4357609a60009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050505b6000610e4d610a94565b905060a45460a354610e5f9190613080565b811115610e935760a154609d5411610e7b576000609d55610ee7565b60a154609d54610e8b9190612f62565b609d55610ee7565b60a45460a354610ea39190612f62565b811015610ee75764e8d4a5100060a154609d54610ec09190613080565b10610ed35764e8d4a51000609d55610ee7565b60a154609d54610ee39190613080565b609d555b4260a855609d546040519081527fb1200af9b3ac4dec88c9d01e1fb7cc7fa1f0fe55bf4afac1f30cc4fc2b2d1dd290602001610a63565b609f8181548110610f2e57600080fd5b6000918252602090912001546001600160a01b0316905081565b609c546040805163f245a92f60e01b815290516000926001600160a01b03169163f245a92f9160048083019260209291908290030181865afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190612fba565b60008060a85442610fc79190612f62565b905060a2548111610fe5578060a254610fe09190612f62565b610fe8565b60005b91505090565b6065546001600160a01b031633146110185760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b03811661103e5760405162461bcd60e51b8152600401610a29906130ff565b609c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f6643a1fbc87d792d8e737bc2f2d5c0f1c7477ab534d0254404a448decceb3d9790602001610a63565b33600090815260a0602052604090205460ff1615156001146110c05760405162461bcd60e51b8152600401610a299061303c565b806097546110ce9190613080565b60975550565b609b60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906130dd565b156111b957609b60009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b505050505b609a60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123091906130dd565b1561129e57609a60009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561128557600080fd5b505af1158015611299573d6000803e3d6000fd5b505050505b565b6065546001600160a01b03163314806112cd575033600090815260a0602052604090205460ff1615156001145b6113195760405162461bcd60e51b815260206004820152601f60248201527f596f7520617265206e6f7420746865206f776e6572206f72206120706f6f6c006044820152606401610a29565b6097546098546040516370a0823160e01b81523060048201528392916001600160a01b0316906370a0823190602401602060405180830381865afa158015611365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113899190612fba565b6113939190612f62565b10156113d25760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced0408488b60931b6044820152606401610a29565b609854610b01906001600160a01b031683836126a1565b6065546001600160a01b031633146114135760405162461bcd60e51b8152600401610a2990613007565b61129e60006126f8565b6000611429833361070e565b9050808211156114875760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610a29565b60006114938383612f62565b90506114a0843383612323565b611299848461274a565b60606037805461093390612fd3565b6065546001600160a01b031633146114e35760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b0382166115095760405162461bcd60e51b8152600401610a29906130ff565b6001600160a01b03811661152f5760405162461bcd60e51b8152600401610a2990613147565b609b80546001600160a01b03199081166001600160a01b03858116918217909355609e80549092169284169283179091556040517f6b1a39edee703597b0d35ebd1e84785c1afac7793c4f61658d9851c875bd55e990600090a35050565b6065546001600160a01b031633146115b75760405162461bcd60e51b8152600401610a2990613007565b60a48190556040518181527fe9febe6aec89ff2870eeab6d13333c59cbed275b1d9a95f527c853d99ddb7cf490602001610a63565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156116715760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a29565b61167e8286868403612323565b506001949350505050565b33600090815260a0602052604090205460ff1615156001146116bd5760405162461bcd60e51b8152600401610a299061303c565b6116c7828261141d565b60405181815233906001600160a01b038416907f12d4d764706ce89037b449ff0dea7e084ef851d40ff63edaa38db6f33a581c7f906020015b60405180910390a35050565b6000336109c48185856124d3565b6065546001600160a01b031633146117445760405162461bcd60e51b8152600401610a2990613007565b60a38190556040518181527f898a2c9df7982133daaa8cfd78b8c49c520cba03205eec6480552c19059f6e3a90602001610a63565b6065546001600160a01b031633146117a35760405162461bcd60e51b8152600401610a2990613007565b64e8d4a510008111156117eb5760405162461bcd60e51b815260206004820152601060248201526f21a91036bab9ba103132901e181d989f60811b6044820152606401610a29565b609d81905560a6805460ff191660011790556040517ff3cd0dd9cc1a87f0d8733b9942a8864d40cb15c961b612792723a0a7858dd53d90610a639083815260200190565b6065546001600160a01b031633146118595760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b03821661187f5760405162461bcd60e51b8152600401610a29906130ff565b6001600160a01b0381166118a55760405162461bcd60e51b8152600401610a2990613147565b609a80546001600160a01b03199081166001600160a01b03858116918217909355609e80549092169284169283179091556040517f4b3d6a3884d9b2a42f47c477f7a3af756a41c0049f277577cf90541ab74909b190600090a35050565b33600090815260a0602052604090205460ff1615156001146119375760405162461bcd60e51b8152600401610a299061303c565b6119418282612898565b6001600160a01b038216600081815260a76020526040908190204390555133907f69f651718349cff8d0d00acbb3ebb2bf127edbdfc02746168d5e35fb7998b399906117009085815260200190565b6065546001600160a01b031633146113d25760405162461bcd60e51b8152600401610a2990613007565b609b54604080516309bf39ed60e01b815290516000926001600160a01b0316916309bf39ed9160048083019260209291908290030181865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2891906130dd565b80610aa05750609a60009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa091906130dd565b600054610100900460ff16611ac05760005460ff1615611ac4565b303b155b611b275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a29565b600054610100900460ff16158015611b49576000805461ffff19166101011790555b6000865111611b915760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606401610a29565b6000855111611bdb5760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b6044820152606401610a29565b6001600160a01b038316611c315760405162461bcd60e51b815260206004820152601760248201527f42445820616464726573732063616e6e6f7420626520300000000000000000006044820152606401610a29565b611c3b8686612977565b611c436129a8565b609980546001600160a01b038087166001600160a01b0319928316179092556098805492861692909116919091179055612710611c8664e8d4a510006019612f79565b611c909190612f98565b60a15564e8d4a51000609d81905560a381905561271090611cb2906032612f79565b611cbc9190612f98565b60a455610e1060a2558115611cd557611cd58483612898565b8015611ce7576000805461ff00191690555b505050505050565b600080805b609f54811015611da157609f8181548110611d1157611d11613098565b6000918252602091829020015460408051639ccabfb560e01b815290516001600160a01b0390921692639ccabfb5926004808401938290030181865afa158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d839190612fba565b611d8d9083613080565b915080611d99816130c4565b915050611cf4565b50919050565b6065546001600160a01b03163314611dd15760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b038116600090815260a0602052604090205460ff1615611e305760405162461bcd60e51b8152602060048201526013602482015272706f6f6c20616c72656164792065786973747360681b6044820152606401610a29565b609f54602011611e785760405162461bcd60e51b81526020600482015260136024820152721c1bdbdb1cc81b1a5b5a5d081c995858da1959606a1b6044820152606401610a29565b6001600160a01b038116600081815260a060209081526040808320805460ff19166001908117909155609f805491820181559093527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2890920180546001600160a01b0319168417905590519182527f73cca62ab1b520c9715bf4e6c71e3e518c754e7148f65102f43289a7df0efea69101610a63565b6065546001600160a01b03163314611f385760405162461bcd60e51b8152600401610a2990613007565b60a6805460ff8082161560ff1990921682179092556040519116151581527f558e3ca434dbb046a1200c25235032a55789c63515e8c78f60495063b75e141f9060200160405180910390a1565b6000610aa060016121a1565b6065546001600160a01b03163314611fbb5760405162461bcd60e51b8152600401610a2990613007565b60a58190556040518181527fc65034639393df19db82d446a340e906a7fb768ad7c3c3b945879ed70f1ae42790602001610a63565b6065546001600160a01b0316331461201a5760405162461bcd60e51b8152600401610a2990613007565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890602001610a63565b6065546001600160a01b031633146120925760405162461bcd60e51b8152600401610a2990613007565b6001600160a01b0381166120f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a29565b612100816126f8565b50565b60008061210f60355490565b9050600061211b611cef565b9050600064e8d4a51000609d54846121339190612f79565b61213d9190612f98565b905080821115612159576121518183612f62565b935050505090565b6000935050505090565b60008061216f60355490565b9050600061217b611cef565b905060008261218f64e8d4a5100084612f79565b6121999190612f98565b949350505050565b6000806121ac610f48565b90506000808460018111156121c3576121c361318d565b0361224b57609a54609e54604051633ddac95360e01b81526001600160a01b03918216600482015264e8d4a510006024820152911690633ddac953906044015b602060405180830381865afa158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190612fba565b9050612313565b600184600181111561225f5761225f61318d565b036122a357609b54609e54604051633ddac95360e01b81526001600160a01b03918216600482015264e8d4a510006024820152911690633ddac95390604401612203565b6040805162461bcd60e51b81526020600482015260248101919091527f494e56414c49442050524943452043484f4943452e204e6565647320746f206260448201527f6520656974686572203020284244535441424c4529206f7220312028424458296064820152608401610a29565b8061218f64e8d4a5100084612f79565b6001600160a01b0383166123855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a29565b6001600160a01b0382166123e65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a29565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461129957818110156124c65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a29565b6112998484848403612323565b6001600160a01b0383166125375760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a29565b6001600160a01b0382166125995760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a29565b6001600160a01b038316600090815260336020526040902054818110156126115760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a29565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290612648908490613080565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161269491815260200190565b60405180910390a3611299565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526126f39084906129d7565b505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166127aa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a29565b6001600160a01b0382166000908152603360205260409020548181101561281e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a29565b6001600160a01b038316600090815260336020526040812083830390556035805484929061284d908490612f62565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0382166128ee5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a29565b80603560008282546129009190613080565b90915550506001600160a01b0382166000908152603360205260408120805483929061292d908490613080565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff1661299e5760405162461bcd60e51b8152600401610a29906131a3565b610b018282612aa9565b600054610100900460ff166129cf5760405162461bcd60e51b8152600401610a29906131a3565b61129e612af7565b6000612a2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b279092919063ffffffff16565b8051909150156126f35780806020019051810190612a4a91906130dd565b6126f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a29565b600054610100900460ff16612ad05760405162461bcd60e51b8152600401610a29906131a3565b8151612ae3906036906020850190612c3b565b5080516126f3906037906020840190612c3b565b600054610100900460ff16612b1e5760405162461bcd60e51b8152600401610a29906131a3565b61129e336126f8565b60606121998484600085856001600160a01b0385163b612b895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a29565b600080866001600160a01b03168587604051612ba591906131ee565b60006040518083038185875af1925050503d8060008114612be2576040519150601f19603f3d011682016040523d82523d6000602084013e612be7565b606091505b5091509150612bf7828286612c02565b979650505050505050565b60608315612c11575081610a8d565b825115612c215782518084602001fd5b8160405162461bcd60e51b8152600401610a299190612d00565b828054612c4790612fd3565b90600052602060002090601f016020900481019282612c695760008555612caf565b82601f10612c8257805160ff1916838001178555612caf565b82800160010185558215612caf579182015b82811115612caf578251825591602001919060010190612c94565b50612cbb929150612cbf565b5090565b5b80821115612cbb5760008155600101612cc0565b60005b83811015612cef578181015183820152602001612cd7565b838111156112995750506000910152565b6020815260008251806020840152612d1f816040850160208701612cd4565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114612d4a57600080fd5b919050565b60008060408385031215612d6257600080fd5b612d6b83612d33565b946020939093013593505050565b600060208284031215612d8b57600080fd5b610a8d82612d33565b600060208284031215612da657600080fd5b5035919050565b600080600060608486031215612dc257600080fd5b612dcb84612d33565b9250612dd960208501612d33565b9150604084013590509250925092565b60008060408385031215612dfc57600080fd5b612e0583612d33565b9150612e1360208401612d33565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612e4357600080fd5b813567ffffffffffffffff80821115612e5e57612e5e612e1c565b604051601f8301601f19908116603f01168101908282118183101715612e8657612e86612e1c565b81604052838152866020858801011115612e9f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215612ed757600080fd5b853567ffffffffffffffff80821115612eef57600080fd5b612efb89838a01612e32565b96506020880135915080821115612f1157600080fd5b50612f1e88828901612e32565b945050612f2d60408701612d33565b9250612f3b60608701612d33565b949793965091946080013592915050565b634e487b7160e01b600052601160045260246000fd5b600082821015612f7457612f74612f4c565b500390565b6000816000190483118215151615612f9357612f93612f4c565b500290565b600082612fb557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612fcc57600080fd5b5051919050565b600181811c90821680612fe757607f821691505b602082108103611da157634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4f6e6c7920626420706f6f6c732063616e2063616c6c20746869732066756e636040820152633a34b7b760e11b606082015260800190565b6000821982111561309357613093612f4c565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000600182016130d6576130d6612f4c565b5060010190565b6000602082840312156130ef57600080fd5b81518015158114610a8d57600080fd5b60208082526028908201527f4f7261636c652063616e6e6f742062652073657420746f20746865207a65726f604082015267206164647265737360c01b606082015260800190565b60208082526026908201527f574554482063616e6e6f742062652073657420746f20746865207a65726f206160408201526564647265737360d01b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613200818460208701612cd4565b919091019291505056fea264697066735822122000413bff7521b9d2a43da6a4acd5a67743fb48b80a43af1e3ec6980bad91fd4764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1532,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 327,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 333,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 335,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 339,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 920,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3293,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "unclaimedPoolsBDX",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 3296,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "BDX",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20)2344"
      },
      {
        "astId": 3298,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "treasury",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 3301,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdstableWethOracle",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ICryptoPairOracle)7070"
      },
      {
        "astId": 3304,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdxWethOracle",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(ICryptoPairOracle)7070"
      },
      {
        "astId": 3307,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "weth_fiat_pricer",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IOracleBasedCryptoFiatFeed)7083"
      },
      {
        "astId": 3309,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "global_collateral_ratio_d12",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 3311,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "weth_address",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 3314,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdstable_pools_array",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 3318,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdstable_pools",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3320,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdStable_step_d12",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 3322,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "refresh_cooldown",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 3324,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "price_target_d12",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 3326,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "price_band_d12",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 3329,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "minimumMintRedeemDelayInBlocks",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 3331,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "collateral_ratio_paused",
        "offset": 0,
        "slot": "166",
        "type": "t_bool"
      },
      {
        "astId": 3335,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "lastMintByUserBlock",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3337,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "refreshCollateralRatio_last_call_time",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICryptoPairOracle)7070": {
        "encoding": "inplace",
        "label": "contract ICryptoPairOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2344": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleBasedCryptoFiatFeed)7083": {
        "encoding": "inplace",
        "label": "contract IOracleBasedCryptoFiatFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}