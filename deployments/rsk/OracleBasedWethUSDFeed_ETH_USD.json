{
  "address": "0x60654A05279F5974c02cb7f06030E36B0a9800e7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethUsdFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice_1e12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43c50462c8bbbd47f5852f2ae515598012222fb8b2046bfd700505ec42993071",
  "receipt": {
    "to": null,
    "from": "0x524348A6fD0836Ee4c78F08C62D1BE7594061a8c",
    "contractAddress": "0x60654A05279F5974c02cb7f06030E36B0a9800e7",
    "transactionIndex": 1,
    "gasUsed": "307784",
    "logsBloom": "0x
    "blockHash": "0x89beb47c50ffead0bd32f21097668d18da181d0913c766c1dbba6c1f88faae82",
    "transactionHash": "0x43c50462c8bbbd47f5852f2ae515598012222fb8b2046bfd700505ec42993071",
    "logs": [],
    "blockNumber": 3973145,
    "cumulativeGasUsed": "518836",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe1d09E605a9e18065A1B5890Ac68E8439402C38A"
  ],
  "solcInputHash": "a2b283f9ba339a090f7b294daff0e306",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethUsdFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice_1e12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that will be used ONLY by BDUS as we're using USD as out base fiat currency\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/OracleBasedWethUSDFeed.sol\":\"OracleBasedWethUSDFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/Oracle/IOracleBasedCryptoFiatFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IOracleBasedCryptoFiatFeed {\\n    function getPrice_1e12() external view returns (uint256);\\n\\n    function getDecimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7250598c04072cbeb40d66a23e8a5ce8458c8ff78337aa3ba75b5e9f3cf38848\",\"license\":\"MIT\"},\"contracts/Oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0256f22bacb3ce02d716bed60ca1333e93d79af1caadcab7c77f866523a28ece\",\"license\":\"MIT\"},\"contracts/Oracle/OracleBasedWethUSDFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"./IOracleBasedCryptoFiatFeed.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n@dev A contract that will be used ONLY by BDUS as we're using USD as out base fiat currency\\n*/\\ncontract OracleBasedWethUSDFeed is IOracleBasedCryptoFiatFeed {\\n    uint8 private constant DECIMALS = 12;\\n\\n    IPriceFeed internal wethUsdFeed;\\n    using SafeMath for uint256;\\n\\n    constructor(address _wethUsdFeedAddress) public {\\n        require(_wethUsdFeedAddress != address(0), \\\"WethUsdFeed address cannot be 0\\\");\\n\\n        wethUsdFeed = IPriceFeed(_wethUsdFeedAddress);\\n    }\\n\\n    function getPrice_1e12() public view override returns (uint256) {\\n        uint8 wethUsdDecimals = wethUsdFeed.decimals();\\n\\n        if (wethUsdDecimals > 12) {\\n            uint256 excessiveDecimals = wethUsdDecimals - DECIMALS;\\n            return wethUsdFeed.price().div(10**(excessiveDecimals));\\n        } else {\\n            uint256 missingDecimals = DECIMALS - wethUsdDecimals;\\n            return wethUsdFeed.price().mul(10**(missingDecimals));\\n        }\\n    }\\n\\n    function getDecimals() public view override returns (uint8) {\\n        return DECIMALS;\\n    }\\n}\\n\",\"keccak256\":\"0xb5c542239d8a44ad5039f1decbce8640a1392e33c4ee36b606004ccc8e03f1ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104013803806104018339818101604052602081101561003357600080fd5b50516001600160a01b038116610090576040805162461bcd60e51b815260206004820152601f60248201527f576574685573644665656420616464726573732063616e6e6f74206265203000604482015290519081900360640190fd5b600080546001600160a01b039092166001600160a01b0319909216919091179055610341806100c06000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063f0141d841461003b578063f245a92f14610059575b600080fd5b610043610073565b6040805160ff9092168252519081900360200190f35b610061610079565b60408051918252519081900360200190f35b600c5b90565b600080546040805163313ce56760e01b8152905183926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156100be57600080fd5b505afa1580156100d2573d6000803e3d6000fd5b505050506040513d60208110156100e857600080fd5b50519050600c60ff82161115610191576000600c820360ff16905061018881600a0a60008054906101000a90046001600160a01b03166001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561015657600080fd5b505afa15801561016a573d6000803e3d6000fd5b505050506040513d602081101561018057600080fd5b505190610221565b92505050610076565b600081600c0360ff16905061018881600a0a60008054906101000a90046001600160a01b03166001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d602081101561021957600080fd5b50519061028a565b6000808211610277576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161028057fe5b0490505b92915050565b60008261029957506000610284565b828202828482816102a657fe5b04146102e35760405162461bcd60e51b81526004018080602001828103825260218152602001806102eb6021913960400191505060405180910390fd5b939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f92f26933e2938213114a34ca787ff26423ea79ad8501cb2ea31907d55a8594964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063f0141d841461003b578063f245a92f14610059575b600080fd5b610043610073565b6040805160ff9092168252519081900360200190f35b610061610079565b60408051918252519081900360200190f35b600c5b90565b600080546040805163313ce56760e01b8152905183926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156100be57600080fd5b505afa1580156100d2573d6000803e3d6000fd5b505050506040513d60208110156100e857600080fd5b50519050600c60ff82161115610191576000600c820360ff16905061018881600a0a60008054906101000a90046001600160a01b03166001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561015657600080fd5b505afa15801561016a573d6000803e3d6000fd5b505050506040513d602081101561018057600080fd5b505190610221565b92505050610076565b600081600c0360ff16905061018881600a0a60008054906101000a90046001600160a01b03166001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d602081101561021957600080fd5b50519061028a565b6000808211610277576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161028057fe5b0490505b92915050565b60008261029957506000610284565b828202828482816102a657fe5b04146102e35760405162461bcd60e51b81526004018080602001828103825260218152602001806102eb6021913960400191505060405180910390fd5b939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f92f26933e2938213114a34ca787ff26423ea79ad8501cb2ea31907d55a8594964736f6c634300060c0033",
  "devdoc": {
    "details": "A contract that will be used ONLY by BDUS as we're using USD as out base fiat currency",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9556,
        "contract": "contracts/Oracle/OracleBasedWethUSDFeed.sol:OracleBasedWethUSDFeed",
        "label": "wethUsdFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPriceFeed)9429"
      }
    ],
    "types": {
      "t_contract(IPriceFeed)9429": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      }
    }
  }
}