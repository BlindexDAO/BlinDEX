{
  "language": "Solidity",
  "sources": {
    "contracts/BdStable/BDStable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"../Bdx/BDXShares.sol\";\nimport \"../Oracle/IOracleBasedCryptoFiatFeed.sol\";\nimport \"../Oracle/ICryptoPairOracle.sol\";\nimport \"./Pools/BdStablePool.sol\";\nimport \"./Pools/BdPoolLibrary.sol\";\n\ncontract BDStable is ERC20Upgradeable, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n    enum PriceChoice {\n        BDSTABLE,\n        BDX\n    }\n\n    uint8 private constant MAX_NUMBER_OF_POOLS = 32;\n    uint256 public unclaimedPoolsBDX;\n\n    IERC20 private BDX;\n    address public treasury;\n\n    ICryptoPairOracle private bdstableWethOracle;\n    ICryptoPairOracle private bdxWethOracle;\n\n    IOracleBasedCryptoFiatFeed private weth_fiat_pricer;\n\n    uint256 public global_collateral_ratio_d12; // 12 decimals of precision\n\n    address public weth_address;\n\n    // The addresses in this array are added by the oracle and these contracts are able to mint bdStable\n    address payable[] public bdstable_pools_array;\n\n    // Mapping is also used for faster verification\n    mapping(address => bool) public bdstable_pools;\n\n    uint256 public bdStable_step_d12; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\n    uint256 public price_target_d12; // The price of BDSTABLE at which the collateral ratio will respond to; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at 1 <fiat>\n    uint256 public price_band_d12; // The bound above and below the price target at which the refreshCollateralRatio() will not change the collateral ratio\n\n    uint256 private minimumMintRedeemDelayInBlocks = 1;\n\n    bool public collateral_ratio_paused;\n\n    mapping(address => uint256) public lastMintByUserBlock;\n\n    // There needs to be a time interval that this can be called. Otherwise it can be called multiple times per expansion.\n    uint256 public refreshCollateralRatio_last_call_time; // Last time the collateral ration was refreshed function was executed\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyPools() {\n        require(bdstable_pools[msg.sender] == true, \"Only bd pools can call this function\");\n        _;\n    }\n\n    modifier onlyOwnerOrPool() {\n        require(msg.sender == owner() || bdstable_pools[msg.sender] == true, \"You are not the owner or a pool\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _treasury,\n        address _bdx_address,\n        uint256 _initalBdStableToTreasury_d18\n    ) external initializer {\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\n        require(bytes(_symbol).length > 0, \"Symbol cannot be empty\");\n        require(_bdx_address != address(0), \"BDX address cannot be 0\");\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasury = _treasury;\n\n        BDX = IERC20(_bdx_address);\n\n        bdStable_step_d12 = (uint256(BdPoolLibrary.PRICE_PRECISION) * 25) / 10000; // 12 decimals of precision, equal to 0.25%\n        global_collateral_ratio_d12 = uint256(BdPoolLibrary.COLLATERAL_RATIO_MAX); // Bdstable system starts off fully collateralized (12 decimals of precision)\n        price_target_d12 = uint256(BdPoolLibrary.PRICE_PRECISION); // Collateral ratio will adjust according to the 1 <fiat> price target at genesis\n        price_band_d12 = (uint256(BdPoolLibrary.PRICE_PRECISION) * 50) / 10000; // Collateral ratio will not adjust if between 0.995<fiat> and 1.005<fiat> at genesis\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\n\n        if (_initalBdStableToTreasury_d18 > 0) {\n            _mint(_treasury, _initalBdStableToTreasury_d18); // so treasury can provide liqidity to swaps and we could get prices from the swaps\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function getBdStablesPoolsLength() external view returns (uint256) {\n        return bdstable_pools_array.length;\n    }\n\n    // collateral value in fiat corresponding to the stable\n    // Iterate through all bd pools and calculate all value of collateral in all pools globally\n    function globalCollateralValue() public view returns (uint256) {\n        uint256 total_collateral_value_d18 = 0;\n\n        // bdstable_pools_array.length is limited by addPool function\n        for (uint256 i = 0; i < bdstable_pools_array.length; i++) {\n            total_collateral_value_d18 = total_collateral_value_d18 + (BdStablePool(bdstable_pools_array[i]).collatFiatBalance());\n        }\n        return total_collateral_value_d18;\n    }\n\n    // Choice = 'BDSTABLE' or 'BDX' for now\n    function oracle_price(PriceChoice choice) internal view returns (uint256) {\n        uint256 weth_fiat_price_d12 = weth_fiat_price();\n        uint256 price_vs_weth;\n\n        if (choice == PriceChoice.BDSTABLE) {\n            price_vs_weth = uint256(bdstableWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDSTABLE if you put in BdPoolLibrary.PRICE_PRECISION WETH\n        } else if (choice == PriceChoice.BDX) {\n            price_vs_weth = uint256(bdxWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDX if you put in BdPoolLibrary.PRICE_PRECISION WETH\n        } else revert(\"INVALID PRICE CHOICE. Needs to be either 0 (BDSTABLE) or 1 (BDX)\");\n\n        return (weth_fiat_price_d12 * BdPoolLibrary.PRICE_PRECISION) / price_vs_weth;\n    }\n\n    function updateOraclesIfNeeded() external {\n        if (bdxWethOracle.shouldUpdateOracle()) {\n            bdxWethOracle.updateOracle();\n        }\n\n        if (bdstableWethOracle.shouldUpdateOracle()) {\n            bdstableWethOracle.updateOracle();\n        }\n    }\n\n    function shouldUpdateOracles() external view returns (bool) {\n        return bdxWethOracle.shouldUpdateOracle() || bdstableWethOracle.shouldUpdateOracle();\n    }\n\n    // Returns BDSTABLE / <fiat>\n    function bdstable_price_d12() public view returns (uint256) {\n        return oracle_price(PriceChoice.BDSTABLE);\n    }\n\n    // Returns BDX / <fiat>\n    function BDX_price_d12() external view returns (uint256) {\n        return oracle_price(PriceChoice.BDX);\n    }\n\n    function effective_global_collateral_ratio_d12() public view returns (uint256) {\n        uint256 bdStable_total_supply = totalSupply();\n        uint256 global_collat_value = globalCollateralValue();\n        uint256 efCR = (global_collat_value * BdPoolLibrary.PRICE_PRECISION) / bdStable_total_supply;\n        return efCR;\n    }\n\n    function weth_fiat_price() public view returns (uint256) {\n        return uint256(weth_fiat_pricer.getPrice_1e12());\n    }\n\n    function canLegallyRedeem(address who) external view returns (bool) {\n        return (block.number - lastMintByUserBlock[who]) >= minimumMintRedeemDelayInBlocks;\n    }\n\n    // Returns the value of excess collateral held in all BdStablePool related to this BdStable, compared to what is needed to maintain the global collateral ratio\n    function availableExcessCollatDV() external view returns (uint256) {\n        uint256 total_supply = totalSupply();\n        uint256 global_collat_value = globalCollateralValue();\n\n        // Calculates collateral needed to back each 1 BdStable with $1 of collateral at current collat ratio\n        uint256 required_collat_fiat_value_d18 = (total_supply * global_collateral_ratio_d12) / BdPoolLibrary.COLLATERAL_RATIO_MAX;\n\n        if (global_collat_value > required_collat_fiat_value_d18) {\n            return (global_collat_value - required_collat_fiat_value_d18);\n        } else {\n            return 0;\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function when_should_refresh_collateral_ratio_in_seconds() public view returns (uint256) {\n        uint256 secondsSinceLastRefresh = block.timestamp - refreshCollateralRatio_last_call_time;\n\n        return secondsSinceLastRefresh > refresh_cooldown ? 0 : (refresh_cooldown - secondsSinceLastRefresh);\n    }\n\n    function refreshCollateralRatio() external {\n        if (collateral_ratio_paused == true) {\n            return;\n        }\n\n        if (when_should_refresh_collateral_ratio_in_seconds() > 0) {\n            return;\n        }\n\n        if (bdstableWethOracle.shouldUpdateOracle()) {\n            bdstableWethOracle.updateOracle();\n        }\n\n        uint256 bdstable_price_cur = bdstable_price_d12();\n\n        // Step increments are 0.25% (upon genesis, changable)\n\n        if (bdstable_price_cur > (price_target_d12 + price_band_d12)) {\n            //decrease collateral ratio\n            if (global_collateral_ratio_d12 <= bdStable_step_d12) {\n                //if within a step of 0, go to 0\n                global_collateral_ratio_d12 = 0;\n            } else {\n                global_collateral_ratio_d12 = global_collateral_ratio_d12 - bdStable_step_d12;\n            }\n        } else if (bdstable_price_cur < (price_target_d12 - price_band_d12)) {\n            //increase collateral ratio\n            if ((global_collateral_ratio_d12 + bdStable_step_d12) >= BdPoolLibrary.COLLATERAL_RATIO_MAX) {\n                global_collateral_ratio_d12 = BdPoolLibrary.COLLATERAL_RATIO_MAX; // cap collateral ratio at 1.000000\n            } else {\n                global_collateral_ratio_d12 = global_collateral_ratio_d12 + bdStable_step_d12;\n            }\n        }\n\n        refreshCollateralRatio_last_call_time = block.timestamp; // Set the time of the last expansion\n\n        emit CollateralRatioRefreshed(global_collateral_ratio_d12);\n    }\n\n    function get_effective_bdx_coverage_ratio() external view returns (uint256) {\n        uint256 effective_collateral_ratio_d12 = effective_global_collateral_ratio_d12();\n\n        uint256 cr = global_collateral_ratio_d12 > effective_collateral_ratio_d12 ? effective_collateral_ratio_d12 : global_collateral_ratio_d12;\n\n        uint256 expectedBdxValue_d18 = ((BdPoolLibrary.COLLATERAL_RATIO_MAX - cr) * totalSupply()) / BdPoolLibrary.COLLATERAL_RATIO_PRECISION;\n\n        if (expectedBdxValue_d18 == 0) {\n            return BdPoolLibrary.COLLATERAL_RATIO_MAX; // in we need no BDX, the coverage is 100%\n        }\n\n        uint256 bdxPrice_d12 = oracle_price(PriceChoice.BDX);\n\n        if (bdxPrice_d12 == 0) {\n            return 0; // in we need BDX but BDX price is 0, the coverage is 0%\n        }\n\n        uint256 expectedBdx_d18 = (expectedBdxValue_d18 * BdPoolLibrary.PRICE_PRECISION) / bdxPrice_d12;\n\n        uint256 bdxSupply_d18 = BDX.balanceOf(address(this)) - unclaimedPoolsBDX;\n        uint256 effectiveBdxCR_d12 = (BdPoolLibrary.PRICE_PRECISION * bdxSupply_d18) / expectedBdx_d18;\n\n        return effectiveBdxCR_d12 > BdPoolLibrary.COLLATERAL_RATIO_MAX ? BdPoolLibrary.COLLATERAL_RATIO_MAX : effectiveBdxCR_d12;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // Used by pools when user redeems\n    function pool_burn_from(address b_address, uint256 b_amount) external onlyPools {\n        burnFrom(b_address, b_amount);\n\n        emit BdStableBurned(b_address, msg.sender, b_amount);\n    }\n\n    // This function is what other bd pools will call to mint new bd stable\n    function pool_mint(address m_address, uint256 m_amount) external onlyPools {\n        super._mint(m_address, m_amount);\n\n        lastMintByUserBlock[m_address] = block.number;\n\n        emit BdStableMinted(msg.sender, m_address, m_amount);\n    }\n\n    // Adds collateral addresses supported, such as tether and busd, must be ERC20\n    function addPool(address pool_address) external onlyOwner {\n        require(bdstable_pools[pool_address] == false, \"pool already exists\");\n        require(bdstable_pools_array.length < MAX_NUMBER_OF_POOLS, \"pools limit reached\");\n\n        bdstable_pools[pool_address] = true;\n        bdstable_pools_array.push(payable(pool_address));\n\n        emit PoolAdded(pool_address);\n    }\n\n    // Remove a pool\n    function removePool(address pool_address) external onlyOwner {\n        require(bdstable_pools[pool_address] == true, \"address doesn't exist already\");\n\n        delete bdstable_pools[pool_address];\n\n        // bdstable_pools_array.length is limited by addPool function\n        for (uint256 i = 0; i < bdstable_pools_array.length; i++) {\n            if (bdstable_pools_array[i] == pool_address) {\n                bdstable_pools_array[i] = bdstable_pools_array[bdstable_pools_array.length - 1];\n                bdstable_pools_array.pop();\n                break;\n            }\n        }\n\n        emit PoolRemoved(pool_address);\n    }\n\n    function setBDStable_WETH_Oracle(address _bdstable_oracle_addr, address _weth_address) external onlyOwner {\n        require(_bdstable_oracle_addr != address(0), \"Oracle cannot be set to the zero address\");\n        require(_weth_address != address(0), \"WETH cannot be set to the zero address\");\n\n        bdstableWethOracle = ICryptoPairOracle(_bdstable_oracle_addr);\n        weth_address = _weth_address;\n\n        emit BDStableWETHOracleSet(_bdstable_oracle_addr, _weth_address);\n    }\n\n    function setBDX_WETH_Oracle(address _bdx_oracle_addr, address _weth_address) external onlyOwner {\n        require(_bdx_oracle_addr != address(0), \"Oracle cannot be set to the zero address\");\n        require(_weth_address != address(0), \"WETH cannot be set to the zero address\");\n\n        bdxWethOracle = ICryptoPairOracle(_bdx_oracle_addr);\n        weth_address = _weth_address;\n\n        emit BDXWETHOracleSet(_bdx_oracle_addr, _weth_address);\n    }\n\n    function setETH_fiat_Oracle(address _eth_fiat_consumer_address) external onlyOwner {\n        require(_eth_fiat_consumer_address != address(0), \"Oracle cannot be set to the zero address\");\n\n        weth_fiat_pricer = IOracleBasedCryptoFiatFeed(_eth_fiat_consumer_address);\n\n        emit EthFiatOracleSet(_eth_fiat_consumer_address);\n    }\n\n    function setBdStable_step_d12(uint256 _bdStable_step_d12) external onlyOwner {\n        bdStable_step_d12 = _bdStable_step_d12;\n\n        emit BdStableStepSet(_bdStable_step_d12);\n    }\n\n    function set_price_target_d12(uint256 _price_target_d12) external onlyOwner {\n        price_target_d12 = _price_target_d12;\n\n        emit PriceTargetSet(_price_target_d12);\n    }\n\n    function set_price_band_d12(uint256 _price_band_d12) external onlyOwner {\n        price_band_d12 = _price_band_d12;\n\n        emit PriceBandSet(_price_band_d12);\n    }\n\n    function toggleCollateralRatioPaused() external onlyOwner {\n        collateral_ratio_paused = !collateral_ratio_paused;\n\n        emit CollateralRatioPausedToggled(collateral_ratio_paused);\n    }\n\n    function lockCollateralRatioAt(uint256 wantedCR_d12) external onlyOwner {\n        require(wantedCR_d12 <= BdPoolLibrary.COLLATERAL_RATIO_MAX, \"CR must be <0;1>\");\n\n        global_collateral_ratio_d12 = wantedCR_d12;\n        collateral_ratio_paused = true;\n\n        emit CollateralRatioLocked(wantedCR_d12);\n    }\n\n    function setTreasury(address _treasury) external onlyOwner {\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    function setMinimumSwapsDelayInBlocks(uint256 _minimumMintRedeemDelayInBlocks) external onlyOwner {\n        minimumMintRedeemDelayInBlocks = _minimumMintRedeemDelayInBlocks;\n        emit MinimumMintRedeemDelayInBlocksSet(_minimumMintRedeemDelayInBlocks);\n    }\n\n    function pool_claim_bdx(uint256 amount) external onlyPools {\n        unclaimedPoolsBDX = unclaimedPoolsBDX + amount;\n    }\n\n    function pool_transfer_claimed_bdx(address to, uint256 amount) external onlyPools {\n        unclaimedPoolsBDX = unclaimedPoolsBDX - amount;\n        BDX.safeTransfer(to, amount);\n    }\n\n    function transfer_bdx(address to, uint256 BDX_amount) external onlyOwnerOrPool {\n        require((BDX.balanceOf(address(this)) - unclaimedPoolsBDX) >= BDX_amount, \"Not enough BDX\");\n\n        BDX.safeTransfer(to, BDX_amount);\n    }\n\n    function transfer_bdx_force(address to, uint256 BDX_amount) external onlyOwner {\n        BDX.safeTransfer(to, BDX_amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 permittedAllowance = allowance(account, _msgSender());\n        require(amount <= permittedAllowance, \"ERC20: burn amount exceeds allowance\");\n\n        uint256 decreasedAllowance = permittedAllowance - amount;\n        super._approve(account, _msgSender(), decreasedAllowance);\n        super._burn(account, amount);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event CollateralRatioRefreshed(uint256 global_collateral_ratio);\n    event BdStableBurned(address indexed from, address indexed to, uint256 amount);\n    event BdStableMinted(address indexed from, address indexed to, uint256 amount);\n    event PoolAdded(address pool_address);\n    event PoolRemoved(address pool_address);\n    event BDStableWETHOracleSet(address indexed bdstable_oracle_addr, address indexed weth_address);\n    event BDXWETHOracleSet(address indexed bdx_oracle_address, address indexed weth_address);\n    event EthFiatOracleSet(address eth_fiat_consumer_address);\n    event BdStableStepSet(uint256 bdStable_step_d12);\n    event PriceBandSet(uint256 _price_band_d12);\n    event PriceTargetSet(uint256 _price_target_d12);\n    event CollateralRatioPausedToggled(bool collateral_ratio_paused);\n    event CollateralRatioLocked(uint256 lockedCR_d12);\n    event MinimumMintRedeemDelayInBlocksSet(uint256 minimumMintRedeemDelayInBlocks);\n    event TreasuryChanged(address newTreasury);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/Bdx/BDXShares.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../BdStable/BDStable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract BDXShares is ERC20Upgradeable, OwnableUpgradeable {\n    /* ========== STATE VARIABLES ========== */\n    uint256 public constant MAX_TOTAL_SUPPLY = 21 * 1e6 * 1e18;\n\n    mapping(address => bool) public mappingBdstables;\n    address[] public bdstables;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(string memory _name, string memory _symbol) external initializer {\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\n        require(bytes(_symbol).length > 0, \"Symbol cannot be empty\");\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function getBdStablesLength() external view returns (uint256) {\n        return bdstables.length;\n    }\n\n    function addBdStableAddress(address bdstable_contract_address) external onlyOwner {\n        if (!mappingBdstables[bdstable_contract_address]) {\n            mappingBdstables[bdstable_contract_address] = true;\n            bdstables.push(bdstable_contract_address);\n            emit BdStableAddressAdded(bdstable_contract_address);\n        }\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        require((totalSupply() + amount) <= MAX_TOTAL_SUPPLY, \"BDX limit reached\");\n\n        _mint(to, amount);\n\n        emit BdxMinted(address(this), to, amount);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event BdxBurned(address indexed from, address indexed to, uint256 indexed amount);\n    event BdxMinted(address indexed from, address indexed to, uint256 indexed amount);\n    event BdStableAddressAdded(address indexed addr);\n}\n"
    },
    "contracts/Oracle/IOracleBasedCryptoFiatFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IOracleBasedCryptoFiatFeed {\n    function getPrice_1e12() external view returns (uint256);\n\n    function getDecimals() external view returns (uint8);\n}\n"
    },
    "contracts/Oracle/ICryptoPairOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICryptoPairOracle {\n    function consult(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\n\n    function updateOracle() external;\n\n    function shouldUpdateOracle() external view returns (bool);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/BdStable/Pools/BdStablePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../BdStable/BDStable.sol\";\nimport \"../../Oracle/ICryptoPairOracle.sol\";\nimport \"./BdPoolLibrary.sol\";\nimport \"../../Utils/IWETH.sol\";\n\ncontract BdStablePool is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 private BDX;\n    IWETH private NativeTokenWrapper;\n\n    IERC20 public collateral_token;\n    BDStable public BDSTABLE;\n    ICryptoPairOracle public collatWEthOracle;\n\n    bool public is_collateral_wrapping_native_token;\n\n    uint256 private missing_decimals; // Number of decimals needed to get to 18\n    address private weth_address;\n\n    mapping(address => uint256) public redeemBDXBalances;\n    mapping(address => uint256) public redeemCollateralBalances;\n    uint256 public unclaimedPoolCollateral;\n    mapping(address => uint256) public lastRedeemed;\n\n    // AccessControl state variables\n    bool public mintPaused;\n    bool public redeemPaused;\n    bool public recollateralizePaused;\n    bool public buyBackPaused;\n    bool public collateralPricePaused;\n    bool public recollateralizeOnlyForOwner;\n    bool public buybackOnlyForOwner;\n\n    uint256 public minting_fee; //d12\n    uint256 public redemption_fee; //d12\n    uint256 public buyback_fee; //d12\n    uint256 public recollat_fee; //d12\n\n    // Pool_ceiling is the total units of collateral that a pool contract can hold\n    uint256 public pool_ceiling; // d18\n\n    // Stores price of the collateral, if price is paused\n    uint256 public pausedPrice;\n\n    // Bonus rate on BDX minted during recollateralizeBdStable(); 12 decimals of precision, set to 0.75% on genesis\n    uint256 public bonus_rate; // d12\n\n    // Number of blocks to wait before being able to collectRedemption()\n    uint256 public redemption_delay;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier notRedeemPaused() {\n        require(redeemPaused == false, \"Redeeming is paused\");\n        _;\n    }\n\n    modifier notMintPaused() {\n        require(mintPaused == false, \"Minting is paused\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        address _bdstable_contract_address,\n        address _bdx_contract_address,\n        address _collateral_address,\n        uint256 _collateral_decimals,\n        bool _is_collateral_wrapping_native_token\n    ) external initializer {\n        require(_bdstable_contract_address != address(0), \"BdStable address cannot be 0\");\n        require(_bdx_contract_address != address(0), \"BDX address cannot be 0\");\n        require(_collateral_address != address(0), \"Collateral address cannot be 0\");\n\n        __Ownable_init();\n\n        BDSTABLE = BDStable(_bdstable_contract_address);\n        BDX = IERC20(_bdx_contract_address);\n        if (_is_collateral_wrapping_native_token) {\n            NativeTokenWrapper = IWETH(_collateral_address);\n        }\n        collateral_token = IERC20(_collateral_address);\n        missing_decimals = uint256(18) - _collateral_decimals;\n\n        is_collateral_wrapping_native_token = _is_collateral_wrapping_native_token;\n\n        pool_ceiling = 1e36; // d18\n        bonus_rate = 7500000000; // d12 0.75%\n        redemption_delay = 1;\n        minting_fee = 3000000000; // d12 0.3%\n        redemption_fee = 3000000000; // d12 0.3%\n\n        recollateralizeOnlyForOwner = false;\n        buybackOnlyForOwner = true;\n    }\n\n    /* ========== VIEWS ========== */\n\n    // Returns the price of the pool collateral in fiat\n    function getCollateralPrice_d12() public view returns (uint256) {\n        if (collateralPricePaused == true) {\n            return pausedPrice;\n        } else {\n            uint256 eth_fiat_price_d12 = BDSTABLE.weth_fiat_price();\n            uint256 collat_eth_price = collatWEthOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION);\n\n            return (eth_fiat_price_d12 * BdPoolLibrary.PRICE_PRECISION) / collat_eth_price;\n        }\n    }\n\n    // Returns fiat value of collateral held in this BdStable pool\n    function collatFiatBalance() external view returns (uint256) {\n        //Expressed in collateral token decimals\n        if (collateralPricePaused == true) {\n            return\n                ((collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral) * (10**missing_decimals) * pausedPrice) /\n                BdPoolLibrary.PRICE_PRECISION;\n        } else {\n            return\n                ((collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral) * (10**missing_decimals) * getCollateralPrice_d12()) /\n                BdPoolLibrary.PRICE_PRECISION;\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function updateOraclesIfNeeded() public {\n        BDSTABLE.updateOraclesIfNeeded();\n        if (collatWEthOracle.shouldUpdateOracle()) {\n            collatWEthOracle.updateOracle();\n        }\n    }\n\n    // Will fail if fully collateralized or fully algorithmic\n    // > 0% and < 100% collateral-backed\n    function mintFractionalBdStable(\n        uint256 collateral_amount_in_max,\n        uint256 bdx_in_max,\n        uint256 bdStable_out_min,\n        bool useNativeToken\n    ) external payable notMintPaused {\n        if (useNativeToken) {\n            require(is_collateral_wrapping_native_token, \"Pool doesn't support native token\");\n            require(msg.value == collateral_amount_in_max, \"msg.value and collateral_amount_in_max do not match\");\n        }\n\n        updateOraclesIfNeeded();\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n\n        if (global_collateral_ratio_d12 == 0) {\n            collateral_amount_in_max = 0;\n        } else if (global_collateral_ratio_d12 == BdPoolLibrary.COLLATERAL_RATIO_MAX) {\n            bdx_in_max = 0;\n        }\n\n        require(\n            (collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral + collateral_amount_in_max) <= pool_ceiling,\n            \"Pool ceiling reached, no more BdStable can be minted with this collateral\"\n        );\n\n        uint256 collateral_amount_in_max_d18 = collateral_amount_in_max * (10**missing_decimals);\n\n        uint256 mint_amount;\n        uint256 bdx_needed;\n        if (global_collateral_ratio_d12 == 0) {\n            mint_amount = BdPoolLibrary.calcMintAlgorithmicBD(bdx_price, bdx_in_max);\n            bdx_needed = bdx_in_max;\n        } else if (global_collateral_ratio_d12 == 1) {\n            mint_amount = BdPoolLibrary.calcMint1t1BD(getCollateralPrice_d12(), collateral_amount_in_max_d18);\n            bdx_needed = 0;\n        } else {\n            (mint_amount, bdx_needed) = BdPoolLibrary.calcMintFractionalBD(\n                bdx_price,\n                getCollateralPrice_d12(),\n                collateral_amount_in_max_d18,\n                global_collateral_ratio_d12\n            );\n        }\n\n        mint_amount = (mint_amount * (uint256(BdPoolLibrary.PRICE_PRECISION) - minting_fee)) / BdPoolLibrary.PRICE_PRECISION;\n\n        require(bdStable_out_min <= mint_amount, \"Slippage limit reached\");\n        require(bdx_needed <= bdx_in_max, \"Not enough BDX inputted\");\n\n        BDSTABLE.refreshCollateralRatio();\n\n        if (bdx_needed > 0) {\n            BDX.safeTransferFrom(msg.sender, address(BDSTABLE), bdx_needed);\n        }\n\n        if (collateral_amount_in_max > 0) {\n            if (useNativeToken) {\n                NativeTokenWrapper.deposit{value: collateral_amount_in_max}();\n            } else {\n                collateral_token.safeTransferFrom(msg.sender, address(this), collateral_amount_in_max);\n            }\n        }\n\n        BDSTABLE.pool_mint(msg.sender, mint_amount);\n    }\n\n    // Will fail if fully collateralized or algorithmic\n    // Redeem BDSTABLE for collateral and BDX. > 0% and < 100% collateral-backed\n    function redeemFractionalBdStable(\n        uint256 BdStable_amount,\n        uint256 BDX_out_min,\n        uint256 COLLATERAL_out_min\n    ) external notRedeemPaused {\n        updateOraclesIfNeeded();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n        uint256 effective_global_collateral_ratio_d12 = BDSTABLE.effective_global_collateral_ratio_d12();\n\n        uint256 cr_d12 = effective_global_collateral_ratio_d12 < global_collateral_ratio_d12\n            ? effective_global_collateral_ratio_d12\n            : global_collateral_ratio_d12;\n\n        uint256 BdStable_amount_post_fee = (BdStable_amount * (uint256(BdPoolLibrary.PRICE_PRECISION) - redemption_fee)) /\n            BdPoolLibrary.PRICE_PRECISION;\n\n        uint256 bdx_fiat_value_d18 = BdStable_amount_post_fee - ((BdStable_amount_post_fee * cr_d12) / BdPoolLibrary.PRICE_PRECISION);\n\n        uint256 bdx_amount = (bdx_fiat_value_d18 * BdPoolLibrary.PRICE_PRECISION) / BDSTABLE.BDX_price_d12();\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\n        bdx_amount = (bdx_amount * bdx_coverage_ratio) / BdPoolLibrary.COLLATERAL_RATIO_PRECISION;\n\n        // Need to adjust for decimals of collateral\n        uint256 BdStable_amount_precision = BdStable_amount_post_fee / (10**missing_decimals);\n        uint256 collateral_fiat_value = (BdStable_amount_precision * cr_d12) / BdPoolLibrary.PRICE_PRECISION;\n        uint256 collateral_needed = (collateral_fiat_value * BdPoolLibrary.PRICE_PRECISION) / getCollateralPrice_d12();\n\n        require(collateral_needed <= collateral_token.balanceOf(address(this)) - unclaimedPoolCollateral, \"Not enough collateral in pool\");\n        require(COLLATERAL_out_min <= collateral_needed, \"Slippage limit reached [collateral]\");\n        require(BDX_out_min <= bdx_amount, \"Slippage limit reached [BDX]\");\n        require(BDSTABLE.canLegallyRedeem(msg.sender), \"Cannot legally redeem\");\n\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender] + collateral_needed;\n\n        unclaimedPoolCollateral = unclaimedPoolCollateral + collateral_needed;\n\n        BDSTABLE.refreshCollateralRatio();\n\n        if (bdx_amount > 0) {\n            require(BDSTABLE.canLegallyRedeem(msg.sender), \"Cannot legally redeem\");\n\n            redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender] + bdx_amount;\n\n            BDSTABLE.pool_claim_bdx(bdx_amount);\n        }\n\n        lastRedeemed[msg.sender] = block.number;\n\n        // Move all external functions to the end\n        BDSTABLE.pool_burn_from(msg.sender, BdStable_amount);\n    }\n\n    // After a redemption happens, transfer the newly minted BDX and owed collateral from this pool\n    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\n    // to take out BdStable/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\n    function collectRedemption(bool useNativeToken) external {\n        require((lastRedeemed[msg.sender] + redemption_delay) <= block.number, \"Must wait for redemption_delay blocks before collecting redemption\");\n        bool sendBDX = false;\n        bool sendCollateral = false;\n        uint256 BDXAmount;\n        uint256 CollateralAmount;\n\n        // Use Checks-Effects-Interactions pattern\n        if (redeemBDXBalances[msg.sender] > 0) {\n            BDXAmount = redeemBDXBalances[msg.sender];\n            redeemBDXBalances[msg.sender] = 0;\n\n            sendBDX = true;\n        }\n\n        if (redeemCollateralBalances[msg.sender] > 0) {\n            CollateralAmount = redeemCollateralBalances[msg.sender];\n            redeemCollateralBalances[msg.sender] = 0;\n            unclaimedPoolCollateral = unclaimedPoolCollateral - CollateralAmount;\n\n            sendCollateral = true;\n        }\n\n        if (sendBDX == true) {\n            BDSTABLE.pool_transfer_claimed_bdx(msg.sender, BDXAmount);\n        }\n        if (sendCollateral == true) {\n            if (useNativeToken) {\n                NativeTokenWrapper.withdraw(CollateralAmount);\n                safeTransferETH(msg.sender, CollateralAmount);\n            } else {\n                collateral_token.safeTransfer(msg.sender, CollateralAmount);\n            }\n        }\n    }\n\n    // When the protocol is recollateralizing, we need to give a discount of BDX to hit the new CR target\n    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get BDX for adding collateral\n    // This function simply rewards anyone that sends collateral to a pool with the same amount of BDX + the bonus rate\n    // Anyone can call this function to recollateralize the protocol and take the extra BDX value from the bonus rate as an arb opportunity\n    function recollateralizeBdStable(\n        uint256 collateral_amount,\n        uint256 BDX_out_min,\n        bool useNativeToken\n    ) external payable {\n        require(recollateralizePaused == false, \"Recollateralize is paused\");\n\n        if (recollateralizeOnlyForOwner) {\n            require(msg.sender == owner(), \"Currently only owner can recollateralize\");\n        }\n\n        if (useNativeToken) {\n            require(is_collateral_wrapping_native_token, \"Pool doesn't support native token\");\n            require(msg.value == collateral_amount, \"msg.value and collateral_amount do not match\");\n        }\n\n        updateOraclesIfNeeded();\n        uint256 collateral_amount_d18 = collateral_amount * (10**missing_decimals);\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n        uint256 bdStable_total_supply = BDSTABLE.totalSupply();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n        uint256 global_collat_value = BDSTABLE.globalCollateralValue();\n\n        (uint256 collateral_units, uint256 amount_to_recollat) = BdPoolLibrary.calcRecollateralizeBdStableInner(\n            collateral_amount_d18,\n            getCollateralPrice_d12(),\n            global_collat_value,\n            bdStable_total_supply,\n            global_collateral_ratio_d12\n        );\n\n        uint256 collateral_units_precision = collateral_units / (10**missing_decimals);\n\n        uint256 bdx_paid_back = (amount_to_recollat * (uint256(BdPoolLibrary.PRICE_PRECISION) + bonus_rate - recollat_fee)) / bdx_price;\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\n        bdx_paid_back = (bdx_paid_back * bdx_coverage_ratio) / BdPoolLibrary.COLLATERAL_RATIO_PRECISION;\n\n        require(BDX_out_min <= bdx_paid_back, \"Slippage limit reached\");\n\n        BDSTABLE.refreshCollateralRatio();\n\n        if (useNativeToken) {\n            // no need to check collateral_units_precision, it's <= then collateral_amount\n\n            NativeTokenWrapper.deposit{value: collateral_units_precision}();\n\n            // refund remaining native token, if any left\n            if (msg.value > collateral_units_precision) {\n                safeTransferETH(msg.sender, msg.value - collateral_units_precision);\n            }\n        } else {\n            collateral_token.safeTransferFrom(msg.sender, address(this), collateral_units_precision);\n        }\n\n        if (bdx_paid_back > 0) {\n            BDSTABLE.transfer_bdx(msg.sender, bdx_paid_back);\n        }\n\n        emit Recollateralized(collateral_units_precision, bdx_paid_back);\n    }\n\n    // Function can be called by an BDX holder to have the protocol buy back BDX with excess collateral value from a desired collateral pool\n    // This can also happen if the collateral ratio > 1\n    function buyBackBDX(\n        uint256 BDX_amount,\n        uint256 COLLATERAL_out_min,\n        bool useNativeToken\n    ) external {\n        require(buyBackPaused == false, \"Buyback is paused\");\n\n        if (buybackOnlyForOwner) {\n            require(msg.sender == owner(), \"Currently only owner can buyback\");\n        }\n\n        updateOraclesIfNeeded();\n\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n\n        uint256 collateral_equivalent_d18 = (BdPoolLibrary.calcBuyBackBDX(\n            BDSTABLE.availableExcessCollatDV(),\n            bdx_price,\n            getCollateralPrice_d12(),\n            BDX_amount\n        ) * (uint256(BdPoolLibrary.PRICE_PRECISION) - buyback_fee)) / BdPoolLibrary.PRICE_PRECISION;\n\n        uint256 collateral_precision = collateral_equivalent_d18 / (10**missing_decimals);\n\n        require(COLLATERAL_out_min <= collateral_precision, \"Slippage limit reached\");\n\n        // Take bdx from sender\n        BDX.safeTransferFrom(msg.sender, address(BDSTABLE), BDX_amount);\n\n        if (useNativeToken) {\n            // Give the sender their desired collateral\n            NativeTokenWrapper.withdraw(collateral_precision);\n            safeTransferETH(msg.sender, collateral_precision);\n        } else {\n            // Give the sender their desired collateral\n            collateral_token.safeTransfer(msg.sender, collateral_precision);\n        }\n\n        emit BoughtBack(BDX_amount, collateral_precision);\n    }\n\n    receive() external payable {\n        require(msg.sender == address(NativeTokenWrapper), \"Only native token wrapper allowed to send native token\");\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setCollatWETHOracle(address _collateral_weth_oracle_address, address _weth_address) external onlyOwner {\n        require(_collateral_weth_oracle_address != address(0), \"Oracle cannot be set to the zero address\");\n        require(_weth_address != address(0), \"WETH cannot be set to the zero address\");\n\n        collatWEthOracle = ICryptoPairOracle(_collateral_weth_oracle_address);\n        weth_address = _weth_address;\n\n        emit CollateralWethOracleSet(_collateral_weth_oracle_address, _weth_address);\n    }\n\n    function toggleMintingPaused() external onlyOwner {\n        mintPaused = !mintPaused;\n\n        emit MintingPausedToggled(mintPaused);\n    }\n\n    function toggleRedeemingPaused() external onlyOwner {\n        redeemPaused = !redeemPaused;\n\n        emit RedeemingPausedToggled(redeemPaused);\n    }\n\n    function toggleRecollateralizePaused() external onlyOwner {\n        recollateralizePaused = !recollateralizePaused;\n\n        emit RecollateralizePausedToggled(recollateralizePaused);\n    }\n\n    function toggleBuybackPaused() external onlyOwner {\n        buyBackPaused = !buyBackPaused;\n\n        emit BuybackPausedToggled(buyBackPaused);\n    }\n\n    function toggleBuybackOnlyForOwner() external onlyOwner {\n        buybackOnlyForOwner = !buybackOnlyForOwner;\n\n        emit BuybackOnlyForOwnerToggled(buybackOnlyForOwner);\n    }\n\n    function toggleRecollateralizeOnlyForOwner() external onlyOwner {\n        recollateralizeOnlyForOwner = !recollateralizeOnlyForOwner;\n\n        emit RecollateralizeOnlyForOwnerToggled(recollateralizeOnlyForOwner);\n    }\n\n    function toggleCollateralPricePaused(uint256 _new_price) external onlyOwner {\n        // If pausing, set paused price; else if unpausing, clear pausedPrice\n        if (collateralPricePaused == false) {\n            pausedPrice = _new_price;\n        } else {\n            pausedPrice = 0;\n        }\n        collateralPricePaused = !collateralPricePaused;\n\n        emit CollateralPriceToggled(collateralPricePaused);\n    }\n\n    // Combined into one function due to 24KiB contract memory limit\n    function setPoolParameters(\n        uint256 new_ceiling,\n        uint256 new_bonus_rate,\n        uint256 new_redemption_delay,\n        uint256 new_mint_fee,\n        uint256 new_redeem_fee,\n        uint256 new_buyback_fee,\n        uint256 new_recollat_fee\n    ) external onlyOwner {\n        pool_ceiling = new_ceiling;\n        bonus_rate = new_bonus_rate;\n        redemption_delay = new_redemption_delay;\n        minting_fee = new_mint_fee;\n        redemption_fee = new_redeem_fee;\n        buyback_fee = new_buyback_fee;\n        recollat_fee = new_recollat_fee;\n\n        emit PoolParametersSet(new_ceiling, new_bonus_rate, new_redemption_delay, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"ETH transfer failed\");\n    }\n\n    /* ========== EVENTS ========== */\n\n    event PoolParametersSet(\n        uint256 new_ceiling,\n        uint256 new_bonus_rate,\n        uint256 new_redemption_delay,\n        uint256 new_mint_fee,\n        uint256 new_redeem_fee,\n        uint256 new_buyback_fee,\n        uint256 new_recollat_fee\n    );\n    event MintingPausedToggled(bool toggled);\n    event RedeemingPausedToggled(bool toggled);\n    event RecollateralizePausedToggled(bool toggled);\n    event BuybackPausedToggled(bool toggled);\n    event CollateralPriceToggled(bool toggled);\n    event CollateralWethOracleSet(address indexed collateral_weth_oracle_address, address indexed weth_address);\n    event RecollateralizeOnlyForOwnerToggled(bool recollateralizeOnlyForOwner);\n    event BuybackOnlyForOwnerToggled(bool buybackOnlyForOwner);\n    event Recollateralized(uint256 indexed collateral_amount_paid, uint256 indexed bdx_paid_back);\n    event BoughtBack(uint256 indexed bdx_amount_paid, uint256 indexed collateral_paid_back);\n}\n"
    },
    "contracts/BdStable/Pools/BdPoolLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nlibrary BdPoolLibrary {\n    // Constants for various precisions\n    uint256 public constant PRICE_PRECISION = 1e12;\n    uint256 public constant COLLATERAL_RATIO_PRECISION = 1e12;\n    uint256 public constant COLLATERAL_RATIO_MAX = 1e12;\n\n    // ================ Functions ================\n\n    function calcMint1t1BD(uint256 col_price, uint256 collateral_amount_d18) external pure returns (uint256) {\n        return (collateral_amount_d18 * col_price) / PRICE_PRECISION;\n    }\n\n    function calcMintAlgorithmicBD(uint256 bdx_price_fiat_d12, uint256 bdx_amount_d18) external pure returns (uint256) {\n        return (bdx_amount_d18 * bdx_price_fiat_d12) / PRICE_PRECISION;\n    }\n\n    // Must be internal because of the struct\n    function calcMintFractionalBD(\n        uint256 bdx_price_fiat_d12,\n        uint256 col_price_fiat_d12,\n        uint256 collateral_amount_d18,\n        uint256 col_ratio_d12\n    ) internal pure returns (uint256, uint256) {\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\n        // The contract must check the proper ratio was sent to mint BdStable. We do this by seeing the minimum mintable BdStable based on each amount\n\n        uint256 c_fiat_value_d18 = (collateral_amount_d18 * col_price_fiat_d12) / PRICE_PRECISION;\n\n        uint256 calculated_bdx_fiat_value_d18 = ((c_fiat_value_d18 * COLLATERAL_RATIO_PRECISION) / col_ratio_d12) - c_fiat_value_d18;\n\n        uint256 calculated_bdx_needed = (calculated_bdx_fiat_value_d18 * PRICE_PRECISION) / bdx_price_fiat_d12;\n\n        return (c_fiat_value_d18 + calculated_bdx_fiat_value_d18, calculated_bdx_needed);\n    }\n\n    function calcRecollateralizeBdStableInner(\n        uint256 collateral_amount_d18,\n        uint256 col_price,\n        uint256 global_collat_value,\n        uint256 bdStable_total_supply,\n        uint256 global_collateral_ratio\n    ) external pure returns (uint256, uint256) {\n        uint256 collat_value_attempted = (collateral_amount_d18 * col_price) / PRICE_PRECISION;\n        uint256 effective_collateral_ratio = (global_collat_value * PRICE_PRECISION) / bdStable_total_supply; //returns it in 1e12\n        uint256 recollat_possible = ((global_collateral_ratio - effective_collateral_ratio) * bdStable_total_supply) / COLLATERAL_RATIO_PRECISION;\n\n        uint256 amount_to_recollat;\n        if (collat_value_attempted <= recollat_possible) {\n            amount_to_recollat = collat_value_attempted;\n        } else {\n            amount_to_recollat = recollat_possible;\n        }\n\n        return ((amount_to_recollat * PRICE_PRECISION) / col_price, amount_to_recollat);\n    }\n\n    // Must be internal because of the struct\n    function calcBuyBackBDX(\n        uint256 excess_collateral_fiat_value_d18,\n        uint256 bdx_price_fiat_d12,\n        uint256 col_price_fiat_d12,\n        uint256 bdx_amount_d18\n    ) internal pure returns (uint256) {\n        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible BDX with the desired collateral\n        require(excess_collateral_fiat_value_d18 > 0, \"No excess collateral to buy back!\");\n\n        // Make sure not to take more than is available\n        uint256 bdx_fiat_value_d18 = (bdx_amount_d18 * bdx_price_fiat_d12) / PRICE_PRECISION;\n        require(bdx_fiat_value_d18 <= excess_collateral_fiat_value_d18, \"You are trying to buy back more than the excess!\");\n\n        // Get the equivalent amount of collateral based on the market value of BDX provided\n        uint256 collateral_equivalent_d18 = (bdx_fiat_value_d18 * PRICE_PRECISION) / col_price_fiat_d12;\n\n        return (collateral_equivalent_d18);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Utils/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/Utils/BlindexUpdater.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../Oracle/SovrynSwapPriceFeed.sol\";\nimport \"../Oracle/FiatToFiatPseudoOracleFeed.sol\";\nimport \"../Oracle/UniswapOracle/UniswapPairOracle.sol\";\nimport \"../BdStable/BDStable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract BlindexUpdater is Ownable, ReentrancyGuard {\n    address public updater;\n\n    constructor(address _updater) {\n        updater = _updater;\n    }\n\n    function update(\n        address[] memory _sovrynOracles,\n        uint256[] memory _sovrynPrices,\n        address[] memory _fiatOracles,\n        uint256[] memory _fiatPrices,\n        address[] memory _uniswapOracles,\n        address[] memory _BDStables\n    ) external onlyUpdater nonReentrant {\n        require(_sovrynOracles.length == _sovrynPrices.length, \"Each sovryn oracle address needs its corresponding price\");\n        require(_fiatOracles.length == _fiatPrices.length, \"Each fiat oracle address needs its corresponding price\");\n\n        for (uint256 i = 0; i < _sovrynOracles.length; i++) {\n            SovrynSwapPriceFeed priceFeed = SovrynSwapPriceFeed(_sovrynOracles[i]);\n            if (priceFeed.shouldUpdateOracleWithVerification()) {\n                priceFeed.updateOracleWithVerification(_sovrynPrices[i]);\n            }\n        }\n\n        for (uint256 i = 0; i < _fiatOracles.length; i++) {\n            FiatToFiatPseudoOracleFeed priceFeed = FiatToFiatPseudoOracleFeed(_fiatOracles[i]);\n            priceFeed.setPrice(_fiatPrices[i]);\n        }\n\n        for (uint256 i = 0; i < _uniswapOracles.length; i++) {\n            UniswapPairOracle priceFeed = UniswapPairOracle(_uniswapOracles[i]);\n            if (priceFeed.shouldUpdateOracle()) {\n                priceFeed.updateOracle();\n            }\n        }\n\n        for (uint256 i = 0; i < _BDStables.length; i++) {\n            BDStable priceFeed = BDStable(_BDStables[i]);\n            priceFeed.refreshCollateralRatio();\n        }\n    }\n\n    function setUpdater(address newUpdater) external onlyOwner {\n        require(newUpdater != address(0), \"Updater cannot be set to the zero address\");\n\n        address oldUpdater = updater;\n        updater = newUpdater;\n        emit UpdaterChanged(oldUpdater, updater);\n    }\n\n    modifier onlyUpdater() {\n        require(msg.sender == updater, \"You're not the updater\");\n        _;\n    }\n\n    event UpdaterChanged(address indexed oldUpdater, address indexed newUpdater);\n}\n"
    },
    "contracts/Oracle/SovrynSwapPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IPriceFeed.sol\";\nimport \"./ICryptoPairOracle.sol\";\nimport \"../Utils/Sovryn/ISovrynLiquidityPoolV1Converter.sol\";\nimport \"../Utils/Sovryn/ISovrynAnchor.sol\";\nimport \"../BSM/Investors/AMM/interfaces/ISovrynSwapNetwork.sol\";\n\n// We need feeds with fiats prices. For now on RSK chain there are no such feeds.\n// We populate our own feeds\ncontract SovrynSwapPriceFeed is IPriceFeed, ICryptoPairOracle, Ownable {\n    uint256 private constant PRECISION = 1e12;\n\n    ISovrynSwapNetwork public sovrynNetwork;\n    address public tokenSource;\n    address public tokenTarget;\n    uint256 public priceDisparityTolerance_d12;\n    address public updater;\n    uint256 public timeBeforeShouldUpdate;\n    uint256 public timeBeforeMustUpdate;\n    uint256 public updateTimestamp;\n    uint256 public oraclePrice;\n\n    constructor(\n        address _sovrynNetworkAddress,\n        address _tokenSource,\n        address _tokenTarget,\n        uint256 _priceDisparityTolerance_d12,\n        address _updater,\n        uint256 _timeBeforeShouldUpdate,\n        uint256 _timeBeforeMustUpdate\n    ) {\n        require(_sovrynNetworkAddress != address(0), \"SovrynNetwork address cannot be 0\");\n        require(_tokenSource != address(0), \"TokenSource address cannot be 0\");\n        require(_tokenTarget != address(0), \"TokenTarget address cannot be 0\");\n        require(_updater != address(0), \"Updater address cannot be 0\");\n        require(_timeBeforeMustUpdate >= 60, \"TimeBeforeMustUpdate must be at least 60 seconds\");\n        require(_timeBeforeShouldUpdate <= _timeBeforeMustUpdate, \"TimeBeforeShouldUpdate must be <= timeBeforeMustUpdate\");\n\n        sovrynNetwork = ISovrynSwapNetwork(_sovrynNetworkAddress);\n        tokenSource = _tokenSource;\n        tokenTarget = _tokenTarget;\n        priceDisparityTolerance_d12 = _priceDisparityTolerance_d12;\n        updater = _updater;\n        timeBeforeShouldUpdate = _timeBeforeShouldUpdate;\n        timeBeforeMustUpdate = _timeBeforeMustUpdate;\n    }\n\n    // IPriceFeed\n\n    function decimals() external pure override(IPriceFeed, ICryptoPairOracle) returns (uint8) {\n        return 12;\n    }\n\n    function price() external view override returns (uint256) {\n        require(oraclePrice != 0, \"Oracle not yet initiated\");\n        require(block.timestamp < (updateTimestamp + timeBeforeMustUpdate), \"Price is stale. Update oracle\");\n        return oraclePrice;\n    }\n\n    // ICryptoPairOracle\n\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256) {\n        require(tokenIn == tokenSource, \"This oracle only accepts consulting source token input\");\n        require(oraclePrice != 0, \"Oracle not yet initiated\");\n        require(block.timestamp < (updateTimestamp + timeBeforeMustUpdate), \"Price is stale. Update oracle\");\n        return (oraclePrice * amountIn) / PRECISION;\n    }\n\n    function updateOracle() external pure override {\n        revert(\"use updateOracleWithVerification() instead\");\n    }\n\n    function shouldUpdateOracle() external pure override returns (bool) {\n        return false;\n    }\n\n    // Own methods\n\n    function shouldUpdateOracleWithVerification() external view returns (bool) {\n        return block.timestamp > (updateTimestamp + timeBeforeShouldUpdate);\n    }\n\n    function updateOracleWithVerification(uint256 verificationPrice_d12) external onlyUpdater {\n        IERC20[] memory conversionPath = sovrynNetwork.conversionPath(IERC20(tokenSource), IERC20(tokenTarget));\n\n        require(conversionPath.length == 3, \"conversion path must be direct\");\n        ISovrynAnchor anchor = ISovrynAnchor(address(conversionPath[1]));\n        ISovrynLiquidityPoolV1Converter sovrynConverter = ISovrynLiquidityPoolV1Converter(anchor.owner());\n\n        (uint256 amountMinusFee, uint256 fee) = sovrynConverter.targetAmountAndFee(tokenSource, tokenTarget, PRECISION);\n        uint256 newPrice = amountMinusFee + fee;\n        uint256 priceDifference = verificationPrice_d12 > newPrice ? verificationPrice_d12 - newPrice : newPrice - verificationPrice_d12;\n        require((priceDifference * PRECISION) / newPrice < priceDisparityTolerance_d12, \"Price disparity too big\");\n        oraclePrice = newPrice;\n        updateTimestamp = block.timestamp;\n        emit PriceChanged(oraclePrice);\n    }\n\n    // Setters\n\n    function setTimeBeforeShouldUpdate(uint256 _timeBeforeShouldUpdate) public onlyOwner {\n        require(_timeBeforeShouldUpdate <= timeBeforeMustUpdate, \"TimeBeforeShouldUpdate must be <= timeBeforeMustUpdate\");\n        timeBeforeShouldUpdate = _timeBeforeShouldUpdate;\n    }\n\n    function setTimeBeforeMustUpdate(uint256 _timeBeforeMustUpdate) public onlyOwner {\n        require(_timeBeforeMustUpdate >= 60, \"TimeBeforeMustUpdate must be at least 60 seconds\");\n        timeBeforeMustUpdate = _timeBeforeMustUpdate;\n    }\n\n    function setPriceDisparityTolerance_d12(uint256 _priceDisparityTolerance_d12) external onlyOwner {\n        priceDisparityTolerance_d12 = _priceDisparityTolerance_d12;\n    }\n\n    function setUpdater(address newUpdater) external onlyOwner {\n        require(newUpdater != address(0), \"Updater cannot be set to the zero address\");\n\n        address oldUpdater = updater;\n        updater = newUpdater;\n        emit UpdaterChanged(oldUpdater, updater);\n    }\n\n    modifier onlyUpdater() {\n        require(msg.sender == updater, \"You're not updater\");\n        _;\n    }\n\n    event UpdaterChanged(address indexed oldUpdater, address indexed newUpdater);\n    event PriceChanged(uint256 indexed newPrice);\n}\n"
    },
    "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IPriceFeed.sol\";\n\n// We need feeds with fiats prices. For now on RSK chain there are no such feeds.\n// We populate our own feeds\ncontract FiatToFiatPseudoOracleFeed is IPriceFeed, Ownable {\n    uint8 private constant DECIMALS = 12;\n    uint256 private constant PRICE_PRECISION = 1e12;\n    uint256 private constant SECONDS_IN_DAY = 60 * 60 * 24;\n\n    uint256 private recentPrice;\n    uint256 public lastUpdateTimestamp;\n    uint256 public maxDayChange_d12 = 1e11; // 10%\n\n    address public updater;\n\n    constructor(address _updater, uint256 _recentPrice) {\n        require(_updater != address(0), \"Updater address cannot be 0\");\n\n        updater = _updater;\n        recentPrice = _recentPrice;\n        lastUpdateTimestamp = block.timestamp;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return DECIMALS;\n    }\n\n    function price() external view override returns (uint256) {\n        return recentPrice;\n    }\n\n    function setUpdater(address newUpdater) external onlyOwner {\n        require(newUpdater != address(0), \"Updater cannot be set to the zero address\");\n\n        address oldUpdater = updater;\n        updater = newUpdater;\n        emit UpdaterChanged(oldUpdater, updater);\n    }\n\n    function setPrice(uint256 _price) external onlyUpdaterOrOwner {\n        if (_msgSender() != owner()) {\n            uint256 diff = _price > recentPrice ? _price - recentPrice : recentPrice - _price;\n\n            uint256 dayChange_d12 = (PRICE_PRECISION * diff * SECONDS_IN_DAY) / recentPrice / (block.timestamp - lastUpdateTimestamp);\n\n            require(dayChange_d12 <= maxDayChange_d12, \"Price change too big\");\n        }\n\n        recentPrice = _price;\n        lastUpdateTimestamp = block.timestamp;\n        emit PriceChanged(_price);\n    }\n\n    function setMaxDayChange_d12(uint256 _maxDayChange_d12) external onlyOwner {\n        maxDayChange_d12 = _maxDayChange_d12;\n        emit MaxDayChangeChanged(_maxDayChange_d12);\n    }\n\n    modifier onlyUpdaterOrOwner() {\n        require(_msgSender() == updater || _msgSender() == owner(), \"You're not updater\");\n        _;\n    }\n\n    event UpdaterChanged(address indexed oldUpdater, address indexed newUpdater);\n    event PriceChanged(uint256 indexed newPrice);\n    event MaxDayChangeChanged(uint256 indexed newMaxDayChange_d12);\n}\n"
    },
    "contracts/Oracle/UniswapOracle/UniswapPairOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"../ICryptoPairOracle.sol\";\nimport \"./libs/FixedPoint.sol\";\nimport \"./libs/UQ112x112.sol\";\n\n// Fixed window oracle that recomputes the average price for the entire period once every period\n// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\ncontract UniswapPairOracle is Ownable, ICryptoPairOracle {\n    using FixedPoint for *;\n\n    uint8 private constant DECIMALS = 18;\n\n    uint256 public period = 3600; // 1 hour TWAP (time-weighted average price)\n    uint256 private constant MAXIMUM_PERIOD = 3600 * 48; // 48 hours\n    uint256 private constant MINIMUM_PERIOD = 60 * 5; // 5 minutes\n\n    uint256 public consult_leniency = 60 * 15; // Used for being able to consult past the period end\n    bool public allow_stale_consults = false; // If false, consult() will fail if the TWAP is stale\n\n    IUniswapV2Pair public immutable pair;\n    address public immutable token0;\n    address public immutable token1;\n\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    uint32 public blockTimestampLast;\n    FixedPoint.uq112x112 public price0Average;\n    FixedPoint.uq112x112 public price1Average;\n\n    constructor(\n        address factoryAddress,\n        address tokenA,\n        address tokenB\n    ) {\n        require(factoryAddress != address(0), \"Factory address cannot be 0\");\n        require(tokenA != address(0), \"TokenA address cannot be 0\");\n        require(tokenB != address(0), \"TokenB address cannot be 0\");\n\n        IUniswapV2Factory factory = IUniswapV2Factory(factoryAddress);\n\n        IUniswapV2Pair _pair = IUniswapV2Pair(factory.getPair(tokenA, tokenB));\n        pair = _pair;\n        token0 = _pair.token0();\n        token1 = _pair.token1();\n    }\n\n    function setPeriod(uint256 _period) external onlyOwner {\n        require(_period <= MAXIMUM_PERIOD, \"PairOracle::setPeriod: > MAXIMUM_PERIOD\");\n        require(_period >= MINIMUM_PERIOD, \"PairOracle::setPeriod: < MINIMUM_PERIOD\");\n        period = _period;\n\n        emit PeriodSet(_period);\n    }\n\n    function setConsultLeniency(uint256 _consult_leniency) external onlyOwner {\n        consult_leniency = _consult_leniency;\n\n        emit ConsultLeniencySet(_consult_leniency);\n    }\n\n    function setAllowStaleConsults(bool _allow_stale_consults) external onlyOwner {\n        allow_stale_consults = _allow_stale_consults;\n\n        emit AllowStaleConsultsSet(_allow_stale_consults);\n    }\n\n    function reset() external onlyOwner {\n        price0CumulativeLast = pair.price0CumulativeLast(); // Fetch the current accumulated price value (1 / 0)\n        price1CumulativeLast = pair.price1CumulativeLast(); // Fetch the current accumulated price value (0 / 1)\n        uint112 reserve0;\n        uint112 reserve1;\n\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"UniswapPairOracle: NO_RESERVES\"); // Ensure that there's liquidity in the pair\n    }\n\n    // Check if updateOracle() can be called instead of wasting gas calling it\n    function shouldUpdateOracle() public view override returns (bool) {\n        uint32 blockTimestamp = currentBlockTimestamp();\n\n        unchecked {\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n            return (timeElapsed >= period);\n        }\n    }\n\n    function updateOracle() external override {\n        require(blockTimestampLast > 0, \"Oracle not ready\");\n\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = currentCumulativePrices(address(pair));\n\n        unchecked {\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n\n            // Ensure that at least one full period has passed since the last update\n            require(timeElapsed >= period || owner() == _msgSender(), \"UniswapPairOracle: PERIOD_NOT_ELAPSED\");\n\n            // Overflow is desired, casting never truncates\n            // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n            price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n            price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n\n            price0CumulativeLast = price0Cumulative;\n            price1CumulativeLast = price1Cumulative;\n            blockTimestampLast = blockTimestamp;\n        }\n    }\n\n    // Note this will always return 0 before update has been called successfully for the first time.\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\n        uint32 blockTimestamp = currentBlockTimestamp();\n\n        unchecked {\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n\n            // Ensure that the price is not stale\n            require((timeElapsed < (period + consult_leniency)) || allow_stale_consults, \"UniswapPairOracle: PRICE_IS_STALE_NEED_TO_CALL_UPDATE\");\n\n            if (token == token0) {\n                amountOut = price0Average.mul(amountIn).decode144();\n            } else {\n                require(token == token1, \"UniswapPairOracle: INVALID_TOKEN\");\n                amountOut = price1Average.mul(amountIn).decode144();\n            }\n        }\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return DECIMALS;\n    }\n\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(address _pair)\n        internal\n        view\n        returns (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        )\n    {\n        blockTimestamp = currentBlockTimestamp();\n        IUniswapV2Pair uniswapPair = IUniswapV2Pair(_pair);\n        price0Cumulative = uniswapPair.price0CumulativeLast();\n        price1Cumulative = uniswapPair.price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 _blockTimestampLast) = uniswapPair.getReserves();\n        unchecked {\n            if (_blockTimestampLast != blockTimestamp) {\n                // subtraction overflow is desired\n                uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\n                // addition overflow is desired\n                // counterfactual\n                price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n                // counterfactual\n                price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n            }\n        }\n    }\n\n    event PeriodSet(uint256 period);\n    event ConsultLeniencySet(uint256 consult_latency);\n    event AllowStaleConsultsSet(bool allow_stale_consults);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/Oracle/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IPriceFeed {\n    function decimals() external view returns (uint8);\n\n    function price() external view returns (uint256);\n}\n"
    },
    "contracts/Utils/Sovryn/ISovrynLiquidityPoolV1Converter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ISovrynLiquidityPoolV1Converter {\n    function targetAmountAndFee(\n        address _sourceToken,\n        address _targetToken,\n        uint256 _amount\n    ) external view returns (uint256 amountMinusFee, uint256 fee);\n}\n"
    },
    "contracts/Utils/Sovryn/ISovrynAnchor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ISovrynAnchor {\n    // returns address of corresponding LiquidityPoolV2Converter\n    function owner() external view returns (address);\n}\n"
    },
    "contracts/BSM/Investors/AMM/interfaces/ISovrynSwapNetwork.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISovrynSwapNetwork {\n    /**\n    @return The swap outAmount\n    */\n    function convertByPath(\n        IERC20[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) external payable returns (uint256);\n\n    /**\n    @return The swap rate\n     */\n    function rateByPath(IERC20[] calldata _path, uint256 _amount) external view returns (uint256);\n\n    /**\n    token0 - anchor - token1 - anchor - token2\n    \n    The Converter Registry contract is the starting point for querying the converter network and for creating new AMMs for the Sovryn network.\n    In this jargon “anchors” are often related to the Smart Token contract, but also can be related to the reference asset which in our case is the WRBTC token.\n    https://wiki.sovryn.app/en/technical-documents/API/ApiDoc\n    @return The best path of ERC20 token address for the swap\n     */\n    function conversionPath(IERC20 from, IERC20 to) external view returns (IERC20[] memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/Oracle/UniswapOracle/libs/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./Babylonian.sol\";\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\n    uint256 private constant Q224 = Q112 << RESOLUTION;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n        uint256 z;\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n\n    // take the reciprocal of a UQ112x112\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\n        return uq112x112(uint224(Q224 / self._x));\n    }\n\n    // square root of a UQ112x112\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n    }\n}\n"
    },
    "contracts/Oracle/UniswapOracle/libs/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 private constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/Oracle/UniswapOracle/libs/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n// Originally taken from Uniswap V2 library like it's mentioned here: https://ethereum.stackexchange.com/a/87713\nlibrary Babylonian {\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/Governance/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract Timelock is Ownable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    enum TransactionStatus {\n        NonExistent, // 0 is what you get from a non-existent transaction (which you can get e.g. from a mapping)\n        Queued,\n        Approved\n    }\n\n    struct Transaction {\n        address recipient;\n        uint256 value;\n        bytes data;\n    }\n\n    struct PendingTransaction {\n        bytes32 txParamsHash;\n        TransactionStatus status;\n    }\n\n    uint256 public minimumExecutionDelay;\n    uint256 public maximumExecutionDelay;\n    uint256 public executionGracePeriod;\n\n    address public proposer;\n    EnumerableSet.AddressSet private executors;\n\n    EnumerableSet.Bytes32Set private pendingTransactionsParamsHashes;\n    mapping(bytes32 => TransactionStatus) public pendingTransactions;\n\n    event QueuedTransactionsBatch(bytes32 indexed txParamsHash, uint256 numberOfTransactions, uint256 eta);\n    event CancelledTransactionsBatch(bytes32 indexed txParamsHash);\n    event ApprovedTransactionsBatch(bytes32 indexed txParamsHash);\n    event ExecutedTransaction(bytes32 indexed txParamsHash, address indexed recipient, uint256 value, bytes data, uint256 eta);\n    event NewProposerSet(address indexed previousProposer, address indexed newProposer);\n    event NewExecutorAdded(address indexed executor);\n    event ExecutorRemoved(address indexed executor);\n    event NewExecutionDelaySet(uint256 indexed delay);\n    event NewMinimumExecutionDelaySet(uint256 indexed delay);\n    event NewMaximumExecutionDelaySet(uint256 indexed delay);\n    event NewExecutionGracePeriodSet(uint256 indexed gracePeriod);\n\n    constructor(\n        address _proposer,\n        address _executor,\n        uint256 _minimumExecutionDelay,\n        uint256 _maximumExecutionDelay,\n        uint256 _executionGracePeriod\n    ) {\n        require(_minimumExecutionDelay <= _maximumExecutionDelay, \"Timelock: The minimum delay cannot be larger than the maximum execution delay\");\n\n        setMinimumExecutionDelay(_minimumExecutionDelay);\n        setMaximumExecutionDelay(_maximumExecutionDelay);\n        setExecutionGracePeriod(_executionGracePeriod);\n        setProposer(_proposer);\n        addExecutor(_executor);\n    }\n\n    function setProposer(address _proposer) public onlyOwner {\n        require(_proposer != address(0), \"Timelock: Proposer address cannot be 0\");\n        require(_proposer != proposer, \"Timelock: New proposer must be different than the current proposer\");\n\n        address previousProposer = proposer;\n        proposer = _proposer;\n\n        emit NewProposerSet(previousProposer, proposer);\n    }\n\n    function addExecutor(address _executor) public onlyOwner {\n        require(!executors.contains(_executor), \"Timelock: executor already exists\");\n        require(_executor != address(0), \"Timelock: executor cannot be 0 address\");\n\n        executors.add(_executor);\n        emit NewExecutorAdded(_executor);\n    }\n\n    function removeExecutor(address _executor) public onlyOwner {\n        require(executors.contains(_executor), \"Timelock: executor doesn't exist\");\n\n        executors.remove(_executor);\n        emit ExecutorRemoved(_executor);\n    }\n\n    function executorsCount() external view returns (uint256) {\n        return executors.length();\n    }\n\n    function executorAt(uint256 i) external view returns (address) {\n        require(executors.length() > i, \"Timelock: executors index out of range\");\n        return executors.at(i);\n    }\n\n    function setMinimumExecutionDelay(uint256 _minimumExecutionDelay) public onlyOwner {\n        require(_minimumExecutionDelay >= 3600 * 24, \"Timelock: Minimum execution delay must be >= 1 day.\");\n\n        minimumExecutionDelay = _minimumExecutionDelay;\n\n        emit NewMinimumExecutionDelaySet(minimumExecutionDelay);\n    }\n\n    function setMaximumExecutionDelay(uint256 _maximumExecutionDelay) public onlyOwner {\n        require(_maximumExecutionDelay >= minimumExecutionDelay, \"Timelock: Maximum execution delay cannot be lesser than minimum execution delay.\");\n\n        maximumExecutionDelay = _maximumExecutionDelay;\n\n        emit NewMaximumExecutionDelaySet(_maximumExecutionDelay);\n    }\n\n    function setExecutionGracePeriod(uint256 _executionGracePeriod) public onlyOwner {\n        executionGracePeriod = _executionGracePeriod;\n\n        emit NewExecutionGracePeriodSet(_executionGracePeriod);\n    }\n\n    function queueTransactionsBatch(Transaction[] memory transactions, uint256 eta) external onlyProposer returns (bytes32) {\n        require(\n            eta >= block.timestamp + minimumExecutionDelay && eta <= block.timestamp + maximumExecutionDelay,\n            \"Timelock: Estimated execution time must satisfy delay.\"\n        );\n\n        require(transactions.length > 0, \"Timelock: You need at least 1 transaction to queue a batch\");\n\n        bytes32 txParamsHash = keccak256(abi.encode(transactions, eta));\n        pendingTransactions[txParamsHash] = TransactionStatus.Queued;\n        pendingTransactionsParamsHashes.add(txParamsHash);\n\n        emit QueuedTransactionsBatch(txParamsHash, transactions.length, eta);\n        return txParamsHash;\n    }\n\n    function cancelTransactionsBatch(bytes32 txParamsHash) external onlyOwner {\n        require(pendingTransactions[txParamsHash] != TransactionStatus.NonExistent, \"Timelock: transaction is not queued\");\n\n        delete pendingTransactions[txParamsHash];\n        pendingTransactionsParamsHashes.remove(txParamsHash);\n\n        emit CancelledTransactionsBatch(txParamsHash);\n    }\n\n    function approveTransactionsBatch(bytes32 txParamsHash) external onlyOwner {\n        _approveTransactionsBatchInternal(txParamsHash);\n    }\n\n    function executeTransactionsBatch(Transaction[] memory transactions, uint256 eta) external payable onlyExecutorOrOwner {\n        _executeTransactionsBatchInternal(transactions, eta);\n    }\n\n    function approveAndExecuteTransactionsBatch(Transaction[] memory transactions, uint256 eta) external payable onlyOwner {\n        bytes32 txParamsHash = keccak256(abi.encode(transactions, eta));\n\n        _approveTransactionsBatchInternal(txParamsHash);\n        _executeTransactionsBatchInternal(transactions, eta);\n    }\n\n    function approveAndExecuteTransactionsBatchRaw(bytes calldata txParamsData) external payable onlyOwner {\n        bytes32 txParamsHash = keccak256(txParamsData);\n        (Transaction[] memory transactions, uint256 eta) = abi.decode(txParamsData, (Transaction[], uint256));\n\n        _approveTransactionsBatchInternal(txParamsHash);\n        _executeTransactionsBatchInternal(transactions, eta);\n    }\n\n    function _approveTransactionsBatchInternal(bytes32 txParamsHash) private onlyOwner {\n        require(pendingTransactions[txParamsHash] == TransactionStatus.Queued, \"Timelock: transaction is not queued\");\n\n        pendingTransactions[txParamsHash] = TransactionStatus.Approved;\n\n        emit ApprovedTransactionsBatch(txParamsHash);\n    }\n\n    function _executeTransactionsBatchInternal(Transaction[] memory transactions, uint256 eta) private nonReentrant {\n        bytes32 txParamsHash = keccak256(abi.encode(transactions, eta));\n\n        require(pendingTransactions[txParamsHash] == TransactionStatus.Approved, \"Timelock: Transaction hasn't been approved.\");\n        require(block.timestamp >= eta, \"Timelock: Transaction hasn't surpassed the execution delay.\");\n        require(block.timestamp <= eta + executionGracePeriod, \"Timelock: Transaction is stale.\");\n\n        delete pendingTransactions[txParamsHash];\n        pendingTransactionsParamsHashes.remove(txParamsHash);\n\n        for (uint256 i = 0; i < transactions.length; i++) {\n            (\n                bool success, /* ignore the rest */\n\n            ) = transactions[i].recipient.call{value: transactions[i].value}(transactions[i].data);\n            require(success, \"Timelock: Transaction execution reverted.\");\n\n            emit ExecutedTransaction(txParamsHash, transactions[i].recipient, transactions[i].value, transactions[i].data, eta);\n        }\n    }\n\n    function getPendingTransactions() external view returns (PendingTransaction[] memory) {\n        PendingTransaction[] memory pending = new PendingTransaction[](pendingTransactionsParamsHashes.length());\n\n        for (uint256 i = 0; i < pendingTransactionsParamsHashes.length(); i++) {\n            bytes32 txParamsHash = pendingTransactionsParamsHashes.at(i);\n            pending[i] = PendingTransaction(txParamsHash, pendingTransactions[txParamsHash]);\n        }\n\n        return pending;\n    }\n\n    function getPendingTransactionAt(uint256 i) external view returns (PendingTransaction memory) {\n        require(pendingTransactionsParamsHashes.length() > i, \"Timelock: pending transactions index out of range\");\n\n        bytes32 txParamsHash = pendingTransactionsParamsHashes.at(i);\n        return PendingTransaction(txParamsHash, pendingTransactions[txParamsHash]);\n    }\n\n    function getPendingTransactionsCount() external view returns (uint256) {\n        return pendingTransactionsParamsHashes.length();\n    }\n\n    modifier onlyProposer() {\n        require(msg.sender == proposer, \"Timelock: only the proposer can perform this action\");\n        _;\n    }\n\n    modifier onlyExecutorOrOwner() {\n        require(executors.contains(msg.sender) || msg.sender == owner(), \"Timelock: only the executor or owner can perform this action\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/Oracle/WethToWethOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ICryptoPairOracle.sol\";\n\n// Fixed window oracle that recomputes the average price for the entire period once every period\n// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\ncontract WethToWethOracle is ICryptoPairOracle {\n    address internal wethAddress;\n\n    uint8 private constant DECIMALS = 18;\n\n    constructor(address _wethAddress) {\n        require(_wethAddress != address(0), \"Weth address cannot be 0\");\n\n        wethAddress = _wethAddress;\n    }\n\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256 amountOut) {\n        require(tokenIn == wethAddress, \"This oracle only accepts consulting WETH input\");\n\n        return amountIn;\n    }\n\n    function updateOracle() external pure override {\n        revert(\"This oracle doesn't need updates\");\n    }\n\n    function shouldUpdateOracle() external pure override returns (bool) {\n        return false;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return DECIMALS;\n    }\n}\n"
    },
    "contracts/Utils/disperse.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Disperse {\n    function disperseEther(address[] memory recipients, uint256[] memory values) external payable {\n        require(recipients.length > 0, \"at least one recipient is required\");\n        require(recipients.length == values.length, \"recipients length must be equal to values\");\n\n        for (uint256 i = 0; i < recipients.length; i++) payable(recipients[i]).transfer(values[i]);\n\n        uint256 balance = address(this).balance;\n\n        if (balance > 0) payable(msg.sender).transfer(balance);\n    }\n\n    function disperseToken(\n        address erc20Address,\n        address[] memory recipients,\n        uint256[] memory values\n    ) external {\n        require(recipients.length > 0, \"at least one recipient is required\");\n        require(recipients.length == values.length, \"recipients length must be equal to values\");\n\n        uint256 total = 0;\n        uint256 i;\n        IERC20 token = IERC20(erc20Address);\n\n        for (i = 0; i < recipients.length; i++) total += values[i];\n\n        require(token.transferFrom(msg.sender, address(this), total));\n\n        for (i = 0; i < recipients.length; i++) require(token.transfer(recipients[i], values[i]));\n    }\n}\n"
    },
    "contracts/Staking/Vesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./StakingRewardsDistribution.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract Vesting is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    struct VestingSchedule {\n        uint256 vestingStartedTimeStamp;\n        uint256 vestingEndTimeStamp;\n        uint256 totalVestedAmount_d18;\n        uint256 releasedAmount_d18;\n    }\n\n    mapping(address => VestingSchedule[]) public vestingSchedules;\n\n    address public vestingScheduler;\n    address public fundsProvider;\n    uint256 public vestingTimeInSeconds;\n    IERC20 public vestedToken;\n\n    bool public claimingPaused;\n\n    function initialize(\n        address _vestedTokenAddress,\n        address _vestingScheduler,\n        address _fundsProvider,\n        uint256 _vestingTimeInSeconds\n    ) external initializer {\n        require(_vestedTokenAddress != address(0), \"Vesting address cannot be 0\");\n        require(_vestingScheduler != address(0), \"VestingScheduler address cannot be 0\");\n        require(_fundsProvider != address(0), \"FundsProvider address cannot be 0\");\n        require(_vestingTimeInSeconds > 0, \"Vesting timme cannot be set to 0\");\n\n        __Ownable_init();\n\n        vestedToken = IERC20(_vestedTokenAddress);\n        vestingScheduler = _vestingScheduler;\n        fundsProvider = _fundsProvider;\n        vestingTimeInSeconds = _vestingTimeInSeconds;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function schedule(address _receiver, uint256 _amount_d18) external {\n        // to prevent melicious users form cloging user's schedules\n        require(msg.sender == vestingScheduler, \"Only vesting scheduler can create vesting schedules\");\n\n        vestingSchedules[_receiver].push(VestingSchedule(block.timestamp, block.timestamp + vestingTimeInSeconds, _amount_d18, 0));\n\n        vestedToken.safeTransferFrom(fundsProvider, address(this), _amount_d18);\n\n        emit ScheduleCreated(_receiver, _amount_d18);\n    }\n\n    function claim(uint256 from, uint256 to) external claimingNotPaused {\n        require(from < to, \"Vesting: 'to' must be larger than 'from'\");\n        VestingSchedule[] storage userVestingSchedules = vestingSchedules[msg.sender];\n\n        uint256 rewardsToClaim = 0;\n        uint256 userVestingSchedulesLength = userVestingSchedules.length;\n\n        for (uint256 index = from + 1; index <= to && index <= userVestingSchedulesLength; ++index) {\n            if (isFullyVested(userVestingSchedules[index - 1])) {\n                rewardsToClaim =\n                    rewardsToClaim +\n                    userVestingSchedules[index - 1].totalVestedAmount_d18 -\n                    userVestingSchedules[index - 1].releasedAmount_d18;\n\n                --userVestingSchedulesLength;\n                userVestingSchedules[index - 1] = userVestingSchedules[userVestingSchedulesLength];\n                userVestingSchedules.pop();\n\n                --index;\n            } else {\n                uint256 proprtionalReward = getAvailableReward(userVestingSchedules[index - 1]);\n                rewardsToClaim = rewardsToClaim + proprtionalReward;\n                userVestingSchedules[index - 1].releasedAmount_d18 = userVestingSchedules[index - 1].releasedAmount_d18 + proprtionalReward;\n            }\n        }\n\n        vestedToken.safeTransfer(msg.sender, rewardsToClaim);\n\n        emit RewardClaimed(msg.sender, rewardsToClaim);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function userVestingSchedulesCount(address user) external view returns (uint256) {\n        return vestingSchedules[user].length;\n    }\n\n    function isFullyVested(VestingSchedule memory _schedule) public view returns (bool) {\n        return _schedule.vestingEndTimeStamp <= block.timestamp;\n    }\n\n    function getAvailableReward(VestingSchedule memory _schedule) public view returns (uint256) {\n        if (isFullyVested(_schedule)) {\n            return _schedule.totalVestedAmount_d18 - _schedule.releasedAmount_d18;\n        }\n        return\n            ((_schedule.totalVestedAmount_d18 * (block.timestamp - _schedule.vestingStartedTimeStamp)) / vestingTimeInSeconds) -\n            _schedule.releasedAmount_d18;\n    }\n\n    function vestingSchedulesOf(address account) external view returns (VestingSchedule[] memory) {\n        return vestingSchedules[account];\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setVestingScheduler(address _vestingScheduler) external onlyOwner {\n        require(_vestingScheduler != address(0), \"Vesting scheduler cannot be set to the zero address\");\n\n        vestingScheduler = _vestingScheduler;\n    }\n\n    function setVestingTimeInSeconds(uint256 _vestingTimeInSeconds) external onlyOwner {\n        require(_vestingTimeInSeconds > 0, \"Vesting timme cannot be set to 0\");\n        vestingTimeInSeconds = _vestingTimeInSeconds;\n\n        emit VestingTimeInSecondsSet(_vestingTimeInSeconds);\n    }\n\n    function setFundsProvider(address _fundsProvider) external onlyOwner {\n        require(_fundsProvider != address(0), \"Funds provider cannot be set to the zero address\");\n\n        fundsProvider = _fundsProvider;\n    }\n\n    function toggleClaimingPaused() external onlyOwner {\n        claimingPaused = !claimingPaused;\n\n        emit ClaimingPausedToggled(claimingPaused);\n    }\n\n    modifier claimingNotPaused() {\n        require(claimingPaused == false, \"Claiming is paused\");\n        _;\n    }\n\n    event ScheduleCreated(address user, uint256 amount);\n    event RewardClaimed(address user, uint256 amount);\n    event VestingTimeInSecondsSet(uint256 vestingTimeInSeconds);\n    event ClaimingPausedToggled(bool toggled);\n}\n"
    },
    "contracts/Staking/StakingRewardsDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../Bdx/BDXShares.sol\";\nimport \"./Vesting.sol\";\nimport \"./StakingRewards.sol\";\n\ncontract StakingRewardsDistribution is OwnableUpgradeable {\n    using SafeERC20Upgradeable for BDXShares;\n\n    uint256 public TOTAL_BDX_SUPPLY;\n\n    uint256 public constant HUNDRED_PERCENT = 100;\n    uint256 public constant MAX_REWARD_FEE = 1e12;\n\n    // BDX minting schedule\n    // They sum up to 50% of TOTAL_BDX_SUPPLY\n    //   as this much is reserved for liquidity mining rewards\n    uint256 public constant BDX_MINTING_SCHEDULE_PRECISON = 1000;\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_1;\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_2;\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_3;\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_4;\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_5;\n\n    uint256 public EndOfYear_1;\n    uint256 public EndOfYear_2;\n    uint256 public EndOfYear_3;\n    uint256 public EndOfYear_4;\n    uint256 public EndOfYear_5;\n\n    uint256 public vestingRewardRatio_percent;\n    uint256 public rewardFee_d12;\n\n    BDXShares public rewardsToken;\n    Vesting public vesting;\n    address public treasury;\n\n    mapping(address => uint256) public stakingRewardsWeights;\n    address[] public stakingRewardsAddresses;\n    uint256 public stakingRewardsWeightsTotal;\n\n    bool public collectingPaused;\n\n    function initialize(\n        address _rewardsToken,\n        address _vesting,\n        address _treasury,\n        uint256 _vestingRewardRatio_percent\n    ) external initializer {\n        require(_rewardsToken != address(0), \"Rewards address cannot be 0\");\n        require(_vesting != address(0), \"Vesting address cannot be 0\");\n        require(_treasury != address(0), \"Treasury address cannot be 0\");\n        require(_vestingRewardRatio_percent <= 100, \"VestingRewardRatio_percent must be <= 100\");\n\n        __Ownable_init();\n\n        rewardsToken = BDXShares(_rewardsToken);\n        vesting = Vesting(_vesting);\n        treasury = _treasury;\n        TOTAL_BDX_SUPPLY = rewardsToken.MAX_TOTAL_SUPPLY();\n\n        BDX_MINTING_SCHEDULE_YEAR_1 = (TOTAL_BDX_SUPPLY * 200) / BDX_MINTING_SCHEDULE_PRECISON;\n        BDX_MINTING_SCHEDULE_YEAR_2 = (TOTAL_BDX_SUPPLY * 125) / BDX_MINTING_SCHEDULE_PRECISON;\n        BDX_MINTING_SCHEDULE_YEAR_3 = (TOTAL_BDX_SUPPLY * 100) / BDX_MINTING_SCHEDULE_PRECISON;\n        BDX_MINTING_SCHEDULE_YEAR_4 = (TOTAL_BDX_SUPPLY * 50) / BDX_MINTING_SCHEDULE_PRECISON;\n        BDX_MINTING_SCHEDULE_YEAR_5 = (TOTAL_BDX_SUPPLY * 25) / BDX_MINTING_SCHEDULE_PRECISON;\n\n        EndOfYear_1 = block.timestamp + 365 days;\n        EndOfYear_2 = block.timestamp + 2 * 365 days;\n        EndOfYear_3 = block.timestamp + 3 * 365 days;\n        EndOfYear_4 = block.timestamp + 4 * 365 days;\n        EndOfYear_5 = block.timestamp + 5 * 365 days;\n\n        vestingRewardRatio_percent = _vestingRewardRatio_percent;\n        rewardFee_d12 = 1e11; // 10%\n    }\n\n    // Precision 1e18 for compatibility with ERC20 token\n    function getRewardRatePerSecond(address _stakingRewardsAddress) external view returns (uint256) {\n        uint256 yearSchedule = 0;\n\n        if (block.timestamp < EndOfYear_1) {\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_1;\n        } else if (block.timestamp < EndOfYear_2) {\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_2;\n        } else if (block.timestamp < EndOfYear_3) {\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_3;\n        } else if (block.timestamp < EndOfYear_4) {\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_4;\n        } else if (block.timestamp < EndOfYear_5) {\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_5;\n        } else {\n            yearSchedule = 0;\n        }\n\n        uint256 bdxPerSecond = (yearSchedule * stakingRewardsWeights[_stakingRewardsAddress]) / (365 * 24 * 60 * 60) / stakingRewardsWeightsTotal;\n\n        return bdxPerSecond;\n    }\n\n    function registerPools(address[] calldata _stakingRewardsAddresses, uint256[] calldata _stakingRewardsWeights) external onlyOwner {\n        require(_stakingRewardsAddresses.length == _stakingRewardsWeights.length, \"Pools addresses and weights lengths should be the same\");\n\n        for (uint256 i = 0; i < _stakingRewardsAddresses.length; i++) {\n            if (stakingRewardsWeights[_stakingRewardsAddresses[i]] == 0) {\n                // to avoid duplicates\n                stakingRewardsAddresses.push(_stakingRewardsAddresses[i]);\n            }\n\n            stakingRewardsWeightsTotal -= stakingRewardsWeights[_stakingRewardsAddresses[i]]; // to support override\n            stakingRewardsWeights[_stakingRewardsAddresses[i]] = _stakingRewardsWeights[i];\n            stakingRewardsWeightsTotal += _stakingRewardsWeights[i];\n            emit PoolRegistered(_stakingRewardsAddresses[i], _stakingRewardsWeights[i]);\n        }\n    }\n\n    function unregisterPool(\n        address pool,\n        uint256 from,\n        uint256 to\n    ) external onlyOwner {\n        to = to < stakingRewardsAddresses.length ? to : stakingRewardsAddresses.length;\n\n        stakingRewardsWeightsTotal -= stakingRewardsWeights[pool];\n        stakingRewardsWeights[pool] = 0;\n\n        for (uint256 i = from; i < to; i++) {\n            if (stakingRewardsAddresses[i] == pool) {\n                stakingRewardsAddresses[i] = stakingRewardsAddresses[stakingRewardsAddresses.length - 1];\n                stakingRewardsAddresses.pop();\n\n                emit PoolRemoved(pool);\n                return;\n            }\n        }\n    }\n\n    function collectAllRewards(uint256 from, uint256 to) external collectingNotPaused {\n        to = to < stakingRewardsAddresses.length ? to : stakingRewardsAddresses.length;\n\n        uint256 totalFee;\n        uint256 totalRewardToRelease;\n        uint256 totalRewardToVest;\n        for (uint256 i = from; i < to; i++) {\n            StakingRewards stakingRewards = StakingRewards(stakingRewardsAddresses[i]);\n\n            stakingRewards.updateUserReward(msg.sender);\n            uint256 poolReward = stakingRewards.rewards(msg.sender);\n\n            if (poolReward > 0) {\n                uint256 rewardFee = (poolReward * rewardFee_d12) / MAX_REWARD_FEE;\n                uint256 userReward = poolReward - rewardFee;\n\n                uint256 immediatelyReleasedReward = calculateImmediateReward(userReward);\n                uint256 vestedReward = userReward - immediatelyReleasedReward;\n\n                totalFee = totalFee + rewardFee;\n                totalRewardToRelease = totalRewardToRelease + immediatelyReleasedReward;\n                totalRewardToVest = totalRewardToVest + vestedReward;\n\n                stakingRewards.releaseReward(msg.sender, immediatelyReleasedReward, vestedReward);\n            }\n        }\n\n        if (totalRewardToRelease > 0 || totalRewardToVest > 0) {\n            releaseReward(msg.sender, totalRewardToRelease, totalRewardToVest);\n            rewardsToken.safeTransfer(treasury, totalFee);\n        }\n    }\n\n    function setVestingRewardRatio(uint256 _vestingRewardRatio) external onlyOwner {\n        require(_vestingRewardRatio <= 100, \"VestingRewardRatio_percent must be <= 100\");\n        vestingRewardRatio_percent = _vestingRewardRatio;\n\n        emit VestingRewardRatioSet(_vestingRewardRatio);\n    }\n\n    function calculateImmediateReward(uint256 reward) private view returns (uint256) {\n        return (reward * (HUNDRED_PERCENT - vestingRewardRatio_percent)) / HUNDRED_PERCENT;\n    }\n\n    function releaseReward(\n        address to,\n        uint256 rewardToRelease,\n        uint256 rewardToVest\n    ) private {\n        rewardsToken.approve(address(vesting), rewardToVest);\n        vesting.schedule(to, rewardToVest);\n\n        rewardsToken.safeTransfer(to, rewardToRelease);\n    }\n\n    function setTreasury(address _treasury) external onlyOwner {\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    function setVesting(address _vesting) external onlyOwner {\n        vesting = Vesting(_vesting);\n        emit VestingChanged(_vesting);\n    }\n\n    function setRewardFee_d12(uint256 _rewardFee_d12) external onlyOwner {\n        require(_rewardFee_d12 <= MAX_REWARD_FEE, \"Reward fee cannot exceed 100%\");\n        rewardFee_d12 = _rewardFee_d12;\n        emit RewardFeeChanged(_rewardFee_d12);\n    }\n\n    modifier onlyStakingRewards() {\n        require(stakingRewardsWeights[msg.sender] > 0, \"Only registered staking rewards contracts allowed\");\n        _;\n    }\n\n    function toggleCollectingPaused() external onlyOwner {\n        collectingPaused = !collectingPaused;\n\n        emit CollectingPausedToggled(collectingPaused);\n    }\n\n    modifier collectingNotPaused() {\n        require(collectingPaused == false, \"Collecting is paused\");\n        _;\n    }\n\n    // ---------- EVENTS ----------\n    event PoolRemoved(address indexed pool);\n    event PoolRegistered(address indexed stakingRewardsAddress, uint256 indexed stakingRewardsWeight);\n    event VestingRewardRatioSet(uint256 vestingRewardRatio_percent);\n    event TreasuryChanged(address newTreasury);\n    event VestingChanged(address newVesting);\n    event RewardFeeChanged(uint256 newRewardFee_d12);\n    event CollectingPausedToggled(bool toggled);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/Staking/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n// Modified from Synthetixio\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\n// Then modified from FRAX\n// https://github.com/blindexgit/BlinDEX/blob/551b521/contracts/Staking/StakingRewards.sol\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./StakingRewardsDistribution.sol\";\n\ncontract StakingRewards is PausableUpgradeable, OwnableUpgradeable {\n    using SafeERC20 for ERC20;\n\n    // Constant for various precisions\n    uint256 public constant LOCK_MULTIPLIER_PRECISION = 1e6;\n\n    uint256 public constant REWARD_PRECISION = 1e18;\n\n    uint256 private constant _REENTRY_GUARD_NOT_ENTERED = 1;\n    uint256 private constant _REENTRY_GUARD_ENTERED = 2;\n\n    // uint256 is cheaper than bool\n    uint256 private _reentry_guard_status;\n\n    /* ========== STATE VARIABLES ========== */\n\n    ERC20 public stakingToken;\n    StakingRewardsDistribution private stakingRewardsDistribution;\n\n    uint256 public periodFinish;\n    bool public isTrueBdPool;\n\n    uint256 public rewardsDurationSeconds;\n\n    uint256 public lastUpdateTime; // time when recent reward per token has been calculated\n    uint256 public rewardPerTokenStored_REWARD_PRECISION;\n\n    mapping(address => uint256) public userRewardPerTokenPaid_REWARD_PRECISION;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _staking_token_supply;\n    uint256 private _staking_token_boosted_supply;\n    mapping(address => uint256) private _unlocked_balances;\n    mapping(address => uint256) private _locked_balances;\n    mapping(address => uint256) private _boosted_balances;\n\n    mapping(address => LockedStake[]) private lockedStakes;\n\n    mapping(address => bool) public greylist;\n\n    bool public unlockedStakes; // Release lock stakes in case of system migration\n\n    struct LockedStake {\n        bytes32 kek_id;\n        uint256 start_timestamp;\n        uint256 amount;\n        uint256 ending_timestamp;\n        uint256 multiplier_LOCK_MULTIPLIER_PRECISION;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        address _stakingToken,\n        address _stakingRewardsDistribution,\n        bool _isTrueBdPool\n    ) external initializer {\n        require(_stakingToken != address(0), \"Staking address cannot be 0\");\n        require(_stakingRewardsDistribution != address(0), \"StakingRewardsDistribution address cannot be 0\");\n\n        __Ownable_init();\n        __Pausable_init();\n\n        stakingToken = ERC20(_stakingToken);\n        stakingRewardsDistribution = StakingRewardsDistribution(_stakingRewardsDistribution);\n        isTrueBdPool = _isTrueBdPool;\n\n        rewardsDurationSeconds = 604800; // 7 * 86400  (7 days)\n        unlockedStakes = false;\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + rewardsDurationSeconds;\n\n        _reentry_guard_status = _REENTRY_GUARD_NOT_ENTERED;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external view returns (uint256) {\n        return _staking_token_supply;\n    }\n\n    function totalBoostedSupply() external view returns (uint256) {\n        return _staking_token_boosted_supply;\n    }\n\n    function lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(uint256 yearsNo) public pure returns (uint256) {\n        if (yearsNo == 10) {\n            return 50000000;\n        } else if (yearsNo == 5) {\n            return 10000000;\n        } else if (yearsNo == 3) {\n            return 3000000;\n        } else if (yearsNo == 2) {\n            return 2333000;\n        } else if (yearsNo == 1) {\n            return 1667000;\n        } else {\n            revert(\"Not supported staking duration\");\n        }\n    }\n\n    // Total unlocked and locked liquidity tokens\n    function balanceOf(address account) external view returns (uint256) {\n        return _unlocked_balances[account] + _locked_balances[account];\n    }\n\n    // Total unlocked liquidity tokens\n    function unlockedBalanceOf(address account) external view returns (uint256) {\n        return _unlocked_balances[account];\n    }\n\n    // Total locked liquidity tokens\n    function lockedBalanceOf(address account) external view returns (uint256) {\n        return _locked_balances[account];\n    }\n\n    // Total 'balance' used for calculating the percent of the pool the account owns\n    // Takes into account the locked stake time multiplier\n    function boostedBalanceOf(address account) external view returns (uint256) {\n        return _boosted_balances[account];\n    }\n\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\n        return lockedStakes[account];\n    }\n\n    function stakingDecimals() external view returns (uint256) {\n        return stakingToken.decimals();\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_staking_token_supply == 0) {\n            return rewardPerTokenStored_REWARD_PRECISION;\n        } else {\n            return\n                rewardPerTokenStored_REWARD_PRECISION +\n                (((lastTimeRewardApplicable() - lastUpdateTime) *\n                    stakingRewardsDistribution.getRewardRatePerSecond(address(this)) *\n                    REWARD_PRECISION) / _staking_token_boosted_supply);\n        }\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return\n            ((_boosted_balances[account] * (rewardPerToken() - userRewardPerTokenPaid_REWARD_PRECISION[account])) / (REWARD_PRECISION)) +\n            rewards[account];\n    }\n\n    // Precision 1e18 for compatibility with ERC20 token\n    function getRewardForDuration() external view returns (uint256) {\n        return stakingRewardsDistribution.getRewardRatePerSecond(address(this)) * rewardsDurationSeconds;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        require(greylist[msg.sender] == false, \"address has been greylisted\");\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply + amount;\n        _staking_token_boosted_supply = _staking_token_boosted_supply + amount;\n\n        // Staking token balance and boosted balance\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender] + amount;\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender] + amount;\n\n        // Pull the tokens from the staker\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdrawLockedLPTokens(uint256 withdrawAmount, address withdrawalAddress) external onlyOwner {\n        require(withdrawAmount > 0, \"Amount to withdraw is missing\");\n        require(withdrawalAddress != address(0), \"Withdrawl address must not be zero\");\n\n        uint256 totalLpTokenAmount = stakingToken.balanceOf(address(this));\n        require(withdrawAmount <= totalLpTokenAmount, \"Insufficient lp tokens to withdraw\");\n\n        stakingToken.safeTransfer(withdrawalAddress, withdrawAmount);\n    }\n\n    function stakeLocked(uint256 amount, uint256 yearsNo) external nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        if (yearsNo == 10) {\n            require(isTrueBdPool, \"You can only stake locked liquidity 10 years for true BD pools\");\n        } else {\n            require(\n                yearsNo == 1 || yearsNo == 2 || yearsNo == 3 || yearsNo == 5 || yearsNo == 10,\n                \"You can only stake locked liquidity for 1, 2, 3, 5 or 10 years\"\n            );\n        }\n        require(greylist[msg.sender] == false, \"address has been greylisted\");\n\n        uint256 secs = yearsNo * 365 * 24 * 60 * 60;\n\n        uint256 multiplier = lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(yearsNo);\n        uint256 boostedAmount = (amount * multiplier) / LOCK_MULTIPLIER_PRECISION;\n        lockedStakes[msg.sender].push(\n            LockedStake(keccak256(abi.encodePacked(msg.sender, block.timestamp, amount)), block.timestamp, amount, block.timestamp + secs, multiplier)\n        );\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply + amount;\n        _staking_token_boosted_supply = _staking_token_boosted_supply + boostedAmount;\n\n        // Staking token balance and boosted balance\n        _locked_balances[msg.sender] = _locked_balances[msg.sender] + amount;\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender] + boostedAmount;\n\n        // Pull the tokens from the staker\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        emit StakeLocked(msg.sender, amount, secs);\n    }\n\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n\n        // Staking token balance and boosted balance\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender] - amount;\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender] - amount;\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply - amount;\n        _staking_token_boosted_supply = _staking_token_boosted_supply - amount;\n\n        // Give the tokens to the withdrawer\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function withdrawLocked(\n        bytes32 kek_id,\n        uint256 from,\n        uint256 to\n    ) external nonReentrant updateReward(msg.sender) {\n        // from & to parameters serve as an optinal range,\n        // to prevent the loop from running out of gas\n        // when user has too many stakes\n\n        to = to < lockedStakes[msg.sender].length ? to : lockedStakes[msg.sender].length;\n\n        LockedStake memory thisStake;\n\n        for (uint256 i = from; i < to; i++) {\n            if (kek_id == lockedStakes[msg.sender][i].kek_id) {\n                thisStake = lockedStakes[msg.sender][i];\n\n                lockedStakes[msg.sender][i] = lockedStakes[msg.sender][lockedStakes[msg.sender].length - 1];\n                lockedStakes[msg.sender].pop();\n                break;\n            }\n        }\n        require(thisStake.kek_id == kek_id, \"Stake not found\");\n        require(block.timestamp >= thisStake.ending_timestamp || unlockedStakes == true, \"Stake is still locked!\");\n\n        uint256 theAmount = thisStake.amount;\n        uint256 boostedAmount = (theAmount * thisStake.multiplier_LOCK_MULTIPLIER_PRECISION) / LOCK_MULTIPLIER_PRECISION;\n\n        if (theAmount > 0) {\n            // Staking token balance and boosted balance\n            _locked_balances[msg.sender] = _locked_balances[msg.sender] - theAmount;\n            _boosted_balances[msg.sender] = _boosted_balances[msg.sender] - boostedAmount;\n\n            // Staking token supply and boosted supply\n            _staking_token_supply = _staking_token_supply - theAmount;\n            _staking_token_boosted_supply = _staking_token_boosted_supply - boostedAmount;\n\n            // Give the tokens to the withdrawer\n            stakingToken.safeTransfer(msg.sender, theAmount);\n\n            emit WithdrawnLocked(msg.sender, theAmount, kek_id);\n        }\n    }\n\n    function lockExistingStake(uint256 amount, uint256 yearsNo) external nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(amount > 0, \"amount must be > 0\");\n        if (yearsNo == 10) {\n            require(isTrueBdPool, \"You can only stake locked liquidity 10 years for true BD pools\");\n        } else {\n            require(\n                yearsNo == 1 || yearsNo == 2 || yearsNo == 3 || yearsNo == 5 || yearsNo == 10,\n                \"You can only stake locked liquidity for 1, 2, 3, 5 or 10 years\"\n            );\n        }\n\n        require(greylist[msg.sender] == false, \"address has been greylisted\");\n\n        //\n        // unstake the part of the unlocked stake\n        //\n\n        // Staking token balance and boosted balance\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender] - amount;\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender] - amount;\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply - amount;\n        _staking_token_boosted_supply = _staking_token_boosted_supply - amount;\n\n        //\n        //  stake (locked) the part of the unstaked pard of the unlocked stake\n        //\n\n        uint256 secs = yearsNo * 365 * 24 * 60 * 60;\n\n        uint256 multiplier = lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(yearsNo);\n        uint256 boostedAmount = (amount * multiplier) / LOCK_MULTIPLIER_PRECISION;\n        lockedStakes[msg.sender].push(\n            LockedStake(keccak256(abi.encodePacked(msg.sender, block.timestamp, amount)), block.timestamp, amount, block.timestamp + secs, multiplier)\n        );\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply + amount;\n        _staking_token_boosted_supply = _staking_token_boosted_supply + boostedAmount;\n\n        // Staking token balance and boosted balance\n        _locked_balances[msg.sender] = _locked_balances[msg.sender] + amount;\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender] + boostedAmount;\n\n        emit ExistingStakeLocked(msg.sender, amount, secs);\n    }\n\n    // used by StakingRewardsDistribution, to collect rewards from all pools at once\n    function releaseReward(\n        address user,\n        uint256 immediatelyReleasedReward,\n        uint256 vestedReward\n    ) external onlyStakingRewardsDistribution {\n        rewards[user] = 0;\n        emit RewardPaid(user, immediatelyReleasedReward);\n        emit RewardVested(user, vestedReward);\n    }\n\n    function renewIfApplicable() external {\n        if (block.timestamp > periodFinish) {\n            retroCatchUp();\n        }\n    }\n\n    // If the period expired, renew it\n    function retroCatchUp() internal {\n        // Failsafe check\n        require(block.timestamp > periodFinish, \"Period has not expired yet!\");\n\n        uint256 num_periods_elapsed = uint256(block.timestamp - periodFinish) / rewardsDurationSeconds; // Floor division to the nearest period\n\n        periodFinish = periodFinish + ((num_periods_elapsed + 1) * rewardsDurationSeconds);\n\n        rewardPerTokenStored_REWARD_PRECISION = rewardPerToken();\n\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        emit RewardsPeriodRenewed(address(stakingToken));\n    }\n\n    function updateUserRewardInternal(address account) internal {\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\n        if (block.timestamp > periodFinish) {\n            retroCatchUp();\n        } else {\n            rewardPerTokenStored_REWARD_PRECISION = rewardPerToken();\n            lastUpdateTime = lastTimeRewardApplicable();\n        }\n\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid_REWARD_PRECISION[account] = rewardPerTokenStored_REWARD_PRECISION;\n        }\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // Added to support recovering LP Rewards from other systems to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        // Admin cannot withdraw the staking token from the contract\n        require(tokenAddress != address(stakingToken));\n        ERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    function setRewardsDuration(uint256 _rewardsDurationSeconds) external onlyOwner {\n        rewardsDurationSeconds = _rewardsDurationSeconds;\n        emit RewardsDurationUpdated(rewardsDurationSeconds);\n    }\n\n    function setIsAddressGraylisted(address _address, bool isGraylisted) external onlyOwner {\n        greylist[_address] = isGraylisted;\n    }\n\n    function toggleUnlockStakes() external onlyOwner {\n        unlockedStakes = !unlockedStakes;\n    }\n\n    function setOwner(address _new_owner) external onlyOwner {\n        transferOwnership(_new_owner);\n    }\n\n    // used by StakingRewardsDistribution, to collect rewards from all pools at once\n    function updateUserReward(address account) external onlyStakingRewardsDistribution {\n        updateUserRewardInternal(account);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        updateUserRewardInternal(account);\n        _;\n    }\n\n    modifier onlyStakingRewardsDistribution() {\n        require(msg.sender == address(stakingRewardsDistribution), \"Only staking rewards distribution allowed\");\n        _;\n    }\n\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_reentry_guard_status != _REENTRY_GUARD_ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _reentry_guard_status = _REENTRY_GUARD_ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _reentry_guard_status = _REENTRY_GUARD_NOT_ENTERED;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event Staked(address indexed user, uint256 amount);\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs);\n    event Withdrawn(address indexed user, uint256 amount);\n    event WithdrawnLocked(address indexed user, uint256 amount, bytes32 kek_id);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n    event RewardsPeriodRenewed(address token);\n    event RewardVested(address user, uint256 amount);\n    event ExistingStakeLocked(address indexed user, uint256 amount, uint256 secs);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/Oracle/OracleBasedWethUSDFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IPriceFeed.sol\";\nimport \"./IOracleBasedCryptoFiatFeed.sol\";\n\n/**\n@dev A contract that will be used ONLY by BDUS as we're using USD as out base fiat currency\n*/\ncontract OracleBasedWethUSDFeed is IOracleBasedCryptoFiatFeed {\n    uint8 private constant DECIMALS = 12;\n\n    IPriceFeed internal wethUsdFeed;\n\n    constructor(address _wethUsdFeedAddress) {\n        require(_wethUsdFeedAddress != address(0), \"WethUsdFeed address cannot be 0\");\n\n        wethUsdFeed = IPriceFeed(_wethUsdFeedAddress);\n    }\n\n    function getPrice_1e12() public view override returns (uint256) {\n        uint8 wethUsdDecimals = wethUsdFeed.decimals();\n\n        if (wethUsdDecimals > 12) {\n            uint256 excessiveDecimals = wethUsdDecimals - DECIMALS;\n            return wethUsdFeed.price() / (10**(excessiveDecimals));\n        } else {\n            uint256 missingDecimals = DECIMALS - wethUsdDecimals;\n            return wethUsdFeed.price() * (10**(missingDecimals));\n        }\n    }\n\n    function getDecimals() public pure override returns (uint8) {\n        return DECIMALS;\n    }\n}\n"
    },
    "contracts/Oracle/OracleBasedCryptoFiatFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IPriceFeed.sol\";\nimport \"./IOracleBasedCryptoFiatFeed.sol\";\n\ncontract OracleBasedCryptoFiatFeed is IOracleBasedCryptoFiatFeed {\n    IPriceFeed internal fiatToUsdFeed;\n    IPriceFeed internal cryptoToUsdFeed;\n\n    constructor(address _fiatToUsdFeedAddress, address _cryptoUsdFeedAddress) {\n        require(_fiatToUsdFeedAddress != address(0), \"FiatToUsdFeed address cannot be 0\");\n        require(_cryptoUsdFeedAddress != address(0), \"CryptoUsdFeed address cannot be 0\");\n\n        fiatToUsdFeed = IPriceFeed(_fiatToUsdFeedAddress);\n        cryptoToUsdFeed = IPriceFeed(_cryptoUsdFeedAddress);\n    }\n\n    function getPrice_1e12() public view override returns (uint256) {\n        uint256 fiatUsdPrice = fiatToUsdFeed.price();\n        uint256 cryptoUsdPrice = cryptoToUsdFeed.price();\n\n        return (uint256(1e12) * cryptoUsdPrice * (uint256(10)**fiatToUsdFeed.decimals())) / fiatUsdPrice / (uint256(10)**cryptoToUsdFeed.decimals());\n    }\n\n    function getDecimals() public pure override returns (uint8) {\n        return 12;\n    }\n}\n"
    },
    "contracts/Oracle/AggregatorV3PriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IPriceFeed.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract AggregatorV3PriceFeed is IPriceFeed {\n    AggregatorV3Interface private feed;\n\n    constructor(address _feedAddress) {\n        require(_feedAddress != address(0), \"Feed address cannot be 0\");\n\n        feed = AggregatorV3Interface(_feedAddress);\n    }\n\n    function decimals() external view override returns (uint8) {\n        return feed.decimals();\n    }\n\n    function price() external view override returns (uint256) {\n        (, int256 priceVal, , , ) = feed.latestRoundData();\n        return uint256(priceVal);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/Oracle/BtcToEthOracleChinlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./ICryptoPairOracle.sol\";\n\ncontract BtcToEthOracleChinlink is ICryptoPairOracle {\n    AggregatorV3Interface internal feed;\n    address internal wethAddress;\n\n    constructor(address _btcEthFeedAddress, address _wethAddress) {\n        require(_btcEthFeedAddress != address(0), \"BtcEthFeed address cannot be 0\");\n        require(_wethAddress != address(0), \"Weth address cannot be 0\");\n\n        feed = AggregatorV3Interface(_btcEthFeedAddress);\n        wethAddress = _wethAddress;\n    }\n\n    function getPrice_1e12() public view returns (uint256) {\n        uint256 price = getLatestPrice(feed);\n\n        return (uint256(1e12) * price) / (uint256(10)**feed.decimals());\n    }\n\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256) {\n        require(tokenIn == wethAddress, \"This oracle only accepts consulting WETH input\");\n\n        return (amountIn * 1e12) / getPrice_1e12();\n    }\n\n    function getLatestPrice(AggregatorV3Interface _feed) internal view returns (uint256) {\n        (, int256 price, , , ) = _feed.latestRoundData();\n        return uint256(price);\n    }\n\n    function updateOracle() external pure override {\n        revert(\"This oracle doesn't need updates\");\n    }\n\n    function shouldUpdateOracle() external pure override returns (bool) {\n        return false;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return feed.decimals();\n    }\n}\n"
    },
    "contracts/DummyTestContracts/Flipper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Flipper is Ownable {\n    bool[] public states = [false, false, false];\n\n    function flip(uint256 position) public onlyOwner {\n        states[position] = !states[position];\n    }\n\n    function state(uint256 position) public view returns (bool) {\n        return states[position];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}