{
  "address": "0x0D3Be6710783da0CCAb3353c5d2f4259E4a014dc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_recentPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMaxDayChange_d12",
          "type": "uint256"
        }
      ],
      "name": "MaxDayChangeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldUpdater",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newUpdater",
          "type": "address"
        }
      ],
      "name": "UpdaterChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDayChange_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDayChange_d12",
          "type": "uint256"
        }
      ],
      "name": "setMaxDayChange_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUpdater",
          "type": "address"
        }
      ],
      "name": "setUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c3745dcecab78c927ade99d26e7098c4ee02e87d9d17d8b4b3304346481e482",
  "receipt": {
    "to": null,
    "from": "0x524348A6fD0836Ee4c78F08C62D1BE7594061a8c",
    "contractAddress": "0x0D3Be6710783da0CCAb3353c5d2f4259E4a014dc",
    "transactionIndex": 0,
    "gasUsed": "766472",
    "logsBloom": "0x
    "blockHash": "0xdfecee71f48178169d3e4f771b20d59aaa8386c495b4867f33ac4647cadefa46",
    "transactionHash": "0x2c3745dcecab78c927ade99d26e7098c4ee02e87d9d17d8b4b3304346481e482",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3973124,
        "transactionHash": "0x2c3745dcecab78c927ade99d26e7098c4ee02e87d9d17d8b4b3304346481e482",
        "address": "0x0D3Be6710783da0CCAb3353c5d2f4259E4a014dc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000524348a6fd0836ee4c78f08c62d1be7594061a8c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdfecee71f48178169d3e4f771b20d59aaa8386c495b4867f33ac4647cadefa46"
      }
    ],
    "blockNumber": 3973124,
    "cumulativeGasUsed": "766472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A119532248d0E4Ff68A42bB37f64336C3F20872",
    "1130000000000"
  ],
  "solcInputHash": "a2b283f9ba339a090f7b294daff0e306",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_recentPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxDayChange_d12\",\"type\":\"uint256\"}],\"name\":\"MaxDayChangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldUpdater\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"UpdaterChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDayChange_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDayChange_d12\",\"type\":\"uint256\"}],\"name\":\"setMaxDayChange_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/FiatToFiatPseudoOracleFeed.sol\":\"FiatToFiatPseudoOracleFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Oracle/FiatToFiatPseudoOracleFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\n\\n// We need feeds with fiats prices. For now on RSK chain there are no such feeds.\\n// We populate our own feeds\\ncontract FiatToFiatPseudoOracleFeed is IPriceFeed, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint8 private constant DECIMALS = 12;\\n    uint256 private constant PRICE_PRECISION = 1e12;\\n    uint256 private constant SECONDS_IN_DAY = 60 * 60 * 24;\\n\\n    uint256 private recentPrice;\\n    uint256 public lastUpdateTimestamp;\\n    uint256 public maxDayChange_d12 = 1e10; // 1%\\n\\n    address private updater;\\n\\n    constructor(address _updater, uint256 _recentPrice) public {\\n        require(_updater != address(0), \\\"Updater address cannot be 0\\\");\\n\\n        updater = _updater;\\n        recentPrice = _recentPrice;\\n        lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function price() external view override returns (uint256) {\\n        return recentPrice;\\n    }\\n\\n    function setUpdater(address newUpdater) external onlyOwner {\\n        require(newUpdater != address(0), \\\"Updater cannot be set to the zero address\\\");\\n\\n        address oldUpdater = updater;\\n        updater = newUpdater;\\n        emit UpdaterChanged(oldUpdater, updater);\\n    }\\n\\n    function setPrice(uint256 _price) external onlyUpdaterOrOwner {\\n        if (_msgSender() != owner()) {\\n            uint256 diff = _price > recentPrice ? _price.sub(recentPrice) : recentPrice.sub(_price);\\n\\n            uint256 dayChange_d12 = PRICE_PRECISION.mul(diff).mul(SECONDS_IN_DAY).div(recentPrice).div(block.timestamp.sub(lastUpdateTimestamp));\\n\\n            require(dayChange_d12 <= maxDayChange_d12, \\\"Price change too big\\\");\\n        }\\n\\n        recentPrice = _price;\\n        lastUpdateTimestamp = block.timestamp;\\n        emit PriceChanged(_price);\\n    }\\n\\n    function setMaxDayChange_d12(uint256 _maxDayChange_d12) external onlyOwner {\\n        maxDayChange_d12 = _maxDayChange_d12;\\n        emit MaxDayChangeChanged(_maxDayChange_d12);\\n    }\\n\\n    modifier onlyUpdaterOrOwner() {\\n        require(_msgSender() == updater || _msgSender() == owner(), \\\"You're not updater\\\");\\n        _;\\n    }\\n\\n    event UpdaterChanged(address indexed oldUpdater, address indexed newUpdater);\\n    event PriceChanged(uint256 indexed newPrice);\\n    event MaxDayChangeChanged(uint256 indexed newMaxDayChange_d12);\\n}\\n\",\"keccak256\":\"0x4d4ed57c14350d4dd9f19deb8cbfeb4568525be26e40e11ffbd0e1f4907273bd\",\"license\":\"MIT\"},\"contracts/Oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0256f22bacb3ce02d716bed60ca1333e93d79af1caadcab7c77f866523a28ece\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526402540be40060035534801561001957600080fd5b506040516109d73803806109d78339818101604052604081101561003c57600080fd5b508051602090910151600061004f610121565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0382166100f4576040805162461bcd60e51b815260206004820152601b60248201527f5570646174657220616464726573732063616e6e6f7420626520300000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b03939093169290921790915560015542600255610125565b3390565b6108a3806101346000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806391b7f5ed1161006657806391b7f5ed146101115780639831fbc11461012e5780639d54f4191461014b578063a035b1fe14610171578063f2fde38b146101795761009e565b806314bcec9f146100a3578063313ce567146100bd57806368742e0e146100db578063715018a6146100e35780638da5cb5b146100ed575b600080fd5b6100ab61019f565b60408051918252519081900360200190f35b6100c56101a5565b6040805160ff9092168252519081900360200190f35b6100ab6101aa565b6100eb6101b0565b005b6100f561025c565b604080516001600160a01b039092168252519081900360200190f35b6100eb6004803603602081101561012757600080fd5b503561026b565b6100eb6004803603602081101561014457600080fd5b5035610418565b6100eb6004803603602081101561016157600080fd5b50356001600160a01b03166104ad565b6100ab6105a8565b6100eb6004803603602081101561018f57600080fd5b50356001600160a01b03166105ae565b60025481565b600c90565b60035481565b6101b86106b0565b6001600160a01b03166101c961025c565b6001600160a01b031614610212576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6004546001600160a01b031661027f6106b0565b6001600160a01b031614806102b3575061029761025c565b6001600160a01b03166102a86106b0565b6001600160a01b0316145b6102f9576040805162461bcd60e51b81526020600482015260126024820152712cb7ba93b932903737ba103ab83230ba32b960711b604482015290519081900360640190fd5b61030161025c565b6001600160a01b03166103126106b0565b6001600160a01b0316146103e1576000600154821161033d5760015461033890836106b4565b61034b565b60015461034b9083906106b4565b9050600061038e610367600254426106b490919063ffffffff16565b60015461038890816201518061038264e8d4a5100089610716565b90610716565b90610776565b90506003548111156103de576040805162461bcd60e51b81526020600482015260146024820152735072696365206368616e676520746f6f2062696760601b604482015290519081900360640190fd5b50505b60018190554260025560405181907fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d62290600090a250565b6104206106b0565b6001600160a01b031661043161025c565b6001600160a01b03161461047a576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b600381905560405181907f1b385cc6106048a7dca0a143930badfbb586492816fd033085150932635b3cee90600090a250565b6104b56106b0565b6001600160a01b03166104c661025c565b6001600160a01b03161461050f576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b6001600160a01b0381166105545760405162461bcd60e51b81526004018080602001828103825260298152602001806108046029913960400191505060405180910390fd5b600480546001600160a01b038381166001600160a01b03198316179283905560405191811692169082907f662a4a4a892f5f13cf7ee050fdaa045f8641601fdbc843e8a71f418099cacd4e90600090a35050565b60015490565b6105b66106b0565b6001600160a01b03166105c761025c565b6001600160a01b031614610610576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b6001600160a01b0381166106555760405162461bcd60e51b81526004018080602001828103825260268152602001806107de6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60008282111561070b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b60008261072557506000610710565b8282028284828161073257fe5b041461076f5760405162461bcd60e51b815260040180806020018281038252602181526020018061082d6021913960400191505060405180910390fd5b9392505050565b60008082116107cc576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816107d557fe5b04939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373557064617465722063616e6e6f742062652073657420746f20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220a61ac53d0c7f5fb60a7de532f3327f3ba2f567983f20a6b256436a5de397c3d164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806391b7f5ed1161006657806391b7f5ed146101115780639831fbc11461012e5780639d54f4191461014b578063a035b1fe14610171578063f2fde38b146101795761009e565b806314bcec9f146100a3578063313ce567146100bd57806368742e0e146100db578063715018a6146100e35780638da5cb5b146100ed575b600080fd5b6100ab61019f565b60408051918252519081900360200190f35b6100c56101a5565b6040805160ff9092168252519081900360200190f35b6100ab6101aa565b6100eb6101b0565b005b6100f561025c565b604080516001600160a01b039092168252519081900360200190f35b6100eb6004803603602081101561012757600080fd5b503561026b565b6100eb6004803603602081101561014457600080fd5b5035610418565b6100eb6004803603602081101561016157600080fd5b50356001600160a01b03166104ad565b6100ab6105a8565b6100eb6004803603602081101561018f57600080fd5b50356001600160a01b03166105ae565b60025481565b600c90565b60035481565b6101b86106b0565b6001600160a01b03166101c961025c565b6001600160a01b031614610212576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6004546001600160a01b031661027f6106b0565b6001600160a01b031614806102b3575061029761025c565b6001600160a01b03166102a86106b0565b6001600160a01b0316145b6102f9576040805162461bcd60e51b81526020600482015260126024820152712cb7ba93b932903737ba103ab83230ba32b960711b604482015290519081900360640190fd5b61030161025c565b6001600160a01b03166103126106b0565b6001600160a01b0316146103e1576000600154821161033d5760015461033890836106b4565b61034b565b60015461034b9083906106b4565b9050600061038e610367600254426106b490919063ffffffff16565b60015461038890816201518061038264e8d4a5100089610716565b90610716565b90610776565b90506003548111156103de576040805162461bcd60e51b81526020600482015260146024820152735072696365206368616e676520746f6f2062696760601b604482015290519081900360640190fd5b50505b60018190554260025560405181907fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d62290600090a250565b6104206106b0565b6001600160a01b031661043161025c565b6001600160a01b03161461047a576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b600381905560405181907f1b385cc6106048a7dca0a143930badfbb586492816fd033085150932635b3cee90600090a250565b6104b56106b0565b6001600160a01b03166104c661025c565b6001600160a01b03161461050f576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b6001600160a01b0381166105545760405162461bcd60e51b81526004018080602001828103825260298152602001806108046029913960400191505060405180910390fd5b600480546001600160a01b038381166001600160a01b03198316179283905560405191811692169082907f662a4a4a892f5f13cf7ee050fdaa045f8641601fdbc843e8a71f418099cacd4e90600090a35050565b60015490565b6105b66106b0565b6001600160a01b03166105c761025c565b6001600160a01b031614610610576040805162461bcd60e51b8152602060048201819052602482015260008051602061084e833981519152604482015290519081900360640190fd5b6001600160a01b0381166106555760405162461bcd60e51b81526004018080602001828103825260268152602001806107de6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60008282111561070b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b60008261072557506000610710565b8282028284828161073257fe5b041461076f5760405162461bcd60e51b815260040180806020018281038252602181526020018061082d6021913960400191505060405180910390fd5b9392505050565b60008082116107cc576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816107d557fe5b04939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373557064617465722063616e6e6f742062652073657420746f20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220a61ac53d0c7f5fb60a7de532f3327f3ba2f567983f20a6b256436a5de397c3d164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1782,
        "contract": "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol:FiatToFiatPseudoOracleFeed",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9177,
        "contract": "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol:FiatToFiatPseudoOracleFeed",
        "label": "recentPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9179,
        "contract": "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol:FiatToFiatPseudoOracleFeed",
        "label": "lastUpdateTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9182,
        "contract": "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol:FiatToFiatPseudoOracleFeed",
        "label": "maxDayChange_d12",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9184,
        "contract": "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol:FiatToFiatPseudoOracleFeed",
        "label": "updater",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}